/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.syncinterface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BinaryData implements org.apache.thrift.TBase<BinaryData, BinaryData._Fields>, java.io.Serializable, Cloneable, Comparable<BinaryData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BinaryData");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CHECKALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("checkalgorithm", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CHECKCODES_FIELD_DESC = new org.apache.thrift.protocol.TField("checkcodes", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BinaryDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BinaryDataTupleSchemeFactory());
  }

  public long version; // required
  /**
   * 
   * @see BinaryType
   */
  public BinaryType type; // required
  public long length; // optional
  public String checkalgorithm; // optional
  public ByteBuffer checkcodes; // optional
  public ByteBuffer data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    /**
     * 
     * @see BinaryType
     */
    TYPE((short)2, "type"),
    LENGTH((short)3, "length"),
    CHECKALGORITHM((short)4, "checkalgorithm"),
    CHECKCODES((short)5, "checkcodes"),
    DATA((short)6, "data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // TYPE
          return TYPE;
        case 3: // LENGTH
          return LENGTH;
        case 4: // CHECKALGORITHM
          return CHECKALGORITHM;
        case 5: // CHECKCODES
          return CHECKCODES;
        case 6: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LENGTH,_Fields.CHECKALGORITHM,_Fields.CHECKCODES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BinaryType.class)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHECKALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("checkalgorithm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECKCODES, new org.apache.thrift.meta_data.FieldMetaData("checkcodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BinaryData.class, metaDataMap);
  }

  public BinaryData() {
  }

  public BinaryData(
    long version,
    BinaryType type,
    ByteBuffer data)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.type = type;
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BinaryData(BinaryData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.length = other.length;
    if (other.isSetCheckalgorithm()) {
      this.checkalgorithm = other.checkalgorithm;
    }
    if (other.isSetCheckcodes()) {
      this.checkcodes = org.apache.thrift.TBaseHelper.copyBinary(other.checkcodes);
;
    }
    if (other.isSetData()) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
;
    }
  }

  public BinaryData deepCopy() {
    return new BinaryData(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    this.type = null;
    setLengthIsSet(false);
    this.length = 0;
    this.checkalgorithm = null;
    this.checkcodes = null;
    this.data = null;
  }

  public long getVersion() {
    return this.version;
  }

  public BinaryData setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  /**
   * 
   * @see BinaryType
   */
  public BinaryType getType() {
    return this.type;
  }

  /**
   * 
   * @see BinaryType
   */
  public BinaryData setType(BinaryType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getLength() {
    return this.length;
  }

  public BinaryData setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public String getCheckalgorithm() {
    return this.checkalgorithm;
  }

  public BinaryData setCheckalgorithm(String checkalgorithm) {
    this.checkalgorithm = checkalgorithm;
    return this;
  }

  public void unsetCheckalgorithm() {
    this.checkalgorithm = null;
  }

  /** Returns true if field checkalgorithm is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckalgorithm() {
    return this.checkalgorithm != null;
  }

  public void setCheckalgorithmIsSet(boolean value) {
    if (!value) {
      this.checkalgorithm = null;
    }
  }

  public byte[] getCheckcodes() {
    setCheckcodes(org.apache.thrift.TBaseHelper.rightSize(checkcodes));
    return checkcodes == null ? null : checkcodes.array();
  }

  public ByteBuffer bufferForCheckcodes() {
    return checkcodes;
  }

  public BinaryData setCheckcodes(byte[] checkcodes) {
    setCheckcodes(checkcodes == null ? (ByteBuffer)null : ByteBuffer.wrap(checkcodes));
    return this;
  }

  public BinaryData setCheckcodes(ByteBuffer checkcodes) {
    this.checkcodes = checkcodes;
    return this;
  }

  public void unsetCheckcodes() {
    this.checkcodes = null;
  }

  /** Returns true if field checkcodes is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckcodes() {
    return this.checkcodes != null;
  }

  public void setCheckcodesIsSet(boolean value) {
    if (!value) {
      this.checkcodes = null;
    }
  }

  public byte[] getData() {
    setData(org.apache.thrift.TBaseHelper.rightSize(data));
    return data == null ? null : data.array();
  }

  public ByteBuffer bufferForData() {
    return data;
  }

  public BinaryData setData(byte[] data) {
    setData(data == null ? (ByteBuffer)null : ByteBuffer.wrap(data));
    return this;
  }

  public BinaryData setData(ByteBuffer data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((BinaryType)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    case CHECKALGORITHM:
      if (value == null) {
        unsetCheckalgorithm();
      } else {
        setCheckalgorithm((String)value);
      }
      break;

    case CHECKCODES:
      if (value == null) {
        unsetCheckcodes();
      } else {
        setCheckcodes((ByteBuffer)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Long.valueOf(getVersion());

    case TYPE:
      return getType();

    case LENGTH:
      return Long.valueOf(getLength());

    case CHECKALGORITHM:
      return getCheckalgorithm();

    case CHECKCODES:
      return getCheckcodes();

    case DATA:
      return getData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case TYPE:
      return isSetType();
    case LENGTH:
      return isSetLength();
    case CHECKALGORITHM:
      return isSetCheckalgorithm();
    case CHECKCODES:
      return isSetCheckcodes();
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BinaryData)
      return this.equals((BinaryData)that);
    return false;
  }

  public boolean equals(BinaryData that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_length = true && this.isSetLength();
    boolean that_present_length = true && that.isSetLength();
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_checkalgorithm = true && this.isSetCheckalgorithm();
    boolean that_present_checkalgorithm = true && that.isSetCheckalgorithm();
    if (this_present_checkalgorithm || that_present_checkalgorithm) {
      if (!(this_present_checkalgorithm && that_present_checkalgorithm))
        return false;
      if (!this.checkalgorithm.equals(that.checkalgorithm))
        return false;
    }

    boolean this_present_checkcodes = true && this.isSetCheckcodes();
    boolean that_present_checkcodes = true && that.isSetCheckcodes();
    if (this_present_checkcodes || that_present_checkcodes) {
      if (!(this_present_checkcodes && that_present_checkcodes))
        return false;
      if (!this.checkcodes.equals(that.checkcodes))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BinaryData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckalgorithm()).compareTo(other.isSetCheckalgorithm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckalgorithm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkalgorithm, other.checkalgorithm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckcodes()).compareTo(other.isSetCheckcodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckcodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkcodes, other.checkcodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BinaryData(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetLength()) {
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
    }
    if (isSetCheckalgorithm()) {
      if (!first) sb.append(", ");
      sb.append("checkalgorithm:");
      if (this.checkalgorithm == null) {
        sb.append("null");
      } else {
        sb.append(this.checkalgorithm);
      }
      first = false;
    }
    if (isSetCheckcodes()) {
      if (!first) sb.append(", ");
      sb.append("checkcodes:");
      if (this.checkcodes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.checkcodes, sb);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.data, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    if (data == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BinaryDataStandardSchemeFactory implements SchemeFactory {
    public BinaryDataStandardScheme getScheme() {
      return new BinaryDataStandardScheme();
    }
  }

  private static class BinaryDataStandardScheme extends StandardScheme<BinaryData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BinaryData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = BinaryType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHECKALGORITHM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkalgorithm = iprot.readString();
              struct.setCheckalgorithmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHECKCODES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkcodes = iprot.readBinary();
              struct.setCheckcodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BinaryData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetLength()) {
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI64(struct.length);
        oprot.writeFieldEnd();
      }
      if (struct.checkalgorithm != null) {
        if (struct.isSetCheckalgorithm()) {
          oprot.writeFieldBegin(CHECKALGORITHM_FIELD_DESC);
          oprot.writeString(struct.checkalgorithm);
          oprot.writeFieldEnd();
        }
      }
      if (struct.checkcodes != null) {
        if (struct.isSetCheckcodes()) {
          oprot.writeFieldBegin(CHECKCODES_FIELD_DESC);
          oprot.writeBinary(struct.checkcodes);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeBinary(struct.data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BinaryDataTupleSchemeFactory implements SchemeFactory {
    public BinaryDataTupleScheme getScheme() {
      return new BinaryDataTupleScheme();
    }
  }

  private static class BinaryDataTupleScheme extends TupleScheme<BinaryData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BinaryData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.version);
      oprot.writeI32(struct.type.getValue());
      oprot.writeBinary(struct.data);
      BitSet optionals = new BitSet();
      if (struct.isSetLength()) {
        optionals.set(0);
      }
      if (struct.isSetCheckalgorithm()) {
        optionals.set(1);
      }
      if (struct.isSetCheckcodes()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLength()) {
        oprot.writeI64(struct.length);
      }
      if (struct.isSetCheckalgorithm()) {
        oprot.writeString(struct.checkalgorithm);
      }
      if (struct.isSetCheckcodes()) {
        oprot.writeBinary(struct.checkcodes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BinaryData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.version = iprot.readI64();
      struct.setVersionIsSet(true);
      struct.type = BinaryType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.data = iprot.readBinary();
      struct.setDataIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.length = iprot.readI64();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(1)) {
        struct.checkalgorithm = iprot.readString();
        struct.setCheckalgorithmIsSet(true);
      }
      if (incoming.get(2)) {
        struct.checkcodes = iprot.readBinary();
        struct.setCheckcodesIsSet(true);
      }
    }
  }

}

