/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.admanager;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_AdManager_Ip_Target implements org.apache.thrift.TBase<TDbSync_AdManager_Ip_Target, TDbSync_AdManager_Ip_Target._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_AdManager_Ip_Target> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_AdManager_Ip_Target");

  private static final org.apache.thrift.protocol.TField AD_SPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adSpaceID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IP_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ipRange", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MEDIA_BUY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaBuyID", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COOKIE_TARGET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("cookieTargetFlag", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campaignID", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IP_RANGE_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("ipRangeMin", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IP_RANGE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("ipRangeMax", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_AdManager_Ip_TargetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_AdManager_Ip_TargetTupleSchemeFactory());
  }

  public int adSpaceID; // required
  public String ipAddress; // required
  public String ipRange; // required
  public int mediaBuyID; // required
  public int cookieTargetFlag; // required
  public int campaignID; // required
  public int ipRangeMin; // required
  public int ipRangeMax; // required
  public String lastChanged; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AD_SPACE_ID((short)1, "adSpaceID"),
    IP_ADDRESS((short)2, "ipAddress"),
    IP_RANGE((short)3, "ipRange"),
    MEDIA_BUY_ID((short)4, "mediaBuyID"),
    COOKIE_TARGET_FLAG((short)5, "cookieTargetFlag"),
    CAMPAIGN_ID((short)6, "campaignID"),
    IP_RANGE_MIN((short)7, "ipRangeMin"),
    IP_RANGE_MAX((short)8, "ipRangeMax"),
    LAST_CHANGED((short)9, "lastChanged"),
    STATUS((short)10, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AD_SPACE_ID
          return AD_SPACE_ID;
        case 2: // IP_ADDRESS
          return IP_ADDRESS;
        case 3: // IP_RANGE
          return IP_RANGE;
        case 4: // MEDIA_BUY_ID
          return MEDIA_BUY_ID;
        case 5: // COOKIE_TARGET_FLAG
          return COOKIE_TARGET_FLAG;
        case 6: // CAMPAIGN_ID
          return CAMPAIGN_ID;
        case 7: // IP_RANGE_MIN
          return IP_RANGE_MIN;
        case 8: // IP_RANGE_MAX
          return IP_RANGE_MAX;
        case 9: // LAST_CHANGED
          return LAST_CHANGED;
        case 10: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ADSPACEID_ISSET_ID = 0;
  private static final int __MEDIABUYID_ISSET_ID = 1;
  private static final int __COOKIETARGETFLAG_ISSET_ID = 2;
  private static final int __CAMPAIGNID_ISSET_ID = 3;
  private static final int __IPRANGEMIN_ISSET_ID = 4;
  private static final int __IPRANGEMAX_ISSET_ID = 5;
  private static final int __STATUS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AD_SPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("adSpaceID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_RANGE, new org.apache.thrift.meta_data.FieldMetaData("ipRange", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_BUY_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaBuyID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COOKIE_TARGET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("cookieTargetFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("campaignID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_RANGE_MIN, new org.apache.thrift.meta_data.FieldMetaData("ipRangeMin", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_RANGE_MAX, new org.apache.thrift.meta_data.FieldMetaData("ipRangeMax", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_AdManager_Ip_Target.class, metaDataMap);
  }

  public TDbSync_AdManager_Ip_Target() {
  }

  public TDbSync_AdManager_Ip_Target(
    int adSpaceID,
    String ipAddress,
    String ipRange,
    int mediaBuyID,
    int cookieTargetFlag,
    int campaignID,
    int ipRangeMin,
    int ipRangeMax,
    String lastChanged,
    int status)
  {
    this();
    this.adSpaceID = adSpaceID;
    setAdSpaceIDIsSet(true);
    this.ipAddress = ipAddress;
    this.ipRange = ipRange;
    this.mediaBuyID = mediaBuyID;
    setMediaBuyIDIsSet(true);
    this.cookieTargetFlag = cookieTargetFlag;
    setCookieTargetFlagIsSet(true);
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    this.ipRangeMin = ipRangeMin;
    setIpRangeMinIsSet(true);
    this.ipRangeMax = ipRangeMax;
    setIpRangeMaxIsSet(true);
    this.lastChanged = lastChanged;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_AdManager_Ip_Target(TDbSync_AdManager_Ip_Target other) {
    __isset_bitfield = other.__isset_bitfield;
    this.adSpaceID = other.adSpaceID;
    if (other.isSetIpAddress()) {
      this.ipAddress = other.ipAddress;
    }
    if (other.isSetIpRange()) {
      this.ipRange = other.ipRange;
    }
    this.mediaBuyID = other.mediaBuyID;
    this.cookieTargetFlag = other.cookieTargetFlag;
    this.campaignID = other.campaignID;
    this.ipRangeMin = other.ipRangeMin;
    this.ipRangeMax = other.ipRangeMax;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    this.status = other.status;
  }

  public TDbSync_AdManager_Ip_Target deepCopy() {
    return new TDbSync_AdManager_Ip_Target(this);
  }

  @Override
  public void clear() {
    setAdSpaceIDIsSet(false);
    this.adSpaceID = 0;
    this.ipAddress = null;
    this.ipRange = null;
    setMediaBuyIDIsSet(false);
    this.mediaBuyID = 0;
    setCookieTargetFlagIsSet(false);
    this.cookieTargetFlag = 0;
    setCampaignIDIsSet(false);
    this.campaignID = 0;
    setIpRangeMinIsSet(false);
    this.ipRangeMin = 0;
    setIpRangeMaxIsSet(false);
    this.ipRangeMax = 0;
    this.lastChanged = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getAdSpaceID() {
    return this.adSpaceID;
  }

  public TDbSync_AdManager_Ip_Target setAdSpaceID(int adSpaceID) {
    this.adSpaceID = adSpaceID;
    setAdSpaceIDIsSet(true);
    return this;
  }

  public void unsetAdSpaceID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADSPACEID_ISSET_ID);
  }

  /** Returns true if field adSpaceID is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSpaceID() {
    return EncodingUtils.testBit(__isset_bitfield, __ADSPACEID_ISSET_ID);
  }

  public void setAdSpaceIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADSPACEID_ISSET_ID, value);
  }

  public String getIpAddress() {
    return this.ipAddress;
  }

  public TDbSync_AdManager_Ip_Target setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  public void unsetIpAddress() {
    this.ipAddress = null;
  }

  /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddress() {
    return this.ipAddress != null;
  }

  public void setIpAddressIsSet(boolean value) {
    if (!value) {
      this.ipAddress = null;
    }
  }

  public String getIpRange() {
    return this.ipRange;
  }

  public TDbSync_AdManager_Ip_Target setIpRange(String ipRange) {
    this.ipRange = ipRange;
    return this;
  }

  public void unsetIpRange() {
    this.ipRange = null;
  }

  /** Returns true if field ipRange is set (has been assigned a value) and false otherwise */
  public boolean isSetIpRange() {
    return this.ipRange != null;
  }

  public void setIpRangeIsSet(boolean value) {
    if (!value) {
      this.ipRange = null;
    }
  }

  public int getMediaBuyID() {
    return this.mediaBuyID;
  }

  public TDbSync_AdManager_Ip_Target setMediaBuyID(int mediaBuyID) {
    this.mediaBuyID = mediaBuyID;
    setMediaBuyIDIsSet(true);
    return this;
  }

  public void unsetMediaBuyID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIABUYID_ISSET_ID);
  }

  /** Returns true if field mediaBuyID is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaBuyID() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIABUYID_ISSET_ID);
  }

  public void setMediaBuyIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIABUYID_ISSET_ID, value);
  }

  public int getCookieTargetFlag() {
    return this.cookieTargetFlag;
  }

  public TDbSync_AdManager_Ip_Target setCookieTargetFlag(int cookieTargetFlag) {
    this.cookieTargetFlag = cookieTargetFlag;
    setCookieTargetFlagIsSet(true);
    return this;
  }

  public void unsetCookieTargetFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COOKIETARGETFLAG_ISSET_ID);
  }

  /** Returns true if field cookieTargetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCookieTargetFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __COOKIETARGETFLAG_ISSET_ID);
  }

  public void setCookieTargetFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COOKIETARGETFLAG_ISSET_ID, value);
  }

  public int getCampaignID() {
    return this.campaignID;
  }

  public TDbSync_AdManager_Ip_Target setCampaignID(int campaignID) {
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    return this;
  }

  public void unsetCampaignID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  /** Returns true if field campaignID is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaignID() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  public void setCampaignIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID, value);
  }

  public int getIpRangeMin() {
    return this.ipRangeMin;
  }

  public TDbSync_AdManager_Ip_Target setIpRangeMin(int ipRangeMin) {
    this.ipRangeMin = ipRangeMin;
    setIpRangeMinIsSet(true);
    return this;
  }

  public void unsetIpRangeMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IPRANGEMIN_ISSET_ID);
  }

  /** Returns true if field ipRangeMin is set (has been assigned a value) and false otherwise */
  public boolean isSetIpRangeMin() {
    return EncodingUtils.testBit(__isset_bitfield, __IPRANGEMIN_ISSET_ID);
  }

  public void setIpRangeMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IPRANGEMIN_ISSET_ID, value);
  }

  public int getIpRangeMax() {
    return this.ipRangeMax;
  }

  public TDbSync_AdManager_Ip_Target setIpRangeMax(int ipRangeMax) {
    this.ipRangeMax = ipRangeMax;
    setIpRangeMaxIsSet(true);
    return this;
  }

  public void unsetIpRangeMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IPRANGEMAX_ISSET_ID);
  }

  /** Returns true if field ipRangeMax is set (has been assigned a value) and false otherwise */
  public boolean isSetIpRangeMax() {
    return EncodingUtils.testBit(__isset_bitfield, __IPRANGEMAX_ISSET_ID);
  }

  public void setIpRangeMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IPRANGEMAX_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_AdManager_Ip_Target setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_AdManager_Ip_Target setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AD_SPACE_ID:
      if (value == null) {
        unsetAdSpaceID();
      } else {
        setAdSpaceID((Integer)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIpAddress();
      } else {
        setIpAddress((String)value);
      }
      break;

    case IP_RANGE:
      if (value == null) {
        unsetIpRange();
      } else {
        setIpRange((String)value);
      }
      break;

    case MEDIA_BUY_ID:
      if (value == null) {
        unsetMediaBuyID();
      } else {
        setMediaBuyID((Integer)value);
      }
      break;

    case COOKIE_TARGET_FLAG:
      if (value == null) {
        unsetCookieTargetFlag();
      } else {
        setCookieTargetFlag((Integer)value);
      }
      break;

    case CAMPAIGN_ID:
      if (value == null) {
        unsetCampaignID();
      } else {
        setCampaignID((Integer)value);
      }
      break;

    case IP_RANGE_MIN:
      if (value == null) {
        unsetIpRangeMin();
      } else {
        setIpRangeMin((Integer)value);
      }
      break;

    case IP_RANGE_MAX:
      if (value == null) {
        unsetIpRangeMax();
      } else {
        setIpRangeMax((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AD_SPACE_ID:
      return Integer.valueOf(getAdSpaceID());

    case IP_ADDRESS:
      return getIpAddress();

    case IP_RANGE:
      return getIpRange();

    case MEDIA_BUY_ID:
      return Integer.valueOf(getMediaBuyID());

    case COOKIE_TARGET_FLAG:
      return Integer.valueOf(getCookieTargetFlag());

    case CAMPAIGN_ID:
      return Integer.valueOf(getCampaignID());

    case IP_RANGE_MIN:
      return Integer.valueOf(getIpRangeMin());

    case IP_RANGE_MAX:
      return Integer.valueOf(getIpRangeMax());

    case LAST_CHANGED:
      return getLastChanged();

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AD_SPACE_ID:
      return isSetAdSpaceID();
    case IP_ADDRESS:
      return isSetIpAddress();
    case IP_RANGE:
      return isSetIpRange();
    case MEDIA_BUY_ID:
      return isSetMediaBuyID();
    case COOKIE_TARGET_FLAG:
      return isSetCookieTargetFlag();
    case CAMPAIGN_ID:
      return isSetCampaignID();
    case IP_RANGE_MIN:
      return isSetIpRangeMin();
    case IP_RANGE_MAX:
      return isSetIpRangeMax();
    case LAST_CHANGED:
      return isSetLastChanged();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_AdManager_Ip_Target)
      return this.equals((TDbSync_AdManager_Ip_Target)that);
    return false;
  }

  public boolean equals(TDbSync_AdManager_Ip_Target that) {
    if (that == null)
      return false;

    boolean this_present_adSpaceID = true;
    boolean that_present_adSpaceID = true;
    if (this_present_adSpaceID || that_present_adSpaceID) {
      if (!(this_present_adSpaceID && that_present_adSpaceID))
        return false;
      if (this.adSpaceID != that.adSpaceID)
        return false;
    }

    boolean this_present_ipAddress = true && this.isSetIpAddress();
    boolean that_present_ipAddress = true && that.isSetIpAddress();
    if (this_present_ipAddress || that_present_ipAddress) {
      if (!(this_present_ipAddress && that_present_ipAddress))
        return false;
      if (!this.ipAddress.equals(that.ipAddress))
        return false;
    }

    boolean this_present_ipRange = true && this.isSetIpRange();
    boolean that_present_ipRange = true && that.isSetIpRange();
    if (this_present_ipRange || that_present_ipRange) {
      if (!(this_present_ipRange && that_present_ipRange))
        return false;
      if (!this.ipRange.equals(that.ipRange))
        return false;
    }

    boolean this_present_mediaBuyID = true;
    boolean that_present_mediaBuyID = true;
    if (this_present_mediaBuyID || that_present_mediaBuyID) {
      if (!(this_present_mediaBuyID && that_present_mediaBuyID))
        return false;
      if (this.mediaBuyID != that.mediaBuyID)
        return false;
    }

    boolean this_present_cookieTargetFlag = true;
    boolean that_present_cookieTargetFlag = true;
    if (this_present_cookieTargetFlag || that_present_cookieTargetFlag) {
      if (!(this_present_cookieTargetFlag && that_present_cookieTargetFlag))
        return false;
      if (this.cookieTargetFlag != that.cookieTargetFlag)
        return false;
    }

    boolean this_present_campaignID = true;
    boolean that_present_campaignID = true;
    if (this_present_campaignID || that_present_campaignID) {
      if (!(this_present_campaignID && that_present_campaignID))
        return false;
      if (this.campaignID != that.campaignID)
        return false;
    }

    boolean this_present_ipRangeMin = true;
    boolean that_present_ipRangeMin = true;
    if (this_present_ipRangeMin || that_present_ipRangeMin) {
      if (!(this_present_ipRangeMin && that_present_ipRangeMin))
        return false;
      if (this.ipRangeMin != that.ipRangeMin)
        return false;
    }

    boolean this_present_ipRangeMax = true;
    boolean that_present_ipRangeMax = true;
    if (this_present_ipRangeMax || that_present_ipRangeMax) {
      if (!(this_present_ipRangeMax && that_present_ipRangeMax))
        return false;
      if (this.ipRangeMax != that.ipRangeMax)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_AdManager_Ip_Target other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdSpaceID()).compareTo(other.isSetAdSpaceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSpaceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSpaceID, other.adSpaceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpAddress()).compareTo(other.isSetIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, other.ipAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpRange()).compareTo(other.isSetIpRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipRange, other.ipRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaBuyID()).compareTo(other.isSetMediaBuyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaBuyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaBuyID, other.mediaBuyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCookieTargetFlag()).compareTo(other.isSetCookieTargetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCookieTargetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookieTargetFlag, other.cookieTargetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaignID()).compareTo(other.isSetCampaignID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaignID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaignID, other.campaignID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpRangeMin()).compareTo(other.isSetIpRangeMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpRangeMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipRangeMin, other.ipRangeMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpRangeMax()).compareTo(other.isSetIpRangeMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpRangeMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipRangeMax, other.ipRangeMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_AdManager_Ip_Target(");
    boolean first = true;

    sb.append("adSpaceID:");
    sb.append(this.adSpaceID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipAddress:");
    if (this.ipAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.ipAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipRange:");
    if (this.ipRange == null) {
      sb.append("null");
    } else {
      sb.append(this.ipRange);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaBuyID:");
    sb.append(this.mediaBuyID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cookieTargetFlag:");
    sb.append(this.cookieTargetFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("campaignID:");
    sb.append(this.campaignID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipRangeMin:");
    sb.append(this.ipRangeMin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipRangeMax:");
    sb.append(this.ipRangeMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'adSpaceID' because it's a primitive and you chose the non-beans generator.
    if (ipAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ipAddress' was not present! Struct: " + toString());
    }
    if (ipRange == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ipRange' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'mediaBuyID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'cookieTargetFlag' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'campaignID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ipRangeMin' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ipRangeMax' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_AdManager_Ip_TargetStandardSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Ip_TargetStandardScheme getScheme() {
      return new TDbSync_AdManager_Ip_TargetStandardScheme();
    }
  }

  private static class TDbSync_AdManager_Ip_TargetStandardScheme extends StandardScheme<TDbSync_AdManager_Ip_Target> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_AdManager_Ip_Target struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AD_SPACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adSpaceID = iprot.readI32();
              struct.setAdSpaceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipAddress = iprot.readString();
              struct.setIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IP_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipRange = iprot.readString();
              struct.setIpRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEDIA_BUY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaBuyID = iprot.readI32();
              struct.setMediaBuyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COOKIE_TARGET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cookieTargetFlag = iprot.readI32();
              struct.setCookieTargetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CAMPAIGN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.campaignID = iprot.readI32();
              struct.setCampaignIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IP_RANGE_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipRangeMin = iprot.readI32();
              struct.setIpRangeMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IP_RANGE_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ipRangeMax = iprot.readI32();
              struct.setIpRangeMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAdSpaceID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adSpaceID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMediaBuyID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaBuyID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCookieTargetFlag()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cookieTargetFlag' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCampaignID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'campaignID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIpRangeMin()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ipRangeMin' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIpRangeMax()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ipRangeMax' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_AdManager_Ip_Target struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(AD_SPACE_ID_FIELD_DESC);
      oprot.writeI32(struct.adSpaceID);
      oprot.writeFieldEnd();
      if (struct.ipAddress != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.ipAddress);
        oprot.writeFieldEnd();
      }
      if (struct.ipRange != null) {
        oprot.writeFieldBegin(IP_RANGE_FIELD_DESC);
        oprot.writeString(struct.ipRange);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEDIA_BUY_ID_FIELD_DESC);
      oprot.writeI32(struct.mediaBuyID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COOKIE_TARGET_FLAG_FIELD_DESC);
      oprot.writeI32(struct.cookieTargetFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAMPAIGN_ID_FIELD_DESC);
      oprot.writeI32(struct.campaignID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IP_RANGE_MIN_FIELD_DESC);
      oprot.writeI32(struct.ipRangeMin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IP_RANGE_MAX_FIELD_DESC);
      oprot.writeI32(struct.ipRangeMax);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_AdManager_Ip_TargetTupleSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Ip_TargetTupleScheme getScheme() {
      return new TDbSync_AdManager_Ip_TargetTupleScheme();
    }
  }

  private static class TDbSync_AdManager_Ip_TargetTupleScheme extends TupleScheme<TDbSync_AdManager_Ip_Target> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Ip_Target struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.adSpaceID);
      oprot.writeString(struct.ipAddress);
      oprot.writeString(struct.ipRange);
      oprot.writeI32(struct.mediaBuyID);
      oprot.writeI32(struct.cookieTargetFlag);
      oprot.writeI32(struct.campaignID);
      oprot.writeI32(struct.ipRangeMin);
      oprot.writeI32(struct.ipRangeMax);
      oprot.writeString(struct.lastChanged);
      oprot.writeI32(struct.status);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Ip_Target struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.adSpaceID = iprot.readI32();
      struct.setAdSpaceIDIsSet(true);
      struct.ipAddress = iprot.readString();
      struct.setIpAddressIsSet(true);
      struct.ipRange = iprot.readString();
      struct.setIpRangeIsSet(true);
      struct.mediaBuyID = iprot.readI32();
      struct.setMediaBuyIDIsSet(true);
      struct.cookieTargetFlag = iprot.readI32();
      struct.setCookieTargetFlagIsSet(true);
      struct.campaignID = iprot.readI32();
      struct.setCampaignIDIsSet(true);
      struct.ipRangeMin = iprot.readI32();
      struct.setIpRangeMinIsSet(true);
      struct.ipRangeMax = iprot.readI32();
      struct.setIpRangeMaxIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
    }
  }

}

