/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.admanager;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_AdManager_Creative_Files implements org.apache.thrift.TBase<TDbSync_AdManager_Creative_Files, TDbSync_AdManager_Creative_Files._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_AdManager_Creative_Files> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_AdManager_Creative_Files");

  private static final org.apache.thrift.protocol.TField CREATIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creativeID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MEDIA_FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaFileUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TRANSPARENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("transparency", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CAPTION_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("captionFile", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OVERLAY_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("overlayFile", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ORIGINAL_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("originalFileName", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_AdManager_Creative_FilesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_AdManager_Creative_FilesTupleSchemeFactory());
  }

  public int creativeID; // required
  public int sequence; // required
  public int status; // required
  public String lastChanged; // required
  public int fileType; // required
  public String mediaFileUrl; // required
  public int contentType; // required
  public int transparency; // required
  public String captionFile; // required
  public String overlayFile; // required
  public String originalFileName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CREATIVE_ID((short)1, "creativeID"),
    SEQUENCE((short)2, "sequence"),
    STATUS((short)3, "status"),
    LAST_CHANGED((short)4, "lastChanged"),
    FILE_TYPE((short)5, "fileType"),
    MEDIA_FILE_URL((short)6, "mediaFileUrl"),
    CONTENT_TYPE((short)7, "contentType"),
    TRANSPARENCY((short)8, "transparency"),
    CAPTION_FILE((short)9, "captionFile"),
    OVERLAY_FILE((short)10, "overlayFile"),
    ORIGINAL_FILE_NAME((short)11, "originalFileName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREATIVE_ID
          return CREATIVE_ID;
        case 2: // SEQUENCE
          return SEQUENCE;
        case 3: // STATUS
          return STATUS;
        case 4: // LAST_CHANGED
          return LAST_CHANGED;
        case 5: // FILE_TYPE
          return FILE_TYPE;
        case 6: // MEDIA_FILE_URL
          return MEDIA_FILE_URL;
        case 7: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 8: // TRANSPARENCY
          return TRANSPARENCY;
        case 9: // CAPTION_FILE
          return CAPTION_FILE;
        case 10: // OVERLAY_FILE
          return OVERLAY_FILE;
        case 11: // ORIGINAL_FILE_NAME
          return ORIGINAL_FILE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATIVEID_ISSET_ID = 0;
  private static final int __SEQUENCE_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __FILETYPE_ISSET_ID = 3;
  private static final int __CONTENTTYPE_ISSET_ID = 4;
  private static final int __TRANSPARENCY_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREATIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("creativeID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("sequence", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEDIA_FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("mediaFileUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSPARENCY, new org.apache.thrift.meta_data.FieldMetaData("transparency", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAPTION_FILE, new org.apache.thrift.meta_data.FieldMetaData("captionFile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERLAY_FILE, new org.apache.thrift.meta_data.FieldMetaData("overlayFile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("originalFileName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_AdManager_Creative_Files.class, metaDataMap);
  }

  public TDbSync_AdManager_Creative_Files() {
  }

  public TDbSync_AdManager_Creative_Files(
    int creativeID,
    int sequence,
    int status,
    String lastChanged,
    int fileType,
    String mediaFileUrl,
    int contentType,
    int transparency,
    String captionFile,
    String overlayFile,
    String originalFileName)
  {
    this();
    this.creativeID = creativeID;
    setCreativeIDIsSet(true);
    this.sequence = sequence;
    setSequenceIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.fileType = fileType;
    setFileTypeIsSet(true);
    this.mediaFileUrl = mediaFileUrl;
    this.contentType = contentType;
    setContentTypeIsSet(true);
    this.transparency = transparency;
    setTransparencyIsSet(true);
    this.captionFile = captionFile;
    this.overlayFile = overlayFile;
    this.originalFileName = originalFileName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_AdManager_Creative_Files(TDbSync_AdManager_Creative_Files other) {
    __isset_bitfield = other.__isset_bitfield;
    this.creativeID = other.creativeID;
    this.sequence = other.sequence;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    this.fileType = other.fileType;
    if (other.isSetMediaFileUrl()) {
      this.mediaFileUrl = other.mediaFileUrl;
    }
    this.contentType = other.contentType;
    this.transparency = other.transparency;
    if (other.isSetCaptionFile()) {
      this.captionFile = other.captionFile;
    }
    if (other.isSetOverlayFile()) {
      this.overlayFile = other.overlayFile;
    }
    if (other.isSetOriginalFileName()) {
      this.originalFileName = other.originalFileName;
    }
  }

  public TDbSync_AdManager_Creative_Files deepCopy() {
    return new TDbSync_AdManager_Creative_Files(this);
  }

  @Override
  public void clear() {
    setCreativeIDIsSet(false);
    this.creativeID = 0;
    setSequenceIsSet(false);
    this.sequence = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    setFileTypeIsSet(false);
    this.fileType = 0;
    this.mediaFileUrl = null;
    setContentTypeIsSet(false);
    this.contentType = 0;
    setTransparencyIsSet(false);
    this.transparency = 0;
    this.captionFile = null;
    this.overlayFile = null;
    this.originalFileName = null;
  }

  public int getCreativeID() {
    return this.creativeID;
  }

  public TDbSync_AdManager_Creative_Files setCreativeID(int creativeID) {
    this.creativeID = creativeID;
    setCreativeIDIsSet(true);
    return this;
  }

  public void unsetCreativeID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIVEID_ISSET_ID);
  }

  /** Returns true if field creativeID is set (has been assigned a value) and false otherwise */
  public boolean isSetCreativeID() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIVEID_ISSET_ID);
  }

  public void setCreativeIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIVEID_ISSET_ID, value);
  }

  public int getSequence() {
    return this.sequence;
  }

  public TDbSync_AdManager_Creative_Files setSequence(int sequence) {
    this.sequence = sequence;
    setSequenceIsSet(true);
    return this;
  }

  public void unsetSequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  /** Returns true if field sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  public void setSequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_AdManager_Creative_Files setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_AdManager_Creative_Files setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public int getFileType() {
    return this.fileType;
  }

  public TDbSync_AdManager_Creative_Files setFileType(int fileType) {
    this.fileType = fileType;
    setFileTypeIsSet(true);
    return this;
  }

  public void unsetFileType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILETYPE_ISSET_ID);
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return EncodingUtils.testBit(__isset_bitfield, __FILETYPE_ISSET_ID);
  }

  public void setFileTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILETYPE_ISSET_ID, value);
  }

  public String getMediaFileUrl() {
    return this.mediaFileUrl;
  }

  public TDbSync_AdManager_Creative_Files setMediaFileUrl(String mediaFileUrl) {
    this.mediaFileUrl = mediaFileUrl;
    return this;
  }

  public void unsetMediaFileUrl() {
    this.mediaFileUrl = null;
  }

  /** Returns true if field mediaFileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaFileUrl() {
    return this.mediaFileUrl != null;
  }

  public void setMediaFileUrlIsSet(boolean value) {
    if (!value) {
      this.mediaFileUrl = null;
    }
  }

  public int getContentType() {
    return this.contentType;
  }

  public TDbSync_AdManager_Creative_Files setContentType(int contentType) {
    this.contentType = contentType;
    setContentTypeIsSet(true);
    return this;
  }

  public void unsetContentType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTTYPE_ISSET_ID);
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTENTTYPE_ISSET_ID);
  }

  public void setContentTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTTYPE_ISSET_ID, value);
  }

  public int getTransparency() {
    return this.transparency;
  }

  public TDbSync_AdManager_Creative_Files setTransparency(int transparency) {
    this.transparency = transparency;
    setTransparencyIsSet(true);
    return this;
  }

  public void unsetTransparency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSPARENCY_ISSET_ID);
  }

  /** Returns true if field transparency is set (has been assigned a value) and false otherwise */
  public boolean isSetTransparency() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSPARENCY_ISSET_ID);
  }

  public void setTransparencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSPARENCY_ISSET_ID, value);
  }

  public String getCaptionFile() {
    return this.captionFile;
  }

  public TDbSync_AdManager_Creative_Files setCaptionFile(String captionFile) {
    this.captionFile = captionFile;
    return this;
  }

  public void unsetCaptionFile() {
    this.captionFile = null;
  }

  /** Returns true if field captionFile is set (has been assigned a value) and false otherwise */
  public boolean isSetCaptionFile() {
    return this.captionFile != null;
  }

  public void setCaptionFileIsSet(boolean value) {
    if (!value) {
      this.captionFile = null;
    }
  }

  public String getOverlayFile() {
    return this.overlayFile;
  }

  public TDbSync_AdManager_Creative_Files setOverlayFile(String overlayFile) {
    this.overlayFile = overlayFile;
    return this;
  }

  public void unsetOverlayFile() {
    this.overlayFile = null;
  }

  /** Returns true if field overlayFile is set (has been assigned a value) and false otherwise */
  public boolean isSetOverlayFile() {
    return this.overlayFile != null;
  }

  public void setOverlayFileIsSet(boolean value) {
    if (!value) {
      this.overlayFile = null;
    }
  }

  public String getOriginalFileName() {
    return this.originalFileName;
  }

  public TDbSync_AdManager_Creative_Files setOriginalFileName(String originalFileName) {
    this.originalFileName = originalFileName;
    return this;
  }

  public void unsetOriginalFileName() {
    this.originalFileName = null;
  }

  /** Returns true if field originalFileName is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalFileName() {
    return this.originalFileName != null;
  }

  public void setOriginalFileNameIsSet(boolean value) {
    if (!value) {
      this.originalFileName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CREATIVE_ID:
      if (value == null) {
        unsetCreativeID();
      } else {
        setCreativeID((Integer)value);
      }
      break;

    case SEQUENCE:
      if (value == null) {
        unsetSequence();
      } else {
        setSequence((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((Integer)value);
      }
      break;

    case MEDIA_FILE_URL:
      if (value == null) {
        unsetMediaFileUrl();
      } else {
        setMediaFileUrl((String)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((Integer)value);
      }
      break;

    case TRANSPARENCY:
      if (value == null) {
        unsetTransparency();
      } else {
        setTransparency((Integer)value);
      }
      break;

    case CAPTION_FILE:
      if (value == null) {
        unsetCaptionFile();
      } else {
        setCaptionFile((String)value);
      }
      break;

    case OVERLAY_FILE:
      if (value == null) {
        unsetOverlayFile();
      } else {
        setOverlayFile((String)value);
      }
      break;

    case ORIGINAL_FILE_NAME:
      if (value == null) {
        unsetOriginalFileName();
      } else {
        setOriginalFileName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CREATIVE_ID:
      return Integer.valueOf(getCreativeID());

    case SEQUENCE:
      return Integer.valueOf(getSequence());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case FILE_TYPE:
      return Integer.valueOf(getFileType());

    case MEDIA_FILE_URL:
      return getMediaFileUrl();

    case CONTENT_TYPE:
      return Integer.valueOf(getContentType());

    case TRANSPARENCY:
      return Integer.valueOf(getTransparency());

    case CAPTION_FILE:
      return getCaptionFile();

    case OVERLAY_FILE:
      return getOverlayFile();

    case ORIGINAL_FILE_NAME:
      return getOriginalFileName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CREATIVE_ID:
      return isSetCreativeID();
    case SEQUENCE:
      return isSetSequence();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case FILE_TYPE:
      return isSetFileType();
    case MEDIA_FILE_URL:
      return isSetMediaFileUrl();
    case CONTENT_TYPE:
      return isSetContentType();
    case TRANSPARENCY:
      return isSetTransparency();
    case CAPTION_FILE:
      return isSetCaptionFile();
    case OVERLAY_FILE:
      return isSetOverlayFile();
    case ORIGINAL_FILE_NAME:
      return isSetOriginalFileName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_AdManager_Creative_Files)
      return this.equals((TDbSync_AdManager_Creative_Files)that);
    return false;
  }

  public boolean equals(TDbSync_AdManager_Creative_Files that) {
    if (that == null)
      return false;

    boolean this_present_creativeID = true;
    boolean that_present_creativeID = true;
    if (this_present_creativeID || that_present_creativeID) {
      if (!(this_present_creativeID && that_present_creativeID))
        return false;
      if (this.creativeID != that.creativeID)
        return false;
    }

    boolean this_present_sequence = true;
    boolean that_present_sequence = true;
    if (this_present_sequence || that_present_sequence) {
      if (!(this_present_sequence && that_present_sequence))
        return false;
      if (this.sequence != that.sequence)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_fileType = true;
    boolean that_present_fileType = true;
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (this.fileType != that.fileType)
        return false;
    }

    boolean this_present_mediaFileUrl = true && this.isSetMediaFileUrl();
    boolean that_present_mediaFileUrl = true && that.isSetMediaFileUrl();
    if (this_present_mediaFileUrl || that_present_mediaFileUrl) {
      if (!(this_present_mediaFileUrl && that_present_mediaFileUrl))
        return false;
      if (!this.mediaFileUrl.equals(that.mediaFileUrl))
        return false;
    }

    boolean this_present_contentType = true;
    boolean that_present_contentType = true;
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (this.contentType != that.contentType)
        return false;
    }

    boolean this_present_transparency = true;
    boolean that_present_transparency = true;
    if (this_present_transparency || that_present_transparency) {
      if (!(this_present_transparency && that_present_transparency))
        return false;
      if (this.transparency != that.transparency)
        return false;
    }

    boolean this_present_captionFile = true && this.isSetCaptionFile();
    boolean that_present_captionFile = true && that.isSetCaptionFile();
    if (this_present_captionFile || that_present_captionFile) {
      if (!(this_present_captionFile && that_present_captionFile))
        return false;
      if (!this.captionFile.equals(that.captionFile))
        return false;
    }

    boolean this_present_overlayFile = true && this.isSetOverlayFile();
    boolean that_present_overlayFile = true && that.isSetOverlayFile();
    if (this_present_overlayFile || that_present_overlayFile) {
      if (!(this_present_overlayFile && that_present_overlayFile))
        return false;
      if (!this.overlayFile.equals(that.overlayFile))
        return false;
    }

    boolean this_present_originalFileName = true && this.isSetOriginalFileName();
    boolean that_present_originalFileName = true && that.isSetOriginalFileName();
    if (this_present_originalFileName || that_present_originalFileName) {
      if (!(this_present_originalFileName && that_present_originalFileName))
        return false;
      if (!this.originalFileName.equals(that.originalFileName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_AdManager_Creative_Files other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCreativeID()).compareTo(other.isSetCreativeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreativeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creativeID, other.creativeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequence()).compareTo(other.isSetSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence, other.sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaFileUrl()).compareTo(other.isSetMediaFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaFileUrl, other.mediaFileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, other.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransparency()).compareTo(other.isSetTransparency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransparency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transparency, other.transparency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaptionFile()).compareTo(other.isSetCaptionFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaptionFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.captionFile, other.captionFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverlayFile()).compareTo(other.isSetOverlayFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverlayFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overlayFile, other.overlayFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalFileName()).compareTo(other.isSetOriginalFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalFileName, other.originalFileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_AdManager_Creative_Files(");
    boolean first = true;

    sb.append("creativeID:");
    sb.append(this.creativeID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequence:");
    sb.append(this.sequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    sb.append(this.fileType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaFileUrl:");
    if (this.mediaFileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.mediaFileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentType:");
    sb.append(this.contentType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transparency:");
    sb.append(this.transparency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("captionFile:");
    if (this.captionFile == null) {
      sb.append("null");
    } else {
      sb.append(this.captionFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overlayFile:");
    if (this.overlayFile == null) {
      sb.append("null");
    } else {
      sb.append(this.overlayFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalFileName:");
    if (this.originalFileName == null) {
      sb.append("null");
    } else {
      sb.append(this.originalFileName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'creativeID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sequence' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'fileType' because it's a primitive and you chose the non-beans generator.
    if (mediaFileUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaFileUrl' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'contentType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'transparency' because it's a primitive and you chose the non-beans generator.
    if (captionFile == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'captionFile' was not present! Struct: " + toString());
    }
    if (overlayFile == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'overlayFile' was not present! Struct: " + toString());
    }
    if (originalFileName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'originalFileName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_AdManager_Creative_FilesStandardSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Creative_FilesStandardScheme getScheme() {
      return new TDbSync_AdManager_Creative_FilesStandardScheme();
    }
  }

  private static class TDbSync_AdManager_Creative_FilesStandardScheme extends StandardScheme<TDbSync_AdManager_Creative_Files> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_AdManager_Creative_Files struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CREATIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creativeID = iprot.readI32();
              struct.setCreativeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequence = iprot.readI32();
              struct.setSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileType = iprot.readI32();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEDIA_FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaFileUrl = iprot.readString();
              struct.setMediaFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contentType = iprot.readI32();
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRANSPARENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transparency = iprot.readI32();
              struct.setTransparencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CAPTION_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.captionFile = iprot.readString();
              struct.setCaptionFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OVERLAY_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.overlayFile = iprot.readString();
              struct.setOverlayFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORIGINAL_FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalFileName = iprot.readString();
              struct.setOriginalFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCreativeID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'creativeID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSequence()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequence' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFileType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetContentType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTransparency()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transparency' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_AdManager_Creative_Files struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CREATIVE_ID_FIELD_DESC);
      oprot.writeI32(struct.creativeID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEQUENCE_FIELD_DESC);
      oprot.writeI32(struct.sequence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.fileType);
      oprot.writeFieldEnd();
      if (struct.mediaFileUrl != null) {
        oprot.writeFieldBegin(MEDIA_FILE_URL_FIELD_DESC);
        oprot.writeString(struct.mediaFileUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.contentType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANSPARENCY_FIELD_DESC);
      oprot.writeI32(struct.transparency);
      oprot.writeFieldEnd();
      if (struct.captionFile != null) {
        oprot.writeFieldBegin(CAPTION_FILE_FIELD_DESC);
        oprot.writeString(struct.captionFile);
        oprot.writeFieldEnd();
      }
      if (struct.overlayFile != null) {
        oprot.writeFieldBegin(OVERLAY_FILE_FIELD_DESC);
        oprot.writeString(struct.overlayFile);
        oprot.writeFieldEnd();
      }
      if (struct.originalFileName != null) {
        oprot.writeFieldBegin(ORIGINAL_FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.originalFileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_AdManager_Creative_FilesTupleSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Creative_FilesTupleScheme getScheme() {
      return new TDbSync_AdManager_Creative_FilesTupleScheme();
    }
  }

  private static class TDbSync_AdManager_Creative_FilesTupleScheme extends TupleScheme<TDbSync_AdManager_Creative_Files> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Creative_Files struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.creativeID);
      oprot.writeI32(struct.sequence);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeI32(struct.fileType);
      oprot.writeString(struct.mediaFileUrl);
      oprot.writeI32(struct.contentType);
      oprot.writeI32(struct.transparency);
      oprot.writeString(struct.captionFile);
      oprot.writeString(struct.overlayFile);
      oprot.writeString(struct.originalFileName);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Creative_Files struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.creativeID = iprot.readI32();
      struct.setCreativeIDIsSet(true);
      struct.sequence = iprot.readI32();
      struct.setSequenceIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.fileType = iprot.readI32();
      struct.setFileTypeIsSet(true);
      struct.mediaFileUrl = iprot.readString();
      struct.setMediaFileUrlIsSet(true);
      struct.contentType = iprot.readI32();
      struct.setContentTypeIsSet(true);
      struct.transparency = iprot.readI32();
      struct.setTransparencyIsSet(true);
      struct.captionFile = iprot.readString();
      struct.setCaptionFileIsSet(true);
      struct.overlayFile = iprot.readString();
      struct.setOverlayFileIsSet(true);
      struct.originalFileName = iprot.readString();
      struct.setOriginalFileNameIsSet(true);
    }
  }

}

