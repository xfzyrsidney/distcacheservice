/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.admanager;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_AdManager_Media_Buy_Creative implements org.apache.thrift.TBase<TDbSync_AdManager_Media_Buy_Creative, TDbSync_AdManager_Media_Buy_Creative._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_AdManager_Media_Buy_Creative> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_AdManager_Media_Buy_Creative");

  private static final org.apache.thrift.protocol.TField MEDIA_BUY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaBuyID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CREATIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creativeID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("budget", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField VP_IMP_PLAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("vpImpPlayTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField VP_HIDE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("vpHideMode", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField VP_STOP_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("vpStopMode", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField VP_MSG_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("vpMsgConfig", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField VP_PLAYER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("vpPlayerURL", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField VP_SKIN_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("vpSkinStyle", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField VP_CARRIER_FIELD_DESC = new org.apache.thrift.protocol.TField("vpCarrier", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField VP_FLY_IN_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("vpFlyInStyle", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField VP_INIT_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("vpInitVolume", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField VP_PLAY_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("vpPlayTimes", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField VP_EXPAND_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("vpExpandStyle", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField LOCATION_X_FIELD_DESC = new org.apache.thrift.protocol.TField("locationX", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField LOCATION_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("locationY", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField ADV_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("advFeature", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField RB_CREATIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rbCreativeID", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField DOCK_LOCATION_X_FIELD_DESC = new org.apache.thrift.protocol.TField("dockLocationX", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField DOCK_LOACTION_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("dockLoactionY", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField AUTO_DOCK_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("autoDockConfig", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField COUNT_FOR_AUTO_FIELD_DESC = new org.apache.thrift.protocol.TField("countForAuto", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField COUNT_FOR_EXPAND_FIELD_DESC = new org.apache.thrift.protocol.TField("countForExpand", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField COUNT_FOR_MUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("countForMute", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField PERCENTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("percentage", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField MAIN_URL_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("mainUrlMapping", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField VP_INIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("vpInitStatus", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField FRAMEWORK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("frameworkID", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField TRACKING_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("trackingURL", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField APPEND_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appendMode", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField Z_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("zIndex", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField VP_DA_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("vpDaTime", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField VP_HE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("vpHeTime", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField TRACKING_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("trackingParam", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField TRANSPARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("transparent", org.apache.thrift.protocol.TType.I32, (short)40);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_AdManager_Media_Buy_CreativeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_AdManager_Media_Buy_CreativeTupleSchemeFactory());
  }

  public int mediaBuyID; // required
  public int creativeID; // required
  public int status; // required
  public String lastChanged; // required
  public long budget; // required
  public long balance; // required
  public int sequence; // required
  public String vpImpPlayTime; // required
  public int vpHideMode; // required
  public int vpStopMode; // required
  public String vpMsgConfig; // required
  public String vpPlayerURL; // required
  public int vpSkinStyle; // required
  public int vpCarrier; // required
  public int vpFlyInStyle; // required
  public int vpInitVolume; // required
  public int vpPlayTimes; // required
  public int vpExpandStyle; // required
  public int locationX; // required
  public int locationY; // required
  public long advFeature; // required
  public int rbCreativeID; // required
  public int dockLocationX; // required
  public int dockLoactionY; // required
  public String autoDockConfig; // required
  public int countForAuto; // required
  public int countForExpand; // required
  public int countForMute; // required
  public int weight; // required
  public int percentage; // required
  public String mainUrlMapping; // required
  public int vpInitStatus; // required
  public int frameworkID; // required
  public String trackingURL; // required
  public int appendMode; // required
  public int zIndex; // required
  public int vpDaTime; // required
  public int vpHeTime; // required
  public String trackingParam; // required
  public int transparent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEDIA_BUY_ID((short)1, "mediaBuyID"),
    CREATIVE_ID((short)2, "creativeID"),
    STATUS((short)3, "status"),
    LAST_CHANGED((short)4, "lastChanged"),
    BUDGET((short)5, "budget"),
    BALANCE((short)6, "balance"),
    SEQUENCE((short)7, "sequence"),
    VP_IMP_PLAY_TIME((short)8, "vpImpPlayTime"),
    VP_HIDE_MODE((short)9, "vpHideMode"),
    VP_STOP_MODE((short)10, "vpStopMode"),
    VP_MSG_CONFIG((short)11, "vpMsgConfig"),
    VP_PLAYER_URL((short)12, "vpPlayerURL"),
    VP_SKIN_STYLE((short)13, "vpSkinStyle"),
    VP_CARRIER((short)14, "vpCarrier"),
    VP_FLY_IN_STYLE((short)15, "vpFlyInStyle"),
    VP_INIT_VOLUME((short)16, "vpInitVolume"),
    VP_PLAY_TIMES((short)17, "vpPlayTimes"),
    VP_EXPAND_STYLE((short)18, "vpExpandStyle"),
    LOCATION_X((short)19, "locationX"),
    LOCATION_Y((short)20, "locationY"),
    ADV_FEATURE((short)21, "advFeature"),
    RB_CREATIVE_ID((short)22, "rbCreativeID"),
    DOCK_LOCATION_X((short)23, "dockLocationX"),
    DOCK_LOACTION_Y((short)24, "dockLoactionY"),
    AUTO_DOCK_CONFIG((short)25, "autoDockConfig"),
    COUNT_FOR_AUTO((short)26, "countForAuto"),
    COUNT_FOR_EXPAND((short)27, "countForExpand"),
    COUNT_FOR_MUTE((short)28, "countForMute"),
    WEIGHT((short)29, "weight"),
    PERCENTAGE((short)30, "percentage"),
    MAIN_URL_MAPPING((short)31, "mainUrlMapping"),
    VP_INIT_STATUS((short)32, "vpInitStatus"),
    FRAMEWORK_ID((short)33, "frameworkID"),
    TRACKING_URL((short)34, "trackingURL"),
    APPEND_MODE((short)35, "appendMode"),
    Z_INDEX((short)36, "zIndex"),
    VP_DA_TIME((short)37, "vpDaTime"),
    VP_HE_TIME((short)38, "vpHeTime"),
    TRACKING_PARAM((short)39, "trackingParam"),
    TRANSPARENT((short)40, "transparent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEDIA_BUY_ID
          return MEDIA_BUY_ID;
        case 2: // CREATIVE_ID
          return CREATIVE_ID;
        case 3: // STATUS
          return STATUS;
        case 4: // LAST_CHANGED
          return LAST_CHANGED;
        case 5: // BUDGET
          return BUDGET;
        case 6: // BALANCE
          return BALANCE;
        case 7: // SEQUENCE
          return SEQUENCE;
        case 8: // VP_IMP_PLAY_TIME
          return VP_IMP_PLAY_TIME;
        case 9: // VP_HIDE_MODE
          return VP_HIDE_MODE;
        case 10: // VP_STOP_MODE
          return VP_STOP_MODE;
        case 11: // VP_MSG_CONFIG
          return VP_MSG_CONFIG;
        case 12: // VP_PLAYER_URL
          return VP_PLAYER_URL;
        case 13: // VP_SKIN_STYLE
          return VP_SKIN_STYLE;
        case 14: // VP_CARRIER
          return VP_CARRIER;
        case 15: // VP_FLY_IN_STYLE
          return VP_FLY_IN_STYLE;
        case 16: // VP_INIT_VOLUME
          return VP_INIT_VOLUME;
        case 17: // VP_PLAY_TIMES
          return VP_PLAY_TIMES;
        case 18: // VP_EXPAND_STYLE
          return VP_EXPAND_STYLE;
        case 19: // LOCATION_X
          return LOCATION_X;
        case 20: // LOCATION_Y
          return LOCATION_Y;
        case 21: // ADV_FEATURE
          return ADV_FEATURE;
        case 22: // RB_CREATIVE_ID
          return RB_CREATIVE_ID;
        case 23: // DOCK_LOCATION_X
          return DOCK_LOCATION_X;
        case 24: // DOCK_LOACTION_Y
          return DOCK_LOACTION_Y;
        case 25: // AUTO_DOCK_CONFIG
          return AUTO_DOCK_CONFIG;
        case 26: // COUNT_FOR_AUTO
          return COUNT_FOR_AUTO;
        case 27: // COUNT_FOR_EXPAND
          return COUNT_FOR_EXPAND;
        case 28: // COUNT_FOR_MUTE
          return COUNT_FOR_MUTE;
        case 29: // WEIGHT
          return WEIGHT;
        case 30: // PERCENTAGE
          return PERCENTAGE;
        case 31: // MAIN_URL_MAPPING
          return MAIN_URL_MAPPING;
        case 32: // VP_INIT_STATUS
          return VP_INIT_STATUS;
        case 33: // FRAMEWORK_ID
          return FRAMEWORK_ID;
        case 34: // TRACKING_URL
          return TRACKING_URL;
        case 35: // APPEND_MODE
          return APPEND_MODE;
        case 36: // Z_INDEX
          return Z_INDEX;
        case 37: // VP_DA_TIME
          return VP_DA_TIME;
        case 38: // VP_HE_TIME
          return VP_HE_TIME;
        case 39: // TRACKING_PARAM
          return TRACKING_PARAM;
        case 40: // TRANSPARENT
          return TRANSPARENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEDIABUYID_ISSET_ID = 0;
  private static final int __CREATIVEID_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __BUDGET_ISSET_ID = 3;
  private static final int __BALANCE_ISSET_ID = 4;
  private static final int __SEQUENCE_ISSET_ID = 5;
  private static final int __VPHIDEMODE_ISSET_ID = 6;
  private static final int __VPSTOPMODE_ISSET_ID = 7;
  private static final int __VPSKINSTYLE_ISSET_ID = 8;
  private static final int __VPCARRIER_ISSET_ID = 9;
  private static final int __VPFLYINSTYLE_ISSET_ID = 10;
  private static final int __VPINITVOLUME_ISSET_ID = 11;
  private static final int __VPPLAYTIMES_ISSET_ID = 12;
  private static final int __VPEXPANDSTYLE_ISSET_ID = 13;
  private static final int __LOCATIONX_ISSET_ID = 14;
  private static final int __LOCATIONY_ISSET_ID = 15;
  private static final int __ADVFEATURE_ISSET_ID = 16;
  private static final int __RBCREATIVEID_ISSET_ID = 17;
  private static final int __DOCKLOCATIONX_ISSET_ID = 18;
  private static final int __DOCKLOACTIONY_ISSET_ID = 19;
  private static final int __COUNTFORAUTO_ISSET_ID = 20;
  private static final int __COUNTFOREXPAND_ISSET_ID = 21;
  private static final int __COUNTFORMUTE_ISSET_ID = 22;
  private static final int __WEIGHT_ISSET_ID = 23;
  private static final int __PERCENTAGE_ISSET_ID = 24;
  private static final int __VPINITSTATUS_ISSET_ID = 25;
  private static final int __FRAMEWORKID_ISSET_ID = 26;
  private static final int __APPENDMODE_ISSET_ID = 27;
  private static final int __ZINDEX_ISSET_ID = 28;
  private static final int __VPDATIME_ISSET_ID = 29;
  private static final int __VPHETIME_ISSET_ID = 30;
  private static final int __TRANSPARENT_ISSET_ID = 31;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEDIA_BUY_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaBuyID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("creativeID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUDGET, new org.apache.thrift.meta_data.FieldMetaData("budget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("sequence", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VP_IMP_PLAY_TIME, new org.apache.thrift.meta_data.FieldMetaData("vpImpPlayTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VP_HIDE_MODE, new org.apache.thrift.meta_data.FieldMetaData("vpHideMode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VP_STOP_MODE, new org.apache.thrift.meta_data.FieldMetaData("vpStopMode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VP_MSG_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("vpMsgConfig", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VP_PLAYER_URL, new org.apache.thrift.meta_data.FieldMetaData("vpPlayerURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VP_SKIN_STYLE, new org.apache.thrift.meta_data.FieldMetaData("vpSkinStyle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VP_CARRIER, new org.apache.thrift.meta_data.FieldMetaData("vpCarrier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VP_FLY_IN_STYLE, new org.apache.thrift.meta_data.FieldMetaData("vpFlyInStyle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VP_INIT_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("vpInitVolume", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VP_PLAY_TIMES, new org.apache.thrift.meta_data.FieldMetaData("vpPlayTimes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VP_EXPAND_STYLE, new org.apache.thrift.meta_data.FieldMetaData("vpExpandStyle", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION_X, new org.apache.thrift.meta_data.FieldMetaData("locationX", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION_Y, new org.apache.thrift.meta_data.FieldMetaData("locationY", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADV_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("advFeature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RB_CREATIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("rbCreativeID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOCK_LOCATION_X, new org.apache.thrift.meta_data.FieldMetaData("dockLocationX", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOCK_LOACTION_Y, new org.apache.thrift.meta_data.FieldMetaData("dockLoactionY", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTO_DOCK_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("autoDockConfig", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT_FOR_AUTO, new org.apache.thrift.meta_data.FieldMetaData("countForAuto", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT_FOR_EXPAND, new org.apache.thrift.meta_data.FieldMetaData("countForExpand", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT_FOR_MUTE, new org.apache.thrift.meta_data.FieldMetaData("countForMute", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PERCENTAGE, new org.apache.thrift.meta_data.FieldMetaData("percentage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAIN_URL_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("mainUrlMapping", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VP_INIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("vpInitStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAMEWORK_ID, new org.apache.thrift.meta_data.FieldMetaData("frameworkID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRACKING_URL, new org.apache.thrift.meta_data.FieldMetaData("trackingURL", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPEND_MODE, new org.apache.thrift.meta_data.FieldMetaData("appendMode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.Z_INDEX, new org.apache.thrift.meta_data.FieldMetaData("zIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VP_DA_TIME, new org.apache.thrift.meta_data.FieldMetaData("vpDaTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VP_HE_TIME, new org.apache.thrift.meta_data.FieldMetaData("vpHeTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRACKING_PARAM, new org.apache.thrift.meta_data.FieldMetaData("trackingParam", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSPARENT, new org.apache.thrift.meta_data.FieldMetaData("transparent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_AdManager_Media_Buy_Creative.class, metaDataMap);
  }

  public TDbSync_AdManager_Media_Buy_Creative() {
  }

  public TDbSync_AdManager_Media_Buy_Creative(
    int mediaBuyID,
    int creativeID,
    int status,
    String lastChanged,
    long budget,
    long balance,
    int sequence,
    String vpImpPlayTime,
    int vpHideMode,
    int vpStopMode,
    String vpMsgConfig,
    String vpPlayerURL,
    int vpSkinStyle,
    int vpCarrier,
    int vpFlyInStyle,
    int vpInitVolume,
    int vpPlayTimes,
    int vpExpandStyle,
    int locationX,
    int locationY,
    long advFeature,
    int rbCreativeID,
    int dockLocationX,
    int dockLoactionY,
    String autoDockConfig,
    int countForAuto,
    int countForExpand,
    int countForMute,
    int weight,
    int percentage,
    String mainUrlMapping,
    int vpInitStatus,
    int frameworkID,
    String trackingURL,
    int appendMode,
    int zIndex,
    int vpDaTime,
    int vpHeTime,
    String trackingParam,
    int transparent)
  {
    this();
    this.mediaBuyID = mediaBuyID;
    setMediaBuyIDIsSet(true);
    this.creativeID = creativeID;
    setCreativeIDIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.budget = budget;
    setBudgetIsSet(true);
    this.balance = balance;
    setBalanceIsSet(true);
    this.sequence = sequence;
    setSequenceIsSet(true);
    this.vpImpPlayTime = vpImpPlayTime;
    this.vpHideMode = vpHideMode;
    setVpHideModeIsSet(true);
    this.vpStopMode = vpStopMode;
    setVpStopModeIsSet(true);
    this.vpMsgConfig = vpMsgConfig;
    this.vpPlayerURL = vpPlayerURL;
    this.vpSkinStyle = vpSkinStyle;
    setVpSkinStyleIsSet(true);
    this.vpCarrier = vpCarrier;
    setVpCarrierIsSet(true);
    this.vpFlyInStyle = vpFlyInStyle;
    setVpFlyInStyleIsSet(true);
    this.vpInitVolume = vpInitVolume;
    setVpInitVolumeIsSet(true);
    this.vpPlayTimes = vpPlayTimes;
    setVpPlayTimesIsSet(true);
    this.vpExpandStyle = vpExpandStyle;
    setVpExpandStyleIsSet(true);
    this.locationX = locationX;
    setLocationXIsSet(true);
    this.locationY = locationY;
    setLocationYIsSet(true);
    this.advFeature = advFeature;
    setAdvFeatureIsSet(true);
    this.rbCreativeID = rbCreativeID;
    setRbCreativeIDIsSet(true);
    this.dockLocationX = dockLocationX;
    setDockLocationXIsSet(true);
    this.dockLoactionY = dockLoactionY;
    setDockLoactionYIsSet(true);
    this.autoDockConfig = autoDockConfig;
    this.countForAuto = countForAuto;
    setCountForAutoIsSet(true);
    this.countForExpand = countForExpand;
    setCountForExpandIsSet(true);
    this.countForMute = countForMute;
    setCountForMuteIsSet(true);
    this.weight = weight;
    setWeightIsSet(true);
    this.percentage = percentage;
    setPercentageIsSet(true);
    this.mainUrlMapping = mainUrlMapping;
    this.vpInitStatus = vpInitStatus;
    setVpInitStatusIsSet(true);
    this.frameworkID = frameworkID;
    setFrameworkIDIsSet(true);
    this.trackingURL = trackingURL;
    this.appendMode = appendMode;
    setAppendModeIsSet(true);
    this.zIndex = zIndex;
    setZIndexIsSet(true);
    this.vpDaTime = vpDaTime;
    setVpDaTimeIsSet(true);
    this.vpHeTime = vpHeTime;
    setVpHeTimeIsSet(true);
    this.trackingParam = trackingParam;
    this.transparent = transparent;
    setTransparentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_AdManager_Media_Buy_Creative(TDbSync_AdManager_Media_Buy_Creative other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mediaBuyID = other.mediaBuyID;
    this.creativeID = other.creativeID;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    this.budget = other.budget;
    this.balance = other.balance;
    this.sequence = other.sequence;
    if (other.isSetVpImpPlayTime()) {
      this.vpImpPlayTime = other.vpImpPlayTime;
    }
    this.vpHideMode = other.vpHideMode;
    this.vpStopMode = other.vpStopMode;
    if (other.isSetVpMsgConfig()) {
      this.vpMsgConfig = other.vpMsgConfig;
    }
    if (other.isSetVpPlayerURL()) {
      this.vpPlayerURL = other.vpPlayerURL;
    }
    this.vpSkinStyle = other.vpSkinStyle;
    this.vpCarrier = other.vpCarrier;
    this.vpFlyInStyle = other.vpFlyInStyle;
    this.vpInitVolume = other.vpInitVolume;
    this.vpPlayTimes = other.vpPlayTimes;
    this.vpExpandStyle = other.vpExpandStyle;
    this.locationX = other.locationX;
    this.locationY = other.locationY;
    this.advFeature = other.advFeature;
    this.rbCreativeID = other.rbCreativeID;
    this.dockLocationX = other.dockLocationX;
    this.dockLoactionY = other.dockLoactionY;
    if (other.isSetAutoDockConfig()) {
      this.autoDockConfig = other.autoDockConfig;
    }
    this.countForAuto = other.countForAuto;
    this.countForExpand = other.countForExpand;
    this.countForMute = other.countForMute;
    this.weight = other.weight;
    this.percentage = other.percentage;
    if (other.isSetMainUrlMapping()) {
      this.mainUrlMapping = other.mainUrlMapping;
    }
    this.vpInitStatus = other.vpInitStatus;
    this.frameworkID = other.frameworkID;
    if (other.isSetTrackingURL()) {
      this.trackingURL = other.trackingURL;
    }
    this.appendMode = other.appendMode;
    this.zIndex = other.zIndex;
    this.vpDaTime = other.vpDaTime;
    this.vpHeTime = other.vpHeTime;
    if (other.isSetTrackingParam()) {
      this.trackingParam = other.trackingParam;
    }
    this.transparent = other.transparent;
  }

  public TDbSync_AdManager_Media_Buy_Creative deepCopy() {
    return new TDbSync_AdManager_Media_Buy_Creative(this);
  }

  @Override
  public void clear() {
    setMediaBuyIDIsSet(false);
    this.mediaBuyID = 0;
    setCreativeIDIsSet(false);
    this.creativeID = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    setBudgetIsSet(false);
    this.budget = 0;
    setBalanceIsSet(false);
    this.balance = 0;
    setSequenceIsSet(false);
    this.sequence = 0;
    this.vpImpPlayTime = null;
    setVpHideModeIsSet(false);
    this.vpHideMode = 0;
    setVpStopModeIsSet(false);
    this.vpStopMode = 0;
    this.vpMsgConfig = null;
    this.vpPlayerURL = null;
    setVpSkinStyleIsSet(false);
    this.vpSkinStyle = 0;
    setVpCarrierIsSet(false);
    this.vpCarrier = 0;
    setVpFlyInStyleIsSet(false);
    this.vpFlyInStyle = 0;
    setVpInitVolumeIsSet(false);
    this.vpInitVolume = 0;
    setVpPlayTimesIsSet(false);
    this.vpPlayTimes = 0;
    setVpExpandStyleIsSet(false);
    this.vpExpandStyle = 0;
    setLocationXIsSet(false);
    this.locationX = 0;
    setLocationYIsSet(false);
    this.locationY = 0;
    setAdvFeatureIsSet(false);
    this.advFeature = 0;
    setRbCreativeIDIsSet(false);
    this.rbCreativeID = 0;
    setDockLocationXIsSet(false);
    this.dockLocationX = 0;
    setDockLoactionYIsSet(false);
    this.dockLoactionY = 0;
    this.autoDockConfig = null;
    setCountForAutoIsSet(false);
    this.countForAuto = 0;
    setCountForExpandIsSet(false);
    this.countForExpand = 0;
    setCountForMuteIsSet(false);
    this.countForMute = 0;
    setWeightIsSet(false);
    this.weight = 0;
    setPercentageIsSet(false);
    this.percentage = 0;
    this.mainUrlMapping = null;
    setVpInitStatusIsSet(false);
    this.vpInitStatus = 0;
    setFrameworkIDIsSet(false);
    this.frameworkID = 0;
    this.trackingURL = null;
    setAppendModeIsSet(false);
    this.appendMode = 0;
    setZIndexIsSet(false);
    this.zIndex = 0;
    setVpDaTimeIsSet(false);
    this.vpDaTime = 0;
    setVpHeTimeIsSet(false);
    this.vpHeTime = 0;
    this.trackingParam = null;
    setTransparentIsSet(false);
    this.transparent = 0;
  }

  public int getMediaBuyID() {
    return this.mediaBuyID;
  }

  public TDbSync_AdManager_Media_Buy_Creative setMediaBuyID(int mediaBuyID) {
    this.mediaBuyID = mediaBuyID;
    setMediaBuyIDIsSet(true);
    return this;
  }

  public void unsetMediaBuyID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIABUYID_ISSET_ID);
  }

  /** Returns true if field mediaBuyID is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaBuyID() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIABUYID_ISSET_ID);
  }

  public void setMediaBuyIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIABUYID_ISSET_ID, value);
  }

  public int getCreativeID() {
    return this.creativeID;
  }

  public TDbSync_AdManager_Media_Buy_Creative setCreativeID(int creativeID) {
    this.creativeID = creativeID;
    setCreativeIDIsSet(true);
    return this;
  }

  public void unsetCreativeID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIVEID_ISSET_ID);
  }

  /** Returns true if field creativeID is set (has been assigned a value) and false otherwise */
  public boolean isSetCreativeID() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIVEID_ISSET_ID);
  }

  public void setCreativeIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIVEID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_AdManager_Media_Buy_Creative setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_AdManager_Media_Buy_Creative setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public long getBudget() {
    return this.budget;
  }

  public TDbSync_AdManager_Media_Buy_Creative setBudget(long budget) {
    this.budget = budget;
    setBudgetIsSet(true);
    return this;
  }

  public void unsetBudget() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUDGET_ISSET_ID);
  }

  /** Returns true if field budget is set (has been assigned a value) and false otherwise */
  public boolean isSetBudget() {
    return EncodingUtils.testBit(__isset_bitfield, __BUDGET_ISSET_ID);
  }

  public void setBudgetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUDGET_ISSET_ID, value);
  }

  public long getBalance() {
    return this.balance;
  }

  public TDbSync_AdManager_Media_Buy_Creative setBalance(long balance) {
    this.balance = balance;
    setBalanceIsSet(true);
    return this;
  }

  public void unsetBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  public void setBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
  }

  public int getSequence() {
    return this.sequence;
  }

  public TDbSync_AdManager_Media_Buy_Creative setSequence(int sequence) {
    this.sequence = sequence;
    setSequenceIsSet(true);
    return this;
  }

  public void unsetSequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  /** Returns true if field sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  public void setSequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCE_ISSET_ID, value);
  }

  public String getVpImpPlayTime() {
    return this.vpImpPlayTime;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpImpPlayTime(String vpImpPlayTime) {
    this.vpImpPlayTime = vpImpPlayTime;
    return this;
  }

  public void unsetVpImpPlayTime() {
    this.vpImpPlayTime = null;
  }

  /** Returns true if field vpImpPlayTime is set (has been assigned a value) and false otherwise */
  public boolean isSetVpImpPlayTime() {
    return this.vpImpPlayTime != null;
  }

  public void setVpImpPlayTimeIsSet(boolean value) {
    if (!value) {
      this.vpImpPlayTime = null;
    }
  }

  public int getVpHideMode() {
    return this.vpHideMode;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpHideMode(int vpHideMode) {
    this.vpHideMode = vpHideMode;
    setVpHideModeIsSet(true);
    return this;
  }

  public void unsetVpHideMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPHIDEMODE_ISSET_ID);
  }

  /** Returns true if field vpHideMode is set (has been assigned a value) and false otherwise */
  public boolean isSetVpHideMode() {
    return EncodingUtils.testBit(__isset_bitfield, __VPHIDEMODE_ISSET_ID);
  }

  public void setVpHideModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPHIDEMODE_ISSET_ID, value);
  }

  public int getVpStopMode() {
    return this.vpStopMode;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpStopMode(int vpStopMode) {
    this.vpStopMode = vpStopMode;
    setVpStopModeIsSet(true);
    return this;
  }

  public void unsetVpStopMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPSTOPMODE_ISSET_ID);
  }

  /** Returns true if field vpStopMode is set (has been assigned a value) and false otherwise */
  public boolean isSetVpStopMode() {
    return EncodingUtils.testBit(__isset_bitfield, __VPSTOPMODE_ISSET_ID);
  }

  public void setVpStopModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPSTOPMODE_ISSET_ID, value);
  }

  public String getVpMsgConfig() {
    return this.vpMsgConfig;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpMsgConfig(String vpMsgConfig) {
    this.vpMsgConfig = vpMsgConfig;
    return this;
  }

  public void unsetVpMsgConfig() {
    this.vpMsgConfig = null;
  }

  /** Returns true if field vpMsgConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetVpMsgConfig() {
    return this.vpMsgConfig != null;
  }

  public void setVpMsgConfigIsSet(boolean value) {
    if (!value) {
      this.vpMsgConfig = null;
    }
  }

  public String getVpPlayerURL() {
    return this.vpPlayerURL;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpPlayerURL(String vpPlayerURL) {
    this.vpPlayerURL = vpPlayerURL;
    return this;
  }

  public void unsetVpPlayerURL() {
    this.vpPlayerURL = null;
  }

  /** Returns true if field vpPlayerURL is set (has been assigned a value) and false otherwise */
  public boolean isSetVpPlayerURL() {
    return this.vpPlayerURL != null;
  }

  public void setVpPlayerURLIsSet(boolean value) {
    if (!value) {
      this.vpPlayerURL = null;
    }
  }

  public int getVpSkinStyle() {
    return this.vpSkinStyle;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpSkinStyle(int vpSkinStyle) {
    this.vpSkinStyle = vpSkinStyle;
    setVpSkinStyleIsSet(true);
    return this;
  }

  public void unsetVpSkinStyle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPSKINSTYLE_ISSET_ID);
  }

  /** Returns true if field vpSkinStyle is set (has been assigned a value) and false otherwise */
  public boolean isSetVpSkinStyle() {
    return EncodingUtils.testBit(__isset_bitfield, __VPSKINSTYLE_ISSET_ID);
  }

  public void setVpSkinStyleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPSKINSTYLE_ISSET_ID, value);
  }

  public int getVpCarrier() {
    return this.vpCarrier;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpCarrier(int vpCarrier) {
    this.vpCarrier = vpCarrier;
    setVpCarrierIsSet(true);
    return this;
  }

  public void unsetVpCarrier() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPCARRIER_ISSET_ID);
  }

  /** Returns true if field vpCarrier is set (has been assigned a value) and false otherwise */
  public boolean isSetVpCarrier() {
    return EncodingUtils.testBit(__isset_bitfield, __VPCARRIER_ISSET_ID);
  }

  public void setVpCarrierIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPCARRIER_ISSET_ID, value);
  }

  public int getVpFlyInStyle() {
    return this.vpFlyInStyle;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpFlyInStyle(int vpFlyInStyle) {
    this.vpFlyInStyle = vpFlyInStyle;
    setVpFlyInStyleIsSet(true);
    return this;
  }

  public void unsetVpFlyInStyle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPFLYINSTYLE_ISSET_ID);
  }

  /** Returns true if field vpFlyInStyle is set (has been assigned a value) and false otherwise */
  public boolean isSetVpFlyInStyle() {
    return EncodingUtils.testBit(__isset_bitfield, __VPFLYINSTYLE_ISSET_ID);
  }

  public void setVpFlyInStyleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPFLYINSTYLE_ISSET_ID, value);
  }

  public int getVpInitVolume() {
    return this.vpInitVolume;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpInitVolume(int vpInitVolume) {
    this.vpInitVolume = vpInitVolume;
    setVpInitVolumeIsSet(true);
    return this;
  }

  public void unsetVpInitVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPINITVOLUME_ISSET_ID);
  }

  /** Returns true if field vpInitVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetVpInitVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __VPINITVOLUME_ISSET_ID);
  }

  public void setVpInitVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPINITVOLUME_ISSET_ID, value);
  }

  public int getVpPlayTimes() {
    return this.vpPlayTimes;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpPlayTimes(int vpPlayTimes) {
    this.vpPlayTimes = vpPlayTimes;
    setVpPlayTimesIsSet(true);
    return this;
  }

  public void unsetVpPlayTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPPLAYTIMES_ISSET_ID);
  }

  /** Returns true if field vpPlayTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetVpPlayTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __VPPLAYTIMES_ISSET_ID);
  }

  public void setVpPlayTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPPLAYTIMES_ISSET_ID, value);
  }

  public int getVpExpandStyle() {
    return this.vpExpandStyle;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpExpandStyle(int vpExpandStyle) {
    this.vpExpandStyle = vpExpandStyle;
    setVpExpandStyleIsSet(true);
    return this;
  }

  public void unsetVpExpandStyle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPEXPANDSTYLE_ISSET_ID);
  }

  /** Returns true if field vpExpandStyle is set (has been assigned a value) and false otherwise */
  public boolean isSetVpExpandStyle() {
    return EncodingUtils.testBit(__isset_bitfield, __VPEXPANDSTYLE_ISSET_ID);
  }

  public void setVpExpandStyleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPEXPANDSTYLE_ISSET_ID, value);
  }

  public int getLocationX() {
    return this.locationX;
  }

  public TDbSync_AdManager_Media_Buy_Creative setLocationX(int locationX) {
    this.locationX = locationX;
    setLocationXIsSet(true);
    return this;
  }

  public void unsetLocationX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCATIONX_ISSET_ID);
  }

  /** Returns true if field locationX is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationX() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCATIONX_ISSET_ID);
  }

  public void setLocationXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCATIONX_ISSET_ID, value);
  }

  public int getLocationY() {
    return this.locationY;
  }

  public TDbSync_AdManager_Media_Buy_Creative setLocationY(int locationY) {
    this.locationY = locationY;
    setLocationYIsSet(true);
    return this;
  }

  public void unsetLocationY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCATIONY_ISSET_ID);
  }

  /** Returns true if field locationY is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationY() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCATIONY_ISSET_ID);
  }

  public void setLocationYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCATIONY_ISSET_ID, value);
  }

  public long getAdvFeature() {
    return this.advFeature;
  }

  public TDbSync_AdManager_Media_Buy_Creative setAdvFeature(long advFeature) {
    this.advFeature = advFeature;
    setAdvFeatureIsSet(true);
    return this;
  }

  public void unsetAdvFeature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADVFEATURE_ISSET_ID);
  }

  /** Returns true if field advFeature is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvFeature() {
    return EncodingUtils.testBit(__isset_bitfield, __ADVFEATURE_ISSET_ID);
  }

  public void setAdvFeatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADVFEATURE_ISSET_ID, value);
  }

  public int getRbCreativeID() {
    return this.rbCreativeID;
  }

  public TDbSync_AdManager_Media_Buy_Creative setRbCreativeID(int rbCreativeID) {
    this.rbCreativeID = rbCreativeID;
    setRbCreativeIDIsSet(true);
    return this;
  }

  public void unsetRbCreativeID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RBCREATIVEID_ISSET_ID);
  }

  /** Returns true if field rbCreativeID is set (has been assigned a value) and false otherwise */
  public boolean isSetRbCreativeID() {
    return EncodingUtils.testBit(__isset_bitfield, __RBCREATIVEID_ISSET_ID);
  }

  public void setRbCreativeIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RBCREATIVEID_ISSET_ID, value);
  }

  public int getDockLocationX() {
    return this.dockLocationX;
  }

  public TDbSync_AdManager_Media_Buy_Creative setDockLocationX(int dockLocationX) {
    this.dockLocationX = dockLocationX;
    setDockLocationXIsSet(true);
    return this;
  }

  public void unsetDockLocationX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCKLOCATIONX_ISSET_ID);
  }

  /** Returns true if field dockLocationX is set (has been assigned a value) and false otherwise */
  public boolean isSetDockLocationX() {
    return EncodingUtils.testBit(__isset_bitfield, __DOCKLOCATIONX_ISSET_ID);
  }

  public void setDockLocationXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCKLOCATIONX_ISSET_ID, value);
  }

  public int getDockLoactionY() {
    return this.dockLoactionY;
  }

  public TDbSync_AdManager_Media_Buy_Creative setDockLoactionY(int dockLoactionY) {
    this.dockLoactionY = dockLoactionY;
    setDockLoactionYIsSet(true);
    return this;
  }

  public void unsetDockLoactionY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOCKLOACTIONY_ISSET_ID);
  }

  /** Returns true if field dockLoactionY is set (has been assigned a value) and false otherwise */
  public boolean isSetDockLoactionY() {
    return EncodingUtils.testBit(__isset_bitfield, __DOCKLOACTIONY_ISSET_ID);
  }

  public void setDockLoactionYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOCKLOACTIONY_ISSET_ID, value);
  }

  public String getAutoDockConfig() {
    return this.autoDockConfig;
  }

  public TDbSync_AdManager_Media_Buy_Creative setAutoDockConfig(String autoDockConfig) {
    this.autoDockConfig = autoDockConfig;
    return this;
  }

  public void unsetAutoDockConfig() {
    this.autoDockConfig = null;
  }

  /** Returns true if field autoDockConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoDockConfig() {
    return this.autoDockConfig != null;
  }

  public void setAutoDockConfigIsSet(boolean value) {
    if (!value) {
      this.autoDockConfig = null;
    }
  }

  public int getCountForAuto() {
    return this.countForAuto;
  }

  public TDbSync_AdManager_Media_Buy_Creative setCountForAuto(int countForAuto) {
    this.countForAuto = countForAuto;
    setCountForAutoIsSet(true);
    return this;
  }

  public void unsetCountForAuto() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTFORAUTO_ISSET_ID);
  }

  /** Returns true if field countForAuto is set (has been assigned a value) and false otherwise */
  public boolean isSetCountForAuto() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTFORAUTO_ISSET_ID);
  }

  public void setCountForAutoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTFORAUTO_ISSET_ID, value);
  }

  public int getCountForExpand() {
    return this.countForExpand;
  }

  public TDbSync_AdManager_Media_Buy_Creative setCountForExpand(int countForExpand) {
    this.countForExpand = countForExpand;
    setCountForExpandIsSet(true);
    return this;
  }

  public void unsetCountForExpand() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTFOREXPAND_ISSET_ID);
  }

  /** Returns true if field countForExpand is set (has been assigned a value) and false otherwise */
  public boolean isSetCountForExpand() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTFOREXPAND_ISSET_ID);
  }

  public void setCountForExpandIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTFOREXPAND_ISSET_ID, value);
  }

  public int getCountForMute() {
    return this.countForMute;
  }

  public TDbSync_AdManager_Media_Buy_Creative setCountForMute(int countForMute) {
    this.countForMute = countForMute;
    setCountForMuteIsSet(true);
    return this;
  }

  public void unsetCountForMute() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTFORMUTE_ISSET_ID);
  }

  /** Returns true if field countForMute is set (has been assigned a value) and false otherwise */
  public boolean isSetCountForMute() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTFORMUTE_ISSET_ID);
  }

  public void setCountForMuteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTFORMUTE_ISSET_ID, value);
  }

  public int getWeight() {
    return this.weight;
  }

  public TDbSync_AdManager_Media_Buy_Creative setWeight(int weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been assigned a value) and false otherwise */
  public boolean isSetWeight() {
    return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
  }

  public int getPercentage() {
    return this.percentage;
  }

  public TDbSync_AdManager_Media_Buy_Creative setPercentage(int percentage) {
    this.percentage = percentage;
    setPercentageIsSet(true);
    return this;
  }

  public void unsetPercentage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERCENTAGE_ISSET_ID);
  }

  /** Returns true if field percentage is set (has been assigned a value) and false otherwise */
  public boolean isSetPercentage() {
    return EncodingUtils.testBit(__isset_bitfield, __PERCENTAGE_ISSET_ID);
  }

  public void setPercentageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERCENTAGE_ISSET_ID, value);
  }

  public String getMainUrlMapping() {
    return this.mainUrlMapping;
  }

  public TDbSync_AdManager_Media_Buy_Creative setMainUrlMapping(String mainUrlMapping) {
    this.mainUrlMapping = mainUrlMapping;
    return this;
  }

  public void unsetMainUrlMapping() {
    this.mainUrlMapping = null;
  }

  /** Returns true if field mainUrlMapping is set (has been assigned a value) and false otherwise */
  public boolean isSetMainUrlMapping() {
    return this.mainUrlMapping != null;
  }

  public void setMainUrlMappingIsSet(boolean value) {
    if (!value) {
      this.mainUrlMapping = null;
    }
  }

  public int getVpInitStatus() {
    return this.vpInitStatus;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpInitStatus(int vpInitStatus) {
    this.vpInitStatus = vpInitStatus;
    setVpInitStatusIsSet(true);
    return this;
  }

  public void unsetVpInitStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPINITSTATUS_ISSET_ID);
  }

  /** Returns true if field vpInitStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetVpInitStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __VPINITSTATUS_ISSET_ID);
  }

  public void setVpInitStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPINITSTATUS_ISSET_ID, value);
  }

  public int getFrameworkID() {
    return this.frameworkID;
  }

  public TDbSync_AdManager_Media_Buy_Creative setFrameworkID(int frameworkID) {
    this.frameworkID = frameworkID;
    setFrameworkIDIsSet(true);
    return this;
  }

  public void unsetFrameworkID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAMEWORKID_ISSET_ID);
  }

  /** Returns true if field frameworkID is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameworkID() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAMEWORKID_ISSET_ID);
  }

  public void setFrameworkIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAMEWORKID_ISSET_ID, value);
  }

  public String getTrackingURL() {
    return this.trackingURL;
  }

  public TDbSync_AdManager_Media_Buy_Creative setTrackingURL(String trackingURL) {
    this.trackingURL = trackingURL;
    return this;
  }

  public void unsetTrackingURL() {
    this.trackingURL = null;
  }

  /** Returns true if field trackingURL is set (has been assigned a value) and false otherwise */
  public boolean isSetTrackingURL() {
    return this.trackingURL != null;
  }

  public void setTrackingURLIsSet(boolean value) {
    if (!value) {
      this.trackingURL = null;
    }
  }

  public int getAppendMode() {
    return this.appendMode;
  }

  public TDbSync_AdManager_Media_Buy_Creative setAppendMode(int appendMode) {
    this.appendMode = appendMode;
    setAppendModeIsSet(true);
    return this;
  }

  public void unsetAppendMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPENDMODE_ISSET_ID);
  }

  /** Returns true if field appendMode is set (has been assigned a value) and false otherwise */
  public boolean isSetAppendMode() {
    return EncodingUtils.testBit(__isset_bitfield, __APPENDMODE_ISSET_ID);
  }

  public void setAppendModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPENDMODE_ISSET_ID, value);
  }

  public int getZIndex() {
    return this.zIndex;
  }

  public TDbSync_AdManager_Media_Buy_Creative setZIndex(int zIndex) {
    this.zIndex = zIndex;
    setZIndexIsSet(true);
    return this;
  }

  public void unsetZIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ZINDEX_ISSET_ID);
  }

  /** Returns true if field zIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetZIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __ZINDEX_ISSET_ID);
  }

  public void setZIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ZINDEX_ISSET_ID, value);
  }

  public int getVpDaTime() {
    return this.vpDaTime;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpDaTime(int vpDaTime) {
    this.vpDaTime = vpDaTime;
    setVpDaTimeIsSet(true);
    return this;
  }

  public void unsetVpDaTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPDATIME_ISSET_ID);
  }

  /** Returns true if field vpDaTime is set (has been assigned a value) and false otherwise */
  public boolean isSetVpDaTime() {
    return EncodingUtils.testBit(__isset_bitfield, __VPDATIME_ISSET_ID);
  }

  public void setVpDaTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPDATIME_ISSET_ID, value);
  }

  public int getVpHeTime() {
    return this.vpHeTime;
  }

  public TDbSync_AdManager_Media_Buy_Creative setVpHeTime(int vpHeTime) {
    this.vpHeTime = vpHeTime;
    setVpHeTimeIsSet(true);
    return this;
  }

  public void unsetVpHeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VPHETIME_ISSET_ID);
  }

  /** Returns true if field vpHeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetVpHeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __VPHETIME_ISSET_ID);
  }

  public void setVpHeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VPHETIME_ISSET_ID, value);
  }

  public String getTrackingParam() {
    return this.trackingParam;
  }

  public TDbSync_AdManager_Media_Buy_Creative setTrackingParam(String trackingParam) {
    this.trackingParam = trackingParam;
    return this;
  }

  public void unsetTrackingParam() {
    this.trackingParam = null;
  }

  /** Returns true if field trackingParam is set (has been assigned a value) and false otherwise */
  public boolean isSetTrackingParam() {
    return this.trackingParam != null;
  }

  public void setTrackingParamIsSet(boolean value) {
    if (!value) {
      this.trackingParam = null;
    }
  }

  public int getTransparent() {
    return this.transparent;
  }

  public TDbSync_AdManager_Media_Buy_Creative setTransparent(int transparent) {
    this.transparent = transparent;
    setTransparentIsSet(true);
    return this;
  }

  public void unsetTransparent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSPARENT_ISSET_ID);
  }

  /** Returns true if field transparent is set (has been assigned a value) and false otherwise */
  public boolean isSetTransparent() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSPARENT_ISSET_ID);
  }

  public void setTransparentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSPARENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEDIA_BUY_ID:
      if (value == null) {
        unsetMediaBuyID();
      } else {
        setMediaBuyID((Integer)value);
      }
      break;

    case CREATIVE_ID:
      if (value == null) {
        unsetCreativeID();
      } else {
        setCreativeID((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case BUDGET:
      if (value == null) {
        unsetBudget();
      } else {
        setBudget((Long)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((Long)value);
      }
      break;

    case SEQUENCE:
      if (value == null) {
        unsetSequence();
      } else {
        setSequence((Integer)value);
      }
      break;

    case VP_IMP_PLAY_TIME:
      if (value == null) {
        unsetVpImpPlayTime();
      } else {
        setVpImpPlayTime((String)value);
      }
      break;

    case VP_HIDE_MODE:
      if (value == null) {
        unsetVpHideMode();
      } else {
        setVpHideMode((Integer)value);
      }
      break;

    case VP_STOP_MODE:
      if (value == null) {
        unsetVpStopMode();
      } else {
        setVpStopMode((Integer)value);
      }
      break;

    case VP_MSG_CONFIG:
      if (value == null) {
        unsetVpMsgConfig();
      } else {
        setVpMsgConfig((String)value);
      }
      break;

    case VP_PLAYER_URL:
      if (value == null) {
        unsetVpPlayerURL();
      } else {
        setVpPlayerURL((String)value);
      }
      break;

    case VP_SKIN_STYLE:
      if (value == null) {
        unsetVpSkinStyle();
      } else {
        setVpSkinStyle((Integer)value);
      }
      break;

    case VP_CARRIER:
      if (value == null) {
        unsetVpCarrier();
      } else {
        setVpCarrier((Integer)value);
      }
      break;

    case VP_FLY_IN_STYLE:
      if (value == null) {
        unsetVpFlyInStyle();
      } else {
        setVpFlyInStyle((Integer)value);
      }
      break;

    case VP_INIT_VOLUME:
      if (value == null) {
        unsetVpInitVolume();
      } else {
        setVpInitVolume((Integer)value);
      }
      break;

    case VP_PLAY_TIMES:
      if (value == null) {
        unsetVpPlayTimes();
      } else {
        setVpPlayTimes((Integer)value);
      }
      break;

    case VP_EXPAND_STYLE:
      if (value == null) {
        unsetVpExpandStyle();
      } else {
        setVpExpandStyle((Integer)value);
      }
      break;

    case LOCATION_X:
      if (value == null) {
        unsetLocationX();
      } else {
        setLocationX((Integer)value);
      }
      break;

    case LOCATION_Y:
      if (value == null) {
        unsetLocationY();
      } else {
        setLocationY((Integer)value);
      }
      break;

    case ADV_FEATURE:
      if (value == null) {
        unsetAdvFeature();
      } else {
        setAdvFeature((Long)value);
      }
      break;

    case RB_CREATIVE_ID:
      if (value == null) {
        unsetRbCreativeID();
      } else {
        setRbCreativeID((Integer)value);
      }
      break;

    case DOCK_LOCATION_X:
      if (value == null) {
        unsetDockLocationX();
      } else {
        setDockLocationX((Integer)value);
      }
      break;

    case DOCK_LOACTION_Y:
      if (value == null) {
        unsetDockLoactionY();
      } else {
        setDockLoactionY((Integer)value);
      }
      break;

    case AUTO_DOCK_CONFIG:
      if (value == null) {
        unsetAutoDockConfig();
      } else {
        setAutoDockConfig((String)value);
      }
      break;

    case COUNT_FOR_AUTO:
      if (value == null) {
        unsetCountForAuto();
      } else {
        setCountForAuto((Integer)value);
      }
      break;

    case COUNT_FOR_EXPAND:
      if (value == null) {
        unsetCountForExpand();
      } else {
        setCountForExpand((Integer)value);
      }
      break;

    case COUNT_FOR_MUTE:
      if (value == null) {
        unsetCountForMute();
      } else {
        setCountForMute((Integer)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Integer)value);
      }
      break;

    case PERCENTAGE:
      if (value == null) {
        unsetPercentage();
      } else {
        setPercentage((Integer)value);
      }
      break;

    case MAIN_URL_MAPPING:
      if (value == null) {
        unsetMainUrlMapping();
      } else {
        setMainUrlMapping((String)value);
      }
      break;

    case VP_INIT_STATUS:
      if (value == null) {
        unsetVpInitStatus();
      } else {
        setVpInitStatus((Integer)value);
      }
      break;

    case FRAMEWORK_ID:
      if (value == null) {
        unsetFrameworkID();
      } else {
        setFrameworkID((Integer)value);
      }
      break;

    case TRACKING_URL:
      if (value == null) {
        unsetTrackingURL();
      } else {
        setTrackingURL((String)value);
      }
      break;

    case APPEND_MODE:
      if (value == null) {
        unsetAppendMode();
      } else {
        setAppendMode((Integer)value);
      }
      break;

    case Z_INDEX:
      if (value == null) {
        unsetZIndex();
      } else {
        setZIndex((Integer)value);
      }
      break;

    case VP_DA_TIME:
      if (value == null) {
        unsetVpDaTime();
      } else {
        setVpDaTime((Integer)value);
      }
      break;

    case VP_HE_TIME:
      if (value == null) {
        unsetVpHeTime();
      } else {
        setVpHeTime((Integer)value);
      }
      break;

    case TRACKING_PARAM:
      if (value == null) {
        unsetTrackingParam();
      } else {
        setTrackingParam((String)value);
      }
      break;

    case TRANSPARENT:
      if (value == null) {
        unsetTransparent();
      } else {
        setTransparent((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEDIA_BUY_ID:
      return Integer.valueOf(getMediaBuyID());

    case CREATIVE_ID:
      return Integer.valueOf(getCreativeID());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case BUDGET:
      return Long.valueOf(getBudget());

    case BALANCE:
      return Long.valueOf(getBalance());

    case SEQUENCE:
      return Integer.valueOf(getSequence());

    case VP_IMP_PLAY_TIME:
      return getVpImpPlayTime();

    case VP_HIDE_MODE:
      return Integer.valueOf(getVpHideMode());

    case VP_STOP_MODE:
      return Integer.valueOf(getVpStopMode());

    case VP_MSG_CONFIG:
      return getVpMsgConfig();

    case VP_PLAYER_URL:
      return getVpPlayerURL();

    case VP_SKIN_STYLE:
      return Integer.valueOf(getVpSkinStyle());

    case VP_CARRIER:
      return Integer.valueOf(getVpCarrier());

    case VP_FLY_IN_STYLE:
      return Integer.valueOf(getVpFlyInStyle());

    case VP_INIT_VOLUME:
      return Integer.valueOf(getVpInitVolume());

    case VP_PLAY_TIMES:
      return Integer.valueOf(getVpPlayTimes());

    case VP_EXPAND_STYLE:
      return Integer.valueOf(getVpExpandStyle());

    case LOCATION_X:
      return Integer.valueOf(getLocationX());

    case LOCATION_Y:
      return Integer.valueOf(getLocationY());

    case ADV_FEATURE:
      return Long.valueOf(getAdvFeature());

    case RB_CREATIVE_ID:
      return Integer.valueOf(getRbCreativeID());

    case DOCK_LOCATION_X:
      return Integer.valueOf(getDockLocationX());

    case DOCK_LOACTION_Y:
      return Integer.valueOf(getDockLoactionY());

    case AUTO_DOCK_CONFIG:
      return getAutoDockConfig();

    case COUNT_FOR_AUTO:
      return Integer.valueOf(getCountForAuto());

    case COUNT_FOR_EXPAND:
      return Integer.valueOf(getCountForExpand());

    case COUNT_FOR_MUTE:
      return Integer.valueOf(getCountForMute());

    case WEIGHT:
      return Integer.valueOf(getWeight());

    case PERCENTAGE:
      return Integer.valueOf(getPercentage());

    case MAIN_URL_MAPPING:
      return getMainUrlMapping();

    case VP_INIT_STATUS:
      return Integer.valueOf(getVpInitStatus());

    case FRAMEWORK_ID:
      return Integer.valueOf(getFrameworkID());

    case TRACKING_URL:
      return getTrackingURL();

    case APPEND_MODE:
      return Integer.valueOf(getAppendMode());

    case Z_INDEX:
      return Integer.valueOf(getZIndex());

    case VP_DA_TIME:
      return Integer.valueOf(getVpDaTime());

    case VP_HE_TIME:
      return Integer.valueOf(getVpHeTime());

    case TRACKING_PARAM:
      return getTrackingParam();

    case TRANSPARENT:
      return Integer.valueOf(getTransparent());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEDIA_BUY_ID:
      return isSetMediaBuyID();
    case CREATIVE_ID:
      return isSetCreativeID();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case BUDGET:
      return isSetBudget();
    case BALANCE:
      return isSetBalance();
    case SEQUENCE:
      return isSetSequence();
    case VP_IMP_PLAY_TIME:
      return isSetVpImpPlayTime();
    case VP_HIDE_MODE:
      return isSetVpHideMode();
    case VP_STOP_MODE:
      return isSetVpStopMode();
    case VP_MSG_CONFIG:
      return isSetVpMsgConfig();
    case VP_PLAYER_URL:
      return isSetVpPlayerURL();
    case VP_SKIN_STYLE:
      return isSetVpSkinStyle();
    case VP_CARRIER:
      return isSetVpCarrier();
    case VP_FLY_IN_STYLE:
      return isSetVpFlyInStyle();
    case VP_INIT_VOLUME:
      return isSetVpInitVolume();
    case VP_PLAY_TIMES:
      return isSetVpPlayTimes();
    case VP_EXPAND_STYLE:
      return isSetVpExpandStyle();
    case LOCATION_X:
      return isSetLocationX();
    case LOCATION_Y:
      return isSetLocationY();
    case ADV_FEATURE:
      return isSetAdvFeature();
    case RB_CREATIVE_ID:
      return isSetRbCreativeID();
    case DOCK_LOCATION_X:
      return isSetDockLocationX();
    case DOCK_LOACTION_Y:
      return isSetDockLoactionY();
    case AUTO_DOCK_CONFIG:
      return isSetAutoDockConfig();
    case COUNT_FOR_AUTO:
      return isSetCountForAuto();
    case COUNT_FOR_EXPAND:
      return isSetCountForExpand();
    case COUNT_FOR_MUTE:
      return isSetCountForMute();
    case WEIGHT:
      return isSetWeight();
    case PERCENTAGE:
      return isSetPercentage();
    case MAIN_URL_MAPPING:
      return isSetMainUrlMapping();
    case VP_INIT_STATUS:
      return isSetVpInitStatus();
    case FRAMEWORK_ID:
      return isSetFrameworkID();
    case TRACKING_URL:
      return isSetTrackingURL();
    case APPEND_MODE:
      return isSetAppendMode();
    case Z_INDEX:
      return isSetZIndex();
    case VP_DA_TIME:
      return isSetVpDaTime();
    case VP_HE_TIME:
      return isSetVpHeTime();
    case TRACKING_PARAM:
      return isSetTrackingParam();
    case TRANSPARENT:
      return isSetTransparent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_AdManager_Media_Buy_Creative)
      return this.equals((TDbSync_AdManager_Media_Buy_Creative)that);
    return false;
  }

  public boolean equals(TDbSync_AdManager_Media_Buy_Creative that) {
    if (that == null)
      return false;

    boolean this_present_mediaBuyID = true;
    boolean that_present_mediaBuyID = true;
    if (this_present_mediaBuyID || that_present_mediaBuyID) {
      if (!(this_present_mediaBuyID && that_present_mediaBuyID))
        return false;
      if (this.mediaBuyID != that.mediaBuyID)
        return false;
    }

    boolean this_present_creativeID = true;
    boolean that_present_creativeID = true;
    if (this_present_creativeID || that_present_creativeID) {
      if (!(this_present_creativeID && that_present_creativeID))
        return false;
      if (this.creativeID != that.creativeID)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_budget = true;
    boolean that_present_budget = true;
    if (this_present_budget || that_present_budget) {
      if (!(this_present_budget && that_present_budget))
        return false;
      if (this.budget != that.budget)
        return false;
    }

    boolean this_present_balance = true;
    boolean that_present_balance = true;
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (this.balance != that.balance)
        return false;
    }

    boolean this_present_sequence = true;
    boolean that_present_sequence = true;
    if (this_present_sequence || that_present_sequence) {
      if (!(this_present_sequence && that_present_sequence))
        return false;
      if (this.sequence != that.sequence)
        return false;
    }

    boolean this_present_vpImpPlayTime = true && this.isSetVpImpPlayTime();
    boolean that_present_vpImpPlayTime = true && that.isSetVpImpPlayTime();
    if (this_present_vpImpPlayTime || that_present_vpImpPlayTime) {
      if (!(this_present_vpImpPlayTime && that_present_vpImpPlayTime))
        return false;
      if (!this.vpImpPlayTime.equals(that.vpImpPlayTime))
        return false;
    }

    boolean this_present_vpHideMode = true;
    boolean that_present_vpHideMode = true;
    if (this_present_vpHideMode || that_present_vpHideMode) {
      if (!(this_present_vpHideMode && that_present_vpHideMode))
        return false;
      if (this.vpHideMode != that.vpHideMode)
        return false;
    }

    boolean this_present_vpStopMode = true;
    boolean that_present_vpStopMode = true;
    if (this_present_vpStopMode || that_present_vpStopMode) {
      if (!(this_present_vpStopMode && that_present_vpStopMode))
        return false;
      if (this.vpStopMode != that.vpStopMode)
        return false;
    }

    boolean this_present_vpMsgConfig = true && this.isSetVpMsgConfig();
    boolean that_present_vpMsgConfig = true && that.isSetVpMsgConfig();
    if (this_present_vpMsgConfig || that_present_vpMsgConfig) {
      if (!(this_present_vpMsgConfig && that_present_vpMsgConfig))
        return false;
      if (!this.vpMsgConfig.equals(that.vpMsgConfig))
        return false;
    }

    boolean this_present_vpPlayerURL = true && this.isSetVpPlayerURL();
    boolean that_present_vpPlayerURL = true && that.isSetVpPlayerURL();
    if (this_present_vpPlayerURL || that_present_vpPlayerURL) {
      if (!(this_present_vpPlayerURL && that_present_vpPlayerURL))
        return false;
      if (!this.vpPlayerURL.equals(that.vpPlayerURL))
        return false;
    }

    boolean this_present_vpSkinStyle = true;
    boolean that_present_vpSkinStyle = true;
    if (this_present_vpSkinStyle || that_present_vpSkinStyle) {
      if (!(this_present_vpSkinStyle && that_present_vpSkinStyle))
        return false;
      if (this.vpSkinStyle != that.vpSkinStyle)
        return false;
    }

    boolean this_present_vpCarrier = true;
    boolean that_present_vpCarrier = true;
    if (this_present_vpCarrier || that_present_vpCarrier) {
      if (!(this_present_vpCarrier && that_present_vpCarrier))
        return false;
      if (this.vpCarrier != that.vpCarrier)
        return false;
    }

    boolean this_present_vpFlyInStyle = true;
    boolean that_present_vpFlyInStyle = true;
    if (this_present_vpFlyInStyle || that_present_vpFlyInStyle) {
      if (!(this_present_vpFlyInStyle && that_present_vpFlyInStyle))
        return false;
      if (this.vpFlyInStyle != that.vpFlyInStyle)
        return false;
    }

    boolean this_present_vpInitVolume = true;
    boolean that_present_vpInitVolume = true;
    if (this_present_vpInitVolume || that_present_vpInitVolume) {
      if (!(this_present_vpInitVolume && that_present_vpInitVolume))
        return false;
      if (this.vpInitVolume != that.vpInitVolume)
        return false;
    }

    boolean this_present_vpPlayTimes = true;
    boolean that_present_vpPlayTimes = true;
    if (this_present_vpPlayTimes || that_present_vpPlayTimes) {
      if (!(this_present_vpPlayTimes && that_present_vpPlayTimes))
        return false;
      if (this.vpPlayTimes != that.vpPlayTimes)
        return false;
    }

    boolean this_present_vpExpandStyle = true;
    boolean that_present_vpExpandStyle = true;
    if (this_present_vpExpandStyle || that_present_vpExpandStyle) {
      if (!(this_present_vpExpandStyle && that_present_vpExpandStyle))
        return false;
      if (this.vpExpandStyle != that.vpExpandStyle)
        return false;
    }

    boolean this_present_locationX = true;
    boolean that_present_locationX = true;
    if (this_present_locationX || that_present_locationX) {
      if (!(this_present_locationX && that_present_locationX))
        return false;
      if (this.locationX != that.locationX)
        return false;
    }

    boolean this_present_locationY = true;
    boolean that_present_locationY = true;
    if (this_present_locationY || that_present_locationY) {
      if (!(this_present_locationY && that_present_locationY))
        return false;
      if (this.locationY != that.locationY)
        return false;
    }

    boolean this_present_advFeature = true;
    boolean that_present_advFeature = true;
    if (this_present_advFeature || that_present_advFeature) {
      if (!(this_present_advFeature && that_present_advFeature))
        return false;
      if (this.advFeature != that.advFeature)
        return false;
    }

    boolean this_present_rbCreativeID = true;
    boolean that_present_rbCreativeID = true;
    if (this_present_rbCreativeID || that_present_rbCreativeID) {
      if (!(this_present_rbCreativeID && that_present_rbCreativeID))
        return false;
      if (this.rbCreativeID != that.rbCreativeID)
        return false;
    }

    boolean this_present_dockLocationX = true;
    boolean that_present_dockLocationX = true;
    if (this_present_dockLocationX || that_present_dockLocationX) {
      if (!(this_present_dockLocationX && that_present_dockLocationX))
        return false;
      if (this.dockLocationX != that.dockLocationX)
        return false;
    }

    boolean this_present_dockLoactionY = true;
    boolean that_present_dockLoactionY = true;
    if (this_present_dockLoactionY || that_present_dockLoactionY) {
      if (!(this_present_dockLoactionY && that_present_dockLoactionY))
        return false;
      if (this.dockLoactionY != that.dockLoactionY)
        return false;
    }

    boolean this_present_autoDockConfig = true && this.isSetAutoDockConfig();
    boolean that_present_autoDockConfig = true && that.isSetAutoDockConfig();
    if (this_present_autoDockConfig || that_present_autoDockConfig) {
      if (!(this_present_autoDockConfig && that_present_autoDockConfig))
        return false;
      if (!this.autoDockConfig.equals(that.autoDockConfig))
        return false;
    }

    boolean this_present_countForAuto = true;
    boolean that_present_countForAuto = true;
    if (this_present_countForAuto || that_present_countForAuto) {
      if (!(this_present_countForAuto && that_present_countForAuto))
        return false;
      if (this.countForAuto != that.countForAuto)
        return false;
    }

    boolean this_present_countForExpand = true;
    boolean that_present_countForExpand = true;
    if (this_present_countForExpand || that_present_countForExpand) {
      if (!(this_present_countForExpand && that_present_countForExpand))
        return false;
      if (this.countForExpand != that.countForExpand)
        return false;
    }

    boolean this_present_countForMute = true;
    boolean that_present_countForMute = true;
    if (this_present_countForMute || that_present_countForMute) {
      if (!(this_present_countForMute && that_present_countForMute))
        return false;
      if (this.countForMute != that.countForMute)
        return false;
    }

    boolean this_present_weight = true;
    boolean that_present_weight = true;
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_percentage = true;
    boolean that_present_percentage = true;
    if (this_present_percentage || that_present_percentage) {
      if (!(this_present_percentage && that_present_percentage))
        return false;
      if (this.percentage != that.percentage)
        return false;
    }

    boolean this_present_mainUrlMapping = true && this.isSetMainUrlMapping();
    boolean that_present_mainUrlMapping = true && that.isSetMainUrlMapping();
    if (this_present_mainUrlMapping || that_present_mainUrlMapping) {
      if (!(this_present_mainUrlMapping && that_present_mainUrlMapping))
        return false;
      if (!this.mainUrlMapping.equals(that.mainUrlMapping))
        return false;
    }

    boolean this_present_vpInitStatus = true;
    boolean that_present_vpInitStatus = true;
    if (this_present_vpInitStatus || that_present_vpInitStatus) {
      if (!(this_present_vpInitStatus && that_present_vpInitStatus))
        return false;
      if (this.vpInitStatus != that.vpInitStatus)
        return false;
    }

    boolean this_present_frameworkID = true;
    boolean that_present_frameworkID = true;
    if (this_present_frameworkID || that_present_frameworkID) {
      if (!(this_present_frameworkID && that_present_frameworkID))
        return false;
      if (this.frameworkID != that.frameworkID)
        return false;
    }

    boolean this_present_trackingURL = true && this.isSetTrackingURL();
    boolean that_present_trackingURL = true && that.isSetTrackingURL();
    if (this_present_trackingURL || that_present_trackingURL) {
      if (!(this_present_trackingURL && that_present_trackingURL))
        return false;
      if (!this.trackingURL.equals(that.trackingURL))
        return false;
    }

    boolean this_present_appendMode = true;
    boolean that_present_appendMode = true;
    if (this_present_appendMode || that_present_appendMode) {
      if (!(this_present_appendMode && that_present_appendMode))
        return false;
      if (this.appendMode != that.appendMode)
        return false;
    }

    boolean this_present_zIndex = true;
    boolean that_present_zIndex = true;
    if (this_present_zIndex || that_present_zIndex) {
      if (!(this_present_zIndex && that_present_zIndex))
        return false;
      if (this.zIndex != that.zIndex)
        return false;
    }

    boolean this_present_vpDaTime = true;
    boolean that_present_vpDaTime = true;
    if (this_present_vpDaTime || that_present_vpDaTime) {
      if (!(this_present_vpDaTime && that_present_vpDaTime))
        return false;
      if (this.vpDaTime != that.vpDaTime)
        return false;
    }

    boolean this_present_vpHeTime = true;
    boolean that_present_vpHeTime = true;
    if (this_present_vpHeTime || that_present_vpHeTime) {
      if (!(this_present_vpHeTime && that_present_vpHeTime))
        return false;
      if (this.vpHeTime != that.vpHeTime)
        return false;
    }

    boolean this_present_trackingParam = true && this.isSetTrackingParam();
    boolean that_present_trackingParam = true && that.isSetTrackingParam();
    if (this_present_trackingParam || that_present_trackingParam) {
      if (!(this_present_trackingParam && that_present_trackingParam))
        return false;
      if (!this.trackingParam.equals(that.trackingParam))
        return false;
    }

    boolean this_present_transparent = true;
    boolean that_present_transparent = true;
    if (this_present_transparent || that_present_transparent) {
      if (!(this_present_transparent && that_present_transparent))
        return false;
      if (this.transparent != that.transparent)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_AdManager_Media_Buy_Creative other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMediaBuyID()).compareTo(other.isSetMediaBuyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaBuyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaBuyID, other.mediaBuyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreativeID()).compareTo(other.isSetCreativeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreativeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creativeID, other.creativeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBudget()).compareTo(other.isSetBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.budget, other.budget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequence()).compareTo(other.isSetSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence, other.sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpImpPlayTime()).compareTo(other.isSetVpImpPlayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpImpPlayTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpImpPlayTime, other.vpImpPlayTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpHideMode()).compareTo(other.isSetVpHideMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpHideMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpHideMode, other.vpHideMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpStopMode()).compareTo(other.isSetVpStopMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpStopMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpStopMode, other.vpStopMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpMsgConfig()).compareTo(other.isSetVpMsgConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpMsgConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpMsgConfig, other.vpMsgConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpPlayerURL()).compareTo(other.isSetVpPlayerURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpPlayerURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpPlayerURL, other.vpPlayerURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpSkinStyle()).compareTo(other.isSetVpSkinStyle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpSkinStyle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpSkinStyle, other.vpSkinStyle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpCarrier()).compareTo(other.isSetVpCarrier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpCarrier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpCarrier, other.vpCarrier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpFlyInStyle()).compareTo(other.isSetVpFlyInStyle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpFlyInStyle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpFlyInStyle, other.vpFlyInStyle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpInitVolume()).compareTo(other.isSetVpInitVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpInitVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpInitVolume, other.vpInitVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpPlayTimes()).compareTo(other.isSetVpPlayTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpPlayTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpPlayTimes, other.vpPlayTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpExpandStyle()).compareTo(other.isSetVpExpandStyle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpExpandStyle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpExpandStyle, other.vpExpandStyle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationX()).compareTo(other.isSetLocationX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationX, other.locationX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationY()).compareTo(other.isSetLocationY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationY, other.locationY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvFeature()).compareTo(other.isSetAdvFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advFeature, other.advFeature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRbCreativeID()).compareTo(other.isSetRbCreativeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRbCreativeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rbCreativeID, other.rbCreativeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDockLocationX()).compareTo(other.isSetDockLocationX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDockLocationX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockLocationX, other.dockLocationX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDockLoactionY()).compareTo(other.isSetDockLoactionY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDockLoactionY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockLoactionY, other.dockLoactionY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutoDockConfig()).compareTo(other.isSetAutoDockConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoDockConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoDockConfig, other.autoDockConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountForAuto()).compareTo(other.isSetCountForAuto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountForAuto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countForAuto, other.countForAuto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountForExpand()).compareTo(other.isSetCountForExpand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountForExpand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countForExpand, other.countForExpand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountForMute()).compareTo(other.isSetCountForMute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountForMute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countForMute, other.countForMute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPercentage()).compareTo(other.isSetPercentage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercentage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.percentage, other.percentage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMainUrlMapping()).compareTo(other.isSetMainUrlMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainUrlMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainUrlMapping, other.mainUrlMapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpInitStatus()).compareTo(other.isSetVpInitStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpInitStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpInitStatus, other.vpInitStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrameworkID()).compareTo(other.isSetFrameworkID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameworkID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameworkID, other.frameworkID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrackingURL()).compareTo(other.isSetTrackingURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrackingURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackingURL, other.trackingURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppendMode()).compareTo(other.isSetAppendMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppendMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appendMode, other.appendMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZIndex()).compareTo(other.isSetZIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zIndex, other.zIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpDaTime()).compareTo(other.isSetVpDaTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpDaTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpDaTime, other.vpDaTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVpHeTime()).compareTo(other.isSetVpHeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpHeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpHeTime, other.vpHeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrackingParam()).compareTo(other.isSetTrackingParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrackingParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackingParam, other.trackingParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransparent()).compareTo(other.isSetTransparent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransparent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transparent, other.transparent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_AdManager_Media_Buy_Creative(");
    boolean first = true;

    sb.append("mediaBuyID:");
    sb.append(this.mediaBuyID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creativeID:");
    sb.append(this.creativeID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("budget:");
    sb.append(this.budget);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    sb.append(this.balance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequence:");
    sb.append(this.sequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpImpPlayTime:");
    if (this.vpImpPlayTime == null) {
      sb.append("null");
    } else {
      sb.append(this.vpImpPlayTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpHideMode:");
    sb.append(this.vpHideMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpStopMode:");
    sb.append(this.vpStopMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpMsgConfig:");
    if (this.vpMsgConfig == null) {
      sb.append("null");
    } else {
      sb.append(this.vpMsgConfig);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpPlayerURL:");
    if (this.vpPlayerURL == null) {
      sb.append("null");
    } else {
      sb.append(this.vpPlayerURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpSkinStyle:");
    sb.append(this.vpSkinStyle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpCarrier:");
    sb.append(this.vpCarrier);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpFlyInStyle:");
    sb.append(this.vpFlyInStyle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpInitVolume:");
    sb.append(this.vpInitVolume);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpPlayTimes:");
    sb.append(this.vpPlayTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpExpandStyle:");
    sb.append(this.vpExpandStyle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationX:");
    sb.append(this.locationX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationY:");
    sb.append(this.locationY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("advFeature:");
    sb.append(this.advFeature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rbCreativeID:");
    sb.append(this.rbCreativeID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dockLocationX:");
    sb.append(this.dockLocationX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dockLoactionY:");
    sb.append(this.dockLoactionY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("autoDockConfig:");
    if (this.autoDockConfig == null) {
      sb.append("null");
    } else {
      sb.append(this.autoDockConfig);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("countForAuto:");
    sb.append(this.countForAuto);
    first = false;
    if (!first) sb.append(", ");
    sb.append("countForExpand:");
    sb.append(this.countForExpand);
    first = false;
    if (!first) sb.append(", ");
    sb.append("countForMute:");
    sb.append(this.countForMute);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weight:");
    sb.append(this.weight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("percentage:");
    sb.append(this.percentage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mainUrlMapping:");
    if (this.mainUrlMapping == null) {
      sb.append("null");
    } else {
      sb.append(this.mainUrlMapping);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpInitStatus:");
    sb.append(this.vpInitStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frameworkID:");
    sb.append(this.frameworkID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trackingURL:");
    if (this.trackingURL == null) {
      sb.append("null");
    } else {
      sb.append(this.trackingURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appendMode:");
    sb.append(this.appendMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zIndex:");
    sb.append(this.zIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpDaTime:");
    sb.append(this.vpDaTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpHeTime:");
    sb.append(this.vpHeTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trackingParam:");
    if (this.trackingParam == null) {
      sb.append("null");
    } else {
      sb.append(this.trackingParam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transparent:");
    sb.append(this.transparent);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'mediaBuyID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'creativeID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'budget' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'balance' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sequence' because it's a primitive and you chose the non-beans generator.
    if (vpImpPlayTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpImpPlayTime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'vpHideMode' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vpStopMode' because it's a primitive and you chose the non-beans generator.
    if (vpMsgConfig == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpMsgConfig' was not present! Struct: " + toString());
    }
    if (vpPlayerURL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpPlayerURL' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'vpSkinStyle' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vpCarrier' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vpFlyInStyle' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vpInitVolume' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vpPlayTimes' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vpExpandStyle' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'locationX' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'locationY' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'advFeature' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rbCreativeID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dockLocationX' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dockLoactionY' because it's a primitive and you chose the non-beans generator.
    if (autoDockConfig == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'autoDockConfig' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'countForAuto' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'countForExpand' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'countForMute' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'weight' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'percentage' because it's a primitive and you chose the non-beans generator.
    if (mainUrlMapping == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mainUrlMapping' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'vpInitStatus' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'frameworkID' because it's a primitive and you chose the non-beans generator.
    if (trackingURL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'trackingURL' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'appendMode' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'zIndex' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vpDaTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vpHeTime' because it's a primitive and you chose the non-beans generator.
    if (trackingParam == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'trackingParam' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'transparent' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_AdManager_Media_Buy_CreativeStandardSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Media_Buy_CreativeStandardScheme getScheme() {
      return new TDbSync_AdManager_Media_Buy_CreativeStandardScheme();
    }
  }

  private static class TDbSync_AdManager_Media_Buy_CreativeStandardScheme extends StandardScheme<TDbSync_AdManager_Media_Buy_Creative> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_AdManager_Media_Buy_Creative struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEDIA_BUY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaBuyID = iprot.readI32();
              struct.setMediaBuyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creativeID = iprot.readI32();
              struct.setCreativeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.budget = iprot.readI64();
              struct.setBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.balance = iprot.readI64();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequence = iprot.readI32();
              struct.setSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VP_IMP_PLAY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vpImpPlayTime = iprot.readString();
              struct.setVpImpPlayTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VP_HIDE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpHideMode = iprot.readI32();
              struct.setVpHideModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VP_STOP_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpStopMode = iprot.readI32();
              struct.setVpStopModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VP_MSG_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vpMsgConfig = iprot.readString();
              struct.setVpMsgConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VP_PLAYER_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vpPlayerURL = iprot.readString();
              struct.setVpPlayerURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VP_SKIN_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpSkinStyle = iprot.readI32();
              struct.setVpSkinStyleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VP_CARRIER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpCarrier = iprot.readI32();
              struct.setVpCarrierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // VP_FLY_IN_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpFlyInStyle = iprot.readI32();
              struct.setVpFlyInStyleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // VP_INIT_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpInitVolume = iprot.readI32();
              struct.setVpInitVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VP_PLAY_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpPlayTimes = iprot.readI32();
              struct.setVpPlayTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // VP_EXPAND_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpExpandStyle = iprot.readI32();
              struct.setVpExpandStyleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOCATION_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locationX = iprot.readI32();
              struct.setLocationXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LOCATION_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locationY = iprot.readI32();
              struct.setLocationYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ADV_FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.advFeature = iprot.readI64();
              struct.setAdvFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // RB_CREATIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rbCreativeID = iprot.readI32();
              struct.setRbCreativeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DOCK_LOCATION_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dockLocationX = iprot.readI32();
              struct.setDockLocationXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DOCK_LOACTION_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dockLoactionY = iprot.readI32();
              struct.setDockLoactionYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // AUTO_DOCK_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.autoDockConfig = iprot.readString();
              struct.setAutoDockConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // COUNT_FOR_AUTO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.countForAuto = iprot.readI32();
              struct.setCountForAutoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // COUNT_FOR_EXPAND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.countForExpand = iprot.readI32();
              struct.setCountForExpandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // COUNT_FOR_MUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.countForMute = iprot.readI32();
              struct.setCountForMuteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weight = iprot.readI32();
              struct.setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PERCENTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.percentage = iprot.readI32();
              struct.setPercentageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // MAIN_URL_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mainUrlMapping = iprot.readString();
              struct.setMainUrlMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // VP_INIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpInitStatus = iprot.readI32();
              struct.setVpInitStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // FRAMEWORK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frameworkID = iprot.readI32();
              struct.setFrameworkIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // TRACKING_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trackingURL = iprot.readString();
              struct.setTrackingURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // APPEND_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appendMode = iprot.readI32();
              struct.setAppendModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // Z_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.zIndex = iprot.readI32();
              struct.setZIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // VP_DA_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpDaTime = iprot.readI32();
              struct.setVpDaTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // VP_HE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpHeTime = iprot.readI32();
              struct.setVpHeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // TRACKING_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trackingParam = iprot.readString();
              struct.setTrackingParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // TRANSPARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transparent = iprot.readI32();
              struct.setTransparentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMediaBuyID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaBuyID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreativeID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'creativeID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBudget()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'budget' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBalance()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'balance' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSequence()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sequence' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpHideMode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpHideMode' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpStopMode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpStopMode' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpSkinStyle()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpSkinStyle' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpCarrier()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpCarrier' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpFlyInStyle()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpFlyInStyle' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpInitVolume()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpInitVolume' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpPlayTimes()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpPlayTimes' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpExpandStyle()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpExpandStyle' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLocationX()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'locationX' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLocationY()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'locationY' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAdvFeature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'advFeature' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRbCreativeID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rbCreativeID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDockLocationX()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dockLocationX' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDockLoactionY()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dockLoactionY' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCountForAuto()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'countForAuto' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCountForExpand()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'countForExpand' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCountForMute()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'countForMute' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWeight()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'weight' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPercentage()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'percentage' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpInitStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpInitStatus' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFrameworkID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'frameworkID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAppendMode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'appendMode' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetZIndex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zIndex' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpDaTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpDaTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVpHeTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vpHeTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTransparent()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transparent' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_AdManager_Media_Buy_Creative struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEDIA_BUY_ID_FIELD_DESC);
      oprot.writeI32(struct.mediaBuyID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATIVE_ID_FIELD_DESC);
      oprot.writeI32(struct.creativeID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUDGET_FIELD_DESC);
      oprot.writeI64(struct.budget);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_FIELD_DESC);
      oprot.writeI64(struct.balance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEQUENCE_FIELD_DESC);
      oprot.writeI32(struct.sequence);
      oprot.writeFieldEnd();
      if (struct.vpImpPlayTime != null) {
        oprot.writeFieldBegin(VP_IMP_PLAY_TIME_FIELD_DESC);
        oprot.writeString(struct.vpImpPlayTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VP_HIDE_MODE_FIELD_DESC);
      oprot.writeI32(struct.vpHideMode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VP_STOP_MODE_FIELD_DESC);
      oprot.writeI32(struct.vpStopMode);
      oprot.writeFieldEnd();
      if (struct.vpMsgConfig != null) {
        oprot.writeFieldBegin(VP_MSG_CONFIG_FIELD_DESC);
        oprot.writeString(struct.vpMsgConfig);
        oprot.writeFieldEnd();
      }
      if (struct.vpPlayerURL != null) {
        oprot.writeFieldBegin(VP_PLAYER_URL_FIELD_DESC);
        oprot.writeString(struct.vpPlayerURL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VP_SKIN_STYLE_FIELD_DESC);
      oprot.writeI32(struct.vpSkinStyle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VP_CARRIER_FIELD_DESC);
      oprot.writeI32(struct.vpCarrier);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VP_FLY_IN_STYLE_FIELD_DESC);
      oprot.writeI32(struct.vpFlyInStyle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VP_INIT_VOLUME_FIELD_DESC);
      oprot.writeI32(struct.vpInitVolume);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VP_PLAY_TIMES_FIELD_DESC);
      oprot.writeI32(struct.vpPlayTimes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VP_EXPAND_STYLE_FIELD_DESC);
      oprot.writeI32(struct.vpExpandStyle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATION_X_FIELD_DESC);
      oprot.writeI32(struct.locationX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCATION_Y_FIELD_DESC);
      oprot.writeI32(struct.locationY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADV_FEATURE_FIELD_DESC);
      oprot.writeI64(struct.advFeature);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RB_CREATIVE_ID_FIELD_DESC);
      oprot.writeI32(struct.rbCreativeID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOCK_LOCATION_X_FIELD_DESC);
      oprot.writeI32(struct.dockLocationX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOCK_LOACTION_Y_FIELD_DESC);
      oprot.writeI32(struct.dockLoactionY);
      oprot.writeFieldEnd();
      if (struct.autoDockConfig != null) {
        oprot.writeFieldBegin(AUTO_DOCK_CONFIG_FIELD_DESC);
        oprot.writeString(struct.autoDockConfig);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNT_FOR_AUTO_FIELD_DESC);
      oprot.writeI32(struct.countForAuto);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FOR_EXPAND_FIELD_DESC);
      oprot.writeI32(struct.countForExpand);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FOR_MUTE_FIELD_DESC);
      oprot.writeI32(struct.countForMute);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
      oprot.writeI32(struct.weight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERCENTAGE_FIELD_DESC);
      oprot.writeI32(struct.percentage);
      oprot.writeFieldEnd();
      if (struct.mainUrlMapping != null) {
        oprot.writeFieldBegin(MAIN_URL_MAPPING_FIELD_DESC);
        oprot.writeString(struct.mainUrlMapping);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VP_INIT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.vpInitStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRAMEWORK_ID_FIELD_DESC);
      oprot.writeI32(struct.frameworkID);
      oprot.writeFieldEnd();
      if (struct.trackingURL != null) {
        oprot.writeFieldBegin(TRACKING_URL_FIELD_DESC);
        oprot.writeString(struct.trackingURL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPEND_MODE_FIELD_DESC);
      oprot.writeI32(struct.appendMode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Z_INDEX_FIELD_DESC);
      oprot.writeI32(struct.zIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VP_DA_TIME_FIELD_DESC);
      oprot.writeI32(struct.vpDaTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VP_HE_TIME_FIELD_DESC);
      oprot.writeI32(struct.vpHeTime);
      oprot.writeFieldEnd();
      if (struct.trackingParam != null) {
        oprot.writeFieldBegin(TRACKING_PARAM_FIELD_DESC);
        oprot.writeString(struct.trackingParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRANSPARENT_FIELD_DESC);
      oprot.writeI32(struct.transparent);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_AdManager_Media_Buy_CreativeTupleSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Media_Buy_CreativeTupleScheme getScheme() {
      return new TDbSync_AdManager_Media_Buy_CreativeTupleScheme();
    }
  }

  private static class TDbSync_AdManager_Media_Buy_CreativeTupleScheme extends TupleScheme<TDbSync_AdManager_Media_Buy_Creative> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Media_Buy_Creative struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.mediaBuyID);
      oprot.writeI32(struct.creativeID);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeI64(struct.budget);
      oprot.writeI64(struct.balance);
      oprot.writeI32(struct.sequence);
      oprot.writeString(struct.vpImpPlayTime);
      oprot.writeI32(struct.vpHideMode);
      oprot.writeI32(struct.vpStopMode);
      oprot.writeString(struct.vpMsgConfig);
      oprot.writeString(struct.vpPlayerURL);
      oprot.writeI32(struct.vpSkinStyle);
      oprot.writeI32(struct.vpCarrier);
      oprot.writeI32(struct.vpFlyInStyle);
      oprot.writeI32(struct.vpInitVolume);
      oprot.writeI32(struct.vpPlayTimes);
      oprot.writeI32(struct.vpExpandStyle);
      oprot.writeI32(struct.locationX);
      oprot.writeI32(struct.locationY);
      oprot.writeI64(struct.advFeature);
      oprot.writeI32(struct.rbCreativeID);
      oprot.writeI32(struct.dockLocationX);
      oprot.writeI32(struct.dockLoactionY);
      oprot.writeString(struct.autoDockConfig);
      oprot.writeI32(struct.countForAuto);
      oprot.writeI32(struct.countForExpand);
      oprot.writeI32(struct.countForMute);
      oprot.writeI32(struct.weight);
      oprot.writeI32(struct.percentage);
      oprot.writeString(struct.mainUrlMapping);
      oprot.writeI32(struct.vpInitStatus);
      oprot.writeI32(struct.frameworkID);
      oprot.writeString(struct.trackingURL);
      oprot.writeI32(struct.appendMode);
      oprot.writeI32(struct.zIndex);
      oprot.writeI32(struct.vpDaTime);
      oprot.writeI32(struct.vpHeTime);
      oprot.writeString(struct.trackingParam);
      oprot.writeI32(struct.transparent);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Media_Buy_Creative struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mediaBuyID = iprot.readI32();
      struct.setMediaBuyIDIsSet(true);
      struct.creativeID = iprot.readI32();
      struct.setCreativeIDIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.budget = iprot.readI64();
      struct.setBudgetIsSet(true);
      struct.balance = iprot.readI64();
      struct.setBalanceIsSet(true);
      struct.sequence = iprot.readI32();
      struct.setSequenceIsSet(true);
      struct.vpImpPlayTime = iprot.readString();
      struct.setVpImpPlayTimeIsSet(true);
      struct.vpHideMode = iprot.readI32();
      struct.setVpHideModeIsSet(true);
      struct.vpStopMode = iprot.readI32();
      struct.setVpStopModeIsSet(true);
      struct.vpMsgConfig = iprot.readString();
      struct.setVpMsgConfigIsSet(true);
      struct.vpPlayerURL = iprot.readString();
      struct.setVpPlayerURLIsSet(true);
      struct.vpSkinStyle = iprot.readI32();
      struct.setVpSkinStyleIsSet(true);
      struct.vpCarrier = iprot.readI32();
      struct.setVpCarrierIsSet(true);
      struct.vpFlyInStyle = iprot.readI32();
      struct.setVpFlyInStyleIsSet(true);
      struct.vpInitVolume = iprot.readI32();
      struct.setVpInitVolumeIsSet(true);
      struct.vpPlayTimes = iprot.readI32();
      struct.setVpPlayTimesIsSet(true);
      struct.vpExpandStyle = iprot.readI32();
      struct.setVpExpandStyleIsSet(true);
      struct.locationX = iprot.readI32();
      struct.setLocationXIsSet(true);
      struct.locationY = iprot.readI32();
      struct.setLocationYIsSet(true);
      struct.advFeature = iprot.readI64();
      struct.setAdvFeatureIsSet(true);
      struct.rbCreativeID = iprot.readI32();
      struct.setRbCreativeIDIsSet(true);
      struct.dockLocationX = iprot.readI32();
      struct.setDockLocationXIsSet(true);
      struct.dockLoactionY = iprot.readI32();
      struct.setDockLoactionYIsSet(true);
      struct.autoDockConfig = iprot.readString();
      struct.setAutoDockConfigIsSet(true);
      struct.countForAuto = iprot.readI32();
      struct.setCountForAutoIsSet(true);
      struct.countForExpand = iprot.readI32();
      struct.setCountForExpandIsSet(true);
      struct.countForMute = iprot.readI32();
      struct.setCountForMuteIsSet(true);
      struct.weight = iprot.readI32();
      struct.setWeightIsSet(true);
      struct.percentage = iprot.readI32();
      struct.setPercentageIsSet(true);
      struct.mainUrlMapping = iprot.readString();
      struct.setMainUrlMappingIsSet(true);
      struct.vpInitStatus = iprot.readI32();
      struct.setVpInitStatusIsSet(true);
      struct.frameworkID = iprot.readI32();
      struct.setFrameworkIDIsSet(true);
      struct.trackingURL = iprot.readString();
      struct.setTrackingURLIsSet(true);
      struct.appendMode = iprot.readI32();
      struct.setAppendModeIsSet(true);
      struct.zIndex = iprot.readI32();
      struct.setZIndexIsSet(true);
      struct.vpDaTime = iprot.readI32();
      struct.setVpDaTimeIsSet(true);
      struct.vpHeTime = iprot.readI32();
      struct.setVpHeTimeIsSet(true);
      struct.trackingParam = iprot.readString();
      struct.setTrackingParamIsSet(true);
      struct.transparent = iprot.readI32();
      struct.setTransparentIsSet(true);
    }
  }

}

