/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.admanager;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_AdManager_Player_Status implements org.apache.thrift.TBase<TDbSync_AdManager_Player_Status, TDbSync_AdManager_Player_Status._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_AdManager_Player_Status> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_AdManager_Player_Status");

  private static final org.apache.thrift.protocol.TField MEDIA_BUY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaBuyID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CREATIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creativeID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IS_FIXED_FIELD_DESC = new org.apache.thrift.protocol.TField("isFixed", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_BLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("isBlock", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_OVERFLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("isOverflow", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isActive", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField LOC_X_FIELD_DESC = new org.apache.thrift.protocol.TField("locX", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LOC_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("locY", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_AdManager_Player_StatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_AdManager_Player_StatusTupleSchemeFactory());
  }

  public int mediaBuyID; // required
  public int creativeID; // required
  public int statusType; // required
  public int status; // required
  public String lastChanged; // required
  public int isFixed; // required
  public int isBlock; // required
  public int isOverflow; // required
  public int isActive; // required
  public String locX; // required
  public String locY; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEDIA_BUY_ID((short)1, "mediaBuyID"),
    CREATIVE_ID((short)2, "creativeID"),
    STATUS_TYPE((short)3, "statusType"),
    STATUS((short)4, "status"),
    LAST_CHANGED((short)5, "lastChanged"),
    IS_FIXED((short)6, "isFixed"),
    IS_BLOCK((short)7, "isBlock"),
    IS_OVERFLOW((short)8, "isOverflow"),
    IS_ACTIVE((short)9, "isActive"),
    LOC_X((short)10, "locX"),
    LOC_Y((short)11, "locY");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEDIA_BUY_ID
          return MEDIA_BUY_ID;
        case 2: // CREATIVE_ID
          return CREATIVE_ID;
        case 3: // STATUS_TYPE
          return STATUS_TYPE;
        case 4: // STATUS
          return STATUS;
        case 5: // LAST_CHANGED
          return LAST_CHANGED;
        case 6: // IS_FIXED
          return IS_FIXED;
        case 7: // IS_BLOCK
          return IS_BLOCK;
        case 8: // IS_OVERFLOW
          return IS_OVERFLOW;
        case 9: // IS_ACTIVE
          return IS_ACTIVE;
        case 10: // LOC_X
          return LOC_X;
        case 11: // LOC_Y
          return LOC_Y;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEDIABUYID_ISSET_ID = 0;
  private static final int __CREATIVEID_ISSET_ID = 1;
  private static final int __STATUSTYPE_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __ISFIXED_ISSET_ID = 4;
  private static final int __ISBLOCK_ISSET_ID = 5;
  private static final int __ISOVERFLOW_ISSET_ID = 6;
  private static final int __ISACTIVE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEDIA_BUY_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaBuyID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("creativeID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("statusType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_FIXED, new org.apache.thrift.meta_data.FieldMetaData("isFixed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_BLOCK, new org.apache.thrift.meta_data.FieldMetaData("isBlock", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_OVERFLOW, new org.apache.thrift.meta_data.FieldMetaData("isOverflow", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("isActive", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOC_X, new org.apache.thrift.meta_data.FieldMetaData("locX", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOC_Y, new org.apache.thrift.meta_data.FieldMetaData("locY", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_AdManager_Player_Status.class, metaDataMap);
  }

  public TDbSync_AdManager_Player_Status() {
  }

  public TDbSync_AdManager_Player_Status(
    int mediaBuyID,
    int creativeID,
    int statusType,
    int status,
    String lastChanged,
    int isFixed,
    int isBlock,
    int isOverflow,
    int isActive,
    String locX,
    String locY)
  {
    this();
    this.mediaBuyID = mediaBuyID;
    setMediaBuyIDIsSet(true);
    this.creativeID = creativeID;
    setCreativeIDIsSet(true);
    this.statusType = statusType;
    setStatusTypeIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.isFixed = isFixed;
    setIsFixedIsSet(true);
    this.isBlock = isBlock;
    setIsBlockIsSet(true);
    this.isOverflow = isOverflow;
    setIsOverflowIsSet(true);
    this.isActive = isActive;
    setIsActiveIsSet(true);
    this.locX = locX;
    this.locY = locY;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_AdManager_Player_Status(TDbSync_AdManager_Player_Status other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mediaBuyID = other.mediaBuyID;
    this.creativeID = other.creativeID;
    this.statusType = other.statusType;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    this.isFixed = other.isFixed;
    this.isBlock = other.isBlock;
    this.isOverflow = other.isOverflow;
    this.isActive = other.isActive;
    if (other.isSetLocX()) {
      this.locX = other.locX;
    }
    if (other.isSetLocY()) {
      this.locY = other.locY;
    }
  }

  public TDbSync_AdManager_Player_Status deepCopy() {
    return new TDbSync_AdManager_Player_Status(this);
  }

  @Override
  public void clear() {
    setMediaBuyIDIsSet(false);
    this.mediaBuyID = 0;
    setCreativeIDIsSet(false);
    this.creativeID = 0;
    setStatusTypeIsSet(false);
    this.statusType = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    setIsFixedIsSet(false);
    this.isFixed = 0;
    setIsBlockIsSet(false);
    this.isBlock = 0;
    setIsOverflowIsSet(false);
    this.isOverflow = 0;
    setIsActiveIsSet(false);
    this.isActive = 0;
    this.locX = null;
    this.locY = null;
  }

  public int getMediaBuyID() {
    return this.mediaBuyID;
  }

  public TDbSync_AdManager_Player_Status setMediaBuyID(int mediaBuyID) {
    this.mediaBuyID = mediaBuyID;
    setMediaBuyIDIsSet(true);
    return this;
  }

  public void unsetMediaBuyID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIABUYID_ISSET_ID);
  }

  /** Returns true if field mediaBuyID is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaBuyID() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIABUYID_ISSET_ID);
  }

  public void setMediaBuyIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIABUYID_ISSET_ID, value);
  }

  public int getCreativeID() {
    return this.creativeID;
  }

  public TDbSync_AdManager_Player_Status setCreativeID(int creativeID) {
    this.creativeID = creativeID;
    setCreativeIDIsSet(true);
    return this;
  }

  public void unsetCreativeID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIVEID_ISSET_ID);
  }

  /** Returns true if field creativeID is set (has been assigned a value) and false otherwise */
  public boolean isSetCreativeID() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIVEID_ISSET_ID);
  }

  public void setCreativeIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIVEID_ISSET_ID, value);
  }

  public int getStatusType() {
    return this.statusType;
  }

  public TDbSync_AdManager_Player_Status setStatusType(int statusType) {
    this.statusType = statusType;
    setStatusTypeIsSet(true);
    return this;
  }

  public void unsetStatusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSTYPE_ISSET_ID);
  }

  /** Returns true if field statusType is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusType() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSTYPE_ISSET_ID);
  }

  public void setStatusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSTYPE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_AdManager_Player_Status setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_AdManager_Player_Status setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public int getIsFixed() {
    return this.isFixed;
  }

  public TDbSync_AdManager_Player_Status setIsFixed(int isFixed) {
    this.isFixed = isFixed;
    setIsFixedIsSet(true);
    return this;
  }

  public void unsetIsFixed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFIXED_ISSET_ID);
  }

  /** Returns true if field isFixed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFixed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFIXED_ISSET_ID);
  }

  public void setIsFixedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFIXED_ISSET_ID, value);
  }

  public int getIsBlock() {
    return this.isBlock;
  }

  public TDbSync_AdManager_Player_Status setIsBlock(int isBlock) {
    this.isBlock = isBlock;
    setIsBlockIsSet(true);
    return this;
  }

  public void unsetIsBlock() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBLOCK_ISSET_ID);
  }

  /** Returns true if field isBlock is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBlock() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBLOCK_ISSET_ID);
  }

  public void setIsBlockIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBLOCK_ISSET_ID, value);
  }

  public int getIsOverflow() {
    return this.isOverflow;
  }

  public TDbSync_AdManager_Player_Status setIsOverflow(int isOverflow) {
    this.isOverflow = isOverflow;
    setIsOverflowIsSet(true);
    return this;
  }

  public void unsetIsOverflow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOVERFLOW_ISSET_ID);
  }

  /** Returns true if field isOverflow is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOverflow() {
    return EncodingUtils.testBit(__isset_bitfield, __ISOVERFLOW_ISSET_ID);
  }

  public void setIsOverflowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOVERFLOW_ISSET_ID, value);
  }

  public int getIsActive() {
    return this.isActive;
  }

  public TDbSync_AdManager_Player_Status setIsActive(int isActive) {
    this.isActive = isActive;
    setIsActiveIsSet(true);
    return this;
  }

  public void unsetIsActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
  }

  /** Returns true if field isActive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
  }

  public void setIsActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISACTIVE_ISSET_ID, value);
  }

  public String getLocX() {
    return this.locX;
  }

  public TDbSync_AdManager_Player_Status setLocX(String locX) {
    this.locX = locX;
    return this;
  }

  public void unsetLocX() {
    this.locX = null;
  }

  /** Returns true if field locX is set (has been assigned a value) and false otherwise */
  public boolean isSetLocX() {
    return this.locX != null;
  }

  public void setLocXIsSet(boolean value) {
    if (!value) {
      this.locX = null;
    }
  }

  public String getLocY() {
    return this.locY;
  }

  public TDbSync_AdManager_Player_Status setLocY(String locY) {
    this.locY = locY;
    return this;
  }

  public void unsetLocY() {
    this.locY = null;
  }

  /** Returns true if field locY is set (has been assigned a value) and false otherwise */
  public boolean isSetLocY() {
    return this.locY != null;
  }

  public void setLocYIsSet(boolean value) {
    if (!value) {
      this.locY = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEDIA_BUY_ID:
      if (value == null) {
        unsetMediaBuyID();
      } else {
        setMediaBuyID((Integer)value);
      }
      break;

    case CREATIVE_ID:
      if (value == null) {
        unsetCreativeID();
      } else {
        setCreativeID((Integer)value);
      }
      break;

    case STATUS_TYPE:
      if (value == null) {
        unsetStatusType();
      } else {
        setStatusType((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case IS_FIXED:
      if (value == null) {
        unsetIsFixed();
      } else {
        setIsFixed((Integer)value);
      }
      break;

    case IS_BLOCK:
      if (value == null) {
        unsetIsBlock();
      } else {
        setIsBlock((Integer)value);
      }
      break;

    case IS_OVERFLOW:
      if (value == null) {
        unsetIsOverflow();
      } else {
        setIsOverflow((Integer)value);
      }
      break;

    case IS_ACTIVE:
      if (value == null) {
        unsetIsActive();
      } else {
        setIsActive((Integer)value);
      }
      break;

    case LOC_X:
      if (value == null) {
        unsetLocX();
      } else {
        setLocX((String)value);
      }
      break;

    case LOC_Y:
      if (value == null) {
        unsetLocY();
      } else {
        setLocY((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEDIA_BUY_ID:
      return Integer.valueOf(getMediaBuyID());

    case CREATIVE_ID:
      return Integer.valueOf(getCreativeID());

    case STATUS_TYPE:
      return Integer.valueOf(getStatusType());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case IS_FIXED:
      return Integer.valueOf(getIsFixed());

    case IS_BLOCK:
      return Integer.valueOf(getIsBlock());

    case IS_OVERFLOW:
      return Integer.valueOf(getIsOverflow());

    case IS_ACTIVE:
      return Integer.valueOf(getIsActive());

    case LOC_X:
      return getLocX();

    case LOC_Y:
      return getLocY();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEDIA_BUY_ID:
      return isSetMediaBuyID();
    case CREATIVE_ID:
      return isSetCreativeID();
    case STATUS_TYPE:
      return isSetStatusType();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case IS_FIXED:
      return isSetIsFixed();
    case IS_BLOCK:
      return isSetIsBlock();
    case IS_OVERFLOW:
      return isSetIsOverflow();
    case IS_ACTIVE:
      return isSetIsActive();
    case LOC_X:
      return isSetLocX();
    case LOC_Y:
      return isSetLocY();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_AdManager_Player_Status)
      return this.equals((TDbSync_AdManager_Player_Status)that);
    return false;
  }

  public boolean equals(TDbSync_AdManager_Player_Status that) {
    if (that == null)
      return false;

    boolean this_present_mediaBuyID = true;
    boolean that_present_mediaBuyID = true;
    if (this_present_mediaBuyID || that_present_mediaBuyID) {
      if (!(this_present_mediaBuyID && that_present_mediaBuyID))
        return false;
      if (this.mediaBuyID != that.mediaBuyID)
        return false;
    }

    boolean this_present_creativeID = true;
    boolean that_present_creativeID = true;
    if (this_present_creativeID || that_present_creativeID) {
      if (!(this_present_creativeID && that_present_creativeID))
        return false;
      if (this.creativeID != that.creativeID)
        return false;
    }

    boolean this_present_statusType = true;
    boolean that_present_statusType = true;
    if (this_present_statusType || that_present_statusType) {
      if (!(this_present_statusType && that_present_statusType))
        return false;
      if (this.statusType != that.statusType)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_isFixed = true;
    boolean that_present_isFixed = true;
    if (this_present_isFixed || that_present_isFixed) {
      if (!(this_present_isFixed && that_present_isFixed))
        return false;
      if (this.isFixed != that.isFixed)
        return false;
    }

    boolean this_present_isBlock = true;
    boolean that_present_isBlock = true;
    if (this_present_isBlock || that_present_isBlock) {
      if (!(this_present_isBlock && that_present_isBlock))
        return false;
      if (this.isBlock != that.isBlock)
        return false;
    }

    boolean this_present_isOverflow = true;
    boolean that_present_isOverflow = true;
    if (this_present_isOverflow || that_present_isOverflow) {
      if (!(this_present_isOverflow && that_present_isOverflow))
        return false;
      if (this.isOverflow != that.isOverflow)
        return false;
    }

    boolean this_present_isActive = true;
    boolean that_present_isActive = true;
    if (this_present_isActive || that_present_isActive) {
      if (!(this_present_isActive && that_present_isActive))
        return false;
      if (this.isActive != that.isActive)
        return false;
    }

    boolean this_present_locX = true && this.isSetLocX();
    boolean that_present_locX = true && that.isSetLocX();
    if (this_present_locX || that_present_locX) {
      if (!(this_present_locX && that_present_locX))
        return false;
      if (!this.locX.equals(that.locX))
        return false;
    }

    boolean this_present_locY = true && this.isSetLocY();
    boolean that_present_locY = true && that.isSetLocY();
    if (this_present_locY || that_present_locY) {
      if (!(this_present_locY && that_present_locY))
        return false;
      if (!this.locY.equals(that.locY))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_AdManager_Player_Status other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMediaBuyID()).compareTo(other.isSetMediaBuyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaBuyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaBuyID, other.mediaBuyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreativeID()).compareTo(other.isSetCreativeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreativeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creativeID, other.creativeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusType()).compareTo(other.isSetStatusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusType, other.statusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFixed()).compareTo(other.isSetIsFixed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFixed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFixed, other.isFixed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBlock()).compareTo(other.isSetIsBlock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBlock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBlock, other.isBlock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOverflow()).compareTo(other.isSetIsOverflow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOverflow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOverflow, other.isOverflow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsActive()).compareTo(other.isSetIsActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, other.isActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocX()).compareTo(other.isSetLocX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locX, other.locX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocY()).compareTo(other.isSetLocY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locY, other.locY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_AdManager_Player_Status(");
    boolean first = true;

    sb.append("mediaBuyID:");
    sb.append(this.mediaBuyID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creativeID:");
    sb.append(this.creativeID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusType:");
    sb.append(this.statusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFixed:");
    sb.append(this.isFixed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isBlock:");
    sb.append(this.isBlock);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOverflow:");
    sb.append(this.isOverflow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isActive:");
    sb.append(this.isActive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locX:");
    if (this.locX == null) {
      sb.append("null");
    } else {
      sb.append(this.locX);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locY:");
    if (this.locY == null) {
      sb.append("null");
    } else {
      sb.append(this.locY);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'mediaBuyID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'creativeID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'statusType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isFixed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isBlock' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isOverflow' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isActive' because it's a primitive and you chose the non-beans generator.
    if (locX == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'locX' was not present! Struct: " + toString());
    }
    if (locY == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'locY' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_AdManager_Player_StatusStandardSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Player_StatusStandardScheme getScheme() {
      return new TDbSync_AdManager_Player_StatusStandardScheme();
    }
  }

  private static class TDbSync_AdManager_Player_StatusStandardScheme extends StandardScheme<TDbSync_AdManager_Player_Status> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_AdManager_Player_Status struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEDIA_BUY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaBuyID = iprot.readI32();
              struct.setMediaBuyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creativeID = iprot.readI32();
              struct.setCreativeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statusType = iprot.readI32();
              struct.setStatusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_FIXED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isFixed = iprot.readI32();
              struct.setIsFixedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_BLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isBlock = iprot.readI32();
              struct.setIsBlockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_OVERFLOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isOverflow = iprot.readI32();
              struct.setIsOverflowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isActive = iprot.readI32();
              struct.setIsActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOC_X
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locX = iprot.readString();
              struct.setLocXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOC_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locY = iprot.readString();
              struct.setLocYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMediaBuyID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaBuyID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreativeID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'creativeID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatusType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsFixed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isFixed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsBlock()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isBlock' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsOverflow()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isOverflow' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsActive()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isActive' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_AdManager_Player_Status struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEDIA_BUY_ID_FIELD_DESC);
      oprot.writeI32(struct.mediaBuyID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATIVE_ID_FIELD_DESC);
      oprot.writeI32(struct.creativeID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.statusType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_FIXED_FIELD_DESC);
      oprot.writeI32(struct.isFixed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_BLOCK_FIELD_DESC);
      oprot.writeI32(struct.isBlock);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_OVERFLOW_FIELD_DESC);
      oprot.writeI32(struct.isOverflow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
      oprot.writeI32(struct.isActive);
      oprot.writeFieldEnd();
      if (struct.locX != null) {
        oprot.writeFieldBegin(LOC_X_FIELD_DESC);
        oprot.writeString(struct.locX);
        oprot.writeFieldEnd();
      }
      if (struct.locY != null) {
        oprot.writeFieldBegin(LOC_Y_FIELD_DESC);
        oprot.writeString(struct.locY);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_AdManager_Player_StatusTupleSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Player_StatusTupleScheme getScheme() {
      return new TDbSync_AdManager_Player_StatusTupleScheme();
    }
  }

  private static class TDbSync_AdManager_Player_StatusTupleScheme extends TupleScheme<TDbSync_AdManager_Player_Status> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Player_Status struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.mediaBuyID);
      oprot.writeI32(struct.creativeID);
      oprot.writeI32(struct.statusType);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeI32(struct.isFixed);
      oprot.writeI32(struct.isBlock);
      oprot.writeI32(struct.isOverflow);
      oprot.writeI32(struct.isActive);
      oprot.writeString(struct.locX);
      oprot.writeString(struct.locY);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Player_Status struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mediaBuyID = iprot.readI32();
      struct.setMediaBuyIDIsSet(true);
      struct.creativeID = iprot.readI32();
      struct.setCreativeIDIsSet(true);
      struct.statusType = iprot.readI32();
      struct.setStatusTypeIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.isFixed = iprot.readI32();
      struct.setIsFixedIsSet(true);
      struct.isBlock = iprot.readI32();
      struct.setIsBlockIsSet(true);
      struct.isOverflow = iprot.readI32();
      struct.setIsOverflowIsSet(true);
      struct.isActive = iprot.readI32();
      struct.setIsActiveIsSet(true);
      struct.locX = iprot.readString();
      struct.setLocXIsSet(true);
      struct.locY = iprot.readString();
      struct.setLocYIsSet(true);
    }
  }

}

