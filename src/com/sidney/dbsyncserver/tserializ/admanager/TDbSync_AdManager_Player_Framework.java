/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.admanager;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_AdManager_Player_Framework implements org.apache.thrift.TBase<TDbSync_AdManager_Player_Framework, TDbSync_AdManager_Player_Framework._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_AdManager_Player_Framework> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_AdManager_Player_Framework");

  private static final org.apache.thrift.protocol.TField FRAMEWORK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("frameworkID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DIRECTORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("directoryID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FRAMEWORK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("frameworkName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FRAMEWORK_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("frameworkPath", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FRAMEWORK_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("frameworkDesc", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS__FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_File", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_AdManager_Player_FrameworkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_AdManager_Player_FrameworkTupleSchemeFactory());
  }

  public int frameworkID; // required
  public int directoryID; // required
  public int status; // required
  public String lastChanged; // required
  public String frameworkName; // required
  public String frameworkPath; // required
  public String frameworkDesc; // required
  public int is_File; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRAMEWORK_ID((short)1, "frameworkID"),
    DIRECTORY_ID((short)2, "directoryID"),
    STATUS((short)3, "status"),
    LAST_CHANGED((short)4, "lastChanged"),
    FRAMEWORK_NAME((short)5, "frameworkName"),
    FRAMEWORK_PATH((short)6, "frameworkPath"),
    FRAMEWORK_DESC((short)7, "frameworkDesc"),
    IS__FILE((short)8, "is_File");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRAMEWORK_ID
          return FRAMEWORK_ID;
        case 2: // DIRECTORY_ID
          return DIRECTORY_ID;
        case 3: // STATUS
          return STATUS;
        case 4: // LAST_CHANGED
          return LAST_CHANGED;
        case 5: // FRAMEWORK_NAME
          return FRAMEWORK_NAME;
        case 6: // FRAMEWORK_PATH
          return FRAMEWORK_PATH;
        case 7: // FRAMEWORK_DESC
          return FRAMEWORK_DESC;
        case 8: // IS__FILE
          return IS__FILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FRAMEWORKID_ISSET_ID = 0;
  private static final int __DIRECTORYID_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __IS_FILE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRAMEWORK_ID, new org.apache.thrift.meta_data.FieldMetaData("frameworkID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIRECTORY_ID, new org.apache.thrift.meta_data.FieldMetaData("directoryID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FRAMEWORK_NAME, new org.apache.thrift.meta_data.FieldMetaData("frameworkName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FRAMEWORK_PATH, new org.apache.thrift.meta_data.FieldMetaData("frameworkPath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FRAMEWORK_DESC, new org.apache.thrift.meta_data.FieldMetaData("frameworkDesc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS__FILE, new org.apache.thrift.meta_data.FieldMetaData("is_File", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_AdManager_Player_Framework.class, metaDataMap);
  }

  public TDbSync_AdManager_Player_Framework() {
  }

  public TDbSync_AdManager_Player_Framework(
    int frameworkID,
    int directoryID,
    int status,
    String lastChanged,
    String frameworkName,
    String frameworkPath,
    String frameworkDesc,
    int is_File)
  {
    this();
    this.frameworkID = frameworkID;
    setFrameworkIDIsSet(true);
    this.directoryID = directoryID;
    setDirectoryIDIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.frameworkName = frameworkName;
    this.frameworkPath = frameworkPath;
    this.frameworkDesc = frameworkDesc;
    this.is_File = is_File;
    setIs_FileIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_AdManager_Player_Framework(TDbSync_AdManager_Player_Framework other) {
    __isset_bitfield = other.__isset_bitfield;
    this.frameworkID = other.frameworkID;
    this.directoryID = other.directoryID;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    if (other.isSetFrameworkName()) {
      this.frameworkName = other.frameworkName;
    }
    if (other.isSetFrameworkPath()) {
      this.frameworkPath = other.frameworkPath;
    }
    if (other.isSetFrameworkDesc()) {
      this.frameworkDesc = other.frameworkDesc;
    }
    this.is_File = other.is_File;
  }

  public TDbSync_AdManager_Player_Framework deepCopy() {
    return new TDbSync_AdManager_Player_Framework(this);
  }

  @Override
  public void clear() {
    setFrameworkIDIsSet(false);
    this.frameworkID = 0;
    setDirectoryIDIsSet(false);
    this.directoryID = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    this.frameworkName = null;
    this.frameworkPath = null;
    this.frameworkDesc = null;
    setIs_FileIsSet(false);
    this.is_File = 0;
  }

  public int getFrameworkID() {
    return this.frameworkID;
  }

  public TDbSync_AdManager_Player_Framework setFrameworkID(int frameworkID) {
    this.frameworkID = frameworkID;
    setFrameworkIDIsSet(true);
    return this;
  }

  public void unsetFrameworkID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAMEWORKID_ISSET_ID);
  }

  /** Returns true if field frameworkID is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameworkID() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAMEWORKID_ISSET_ID);
  }

  public void setFrameworkIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAMEWORKID_ISSET_ID, value);
  }

  public int getDirectoryID() {
    return this.directoryID;
  }

  public TDbSync_AdManager_Player_Framework setDirectoryID(int directoryID) {
    this.directoryID = directoryID;
    setDirectoryIDIsSet(true);
    return this;
  }

  public void unsetDirectoryID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECTORYID_ISSET_ID);
  }

  /** Returns true if field directoryID is set (has been assigned a value) and false otherwise */
  public boolean isSetDirectoryID() {
    return EncodingUtils.testBit(__isset_bitfield, __DIRECTORYID_ISSET_ID);
  }

  public void setDirectoryIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECTORYID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_AdManager_Player_Framework setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_AdManager_Player_Framework setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public String getFrameworkName() {
    return this.frameworkName;
  }

  public TDbSync_AdManager_Player_Framework setFrameworkName(String frameworkName) {
    this.frameworkName = frameworkName;
    return this;
  }

  public void unsetFrameworkName() {
    this.frameworkName = null;
  }

  /** Returns true if field frameworkName is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameworkName() {
    return this.frameworkName != null;
  }

  public void setFrameworkNameIsSet(boolean value) {
    if (!value) {
      this.frameworkName = null;
    }
  }

  public String getFrameworkPath() {
    return this.frameworkPath;
  }

  public TDbSync_AdManager_Player_Framework setFrameworkPath(String frameworkPath) {
    this.frameworkPath = frameworkPath;
    return this;
  }

  public void unsetFrameworkPath() {
    this.frameworkPath = null;
  }

  /** Returns true if field frameworkPath is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameworkPath() {
    return this.frameworkPath != null;
  }

  public void setFrameworkPathIsSet(boolean value) {
    if (!value) {
      this.frameworkPath = null;
    }
  }

  public String getFrameworkDesc() {
    return this.frameworkDesc;
  }

  public TDbSync_AdManager_Player_Framework setFrameworkDesc(String frameworkDesc) {
    this.frameworkDesc = frameworkDesc;
    return this;
  }

  public void unsetFrameworkDesc() {
    this.frameworkDesc = null;
  }

  /** Returns true if field frameworkDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameworkDesc() {
    return this.frameworkDesc != null;
  }

  public void setFrameworkDescIsSet(boolean value) {
    if (!value) {
      this.frameworkDesc = null;
    }
  }

  public int getIs_File() {
    return this.is_File;
  }

  public TDbSync_AdManager_Player_Framework setIs_File(int is_File) {
    this.is_File = is_File;
    setIs_FileIsSet(true);
    return this;
  }

  public void unsetIs_File() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_FILE_ISSET_ID);
  }

  /** Returns true if field is_File is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_File() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_FILE_ISSET_ID);
  }

  public void setIs_FileIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_FILE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FRAMEWORK_ID:
      if (value == null) {
        unsetFrameworkID();
      } else {
        setFrameworkID((Integer)value);
      }
      break;

    case DIRECTORY_ID:
      if (value == null) {
        unsetDirectoryID();
      } else {
        setDirectoryID((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case FRAMEWORK_NAME:
      if (value == null) {
        unsetFrameworkName();
      } else {
        setFrameworkName((String)value);
      }
      break;

    case FRAMEWORK_PATH:
      if (value == null) {
        unsetFrameworkPath();
      } else {
        setFrameworkPath((String)value);
      }
      break;

    case FRAMEWORK_DESC:
      if (value == null) {
        unsetFrameworkDesc();
      } else {
        setFrameworkDesc((String)value);
      }
      break;

    case IS__FILE:
      if (value == null) {
        unsetIs_File();
      } else {
        setIs_File((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRAMEWORK_ID:
      return Integer.valueOf(getFrameworkID());

    case DIRECTORY_ID:
      return Integer.valueOf(getDirectoryID());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case FRAMEWORK_NAME:
      return getFrameworkName();

    case FRAMEWORK_PATH:
      return getFrameworkPath();

    case FRAMEWORK_DESC:
      return getFrameworkDesc();

    case IS__FILE:
      return Integer.valueOf(getIs_File());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRAMEWORK_ID:
      return isSetFrameworkID();
    case DIRECTORY_ID:
      return isSetDirectoryID();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case FRAMEWORK_NAME:
      return isSetFrameworkName();
    case FRAMEWORK_PATH:
      return isSetFrameworkPath();
    case FRAMEWORK_DESC:
      return isSetFrameworkDesc();
    case IS__FILE:
      return isSetIs_File();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_AdManager_Player_Framework)
      return this.equals((TDbSync_AdManager_Player_Framework)that);
    return false;
  }

  public boolean equals(TDbSync_AdManager_Player_Framework that) {
    if (that == null)
      return false;

    boolean this_present_frameworkID = true;
    boolean that_present_frameworkID = true;
    if (this_present_frameworkID || that_present_frameworkID) {
      if (!(this_present_frameworkID && that_present_frameworkID))
        return false;
      if (this.frameworkID != that.frameworkID)
        return false;
    }

    boolean this_present_directoryID = true;
    boolean that_present_directoryID = true;
    if (this_present_directoryID || that_present_directoryID) {
      if (!(this_present_directoryID && that_present_directoryID))
        return false;
      if (this.directoryID != that.directoryID)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_frameworkName = true && this.isSetFrameworkName();
    boolean that_present_frameworkName = true && that.isSetFrameworkName();
    if (this_present_frameworkName || that_present_frameworkName) {
      if (!(this_present_frameworkName && that_present_frameworkName))
        return false;
      if (!this.frameworkName.equals(that.frameworkName))
        return false;
    }

    boolean this_present_frameworkPath = true && this.isSetFrameworkPath();
    boolean that_present_frameworkPath = true && that.isSetFrameworkPath();
    if (this_present_frameworkPath || that_present_frameworkPath) {
      if (!(this_present_frameworkPath && that_present_frameworkPath))
        return false;
      if (!this.frameworkPath.equals(that.frameworkPath))
        return false;
    }

    boolean this_present_frameworkDesc = true && this.isSetFrameworkDesc();
    boolean that_present_frameworkDesc = true && that.isSetFrameworkDesc();
    if (this_present_frameworkDesc || that_present_frameworkDesc) {
      if (!(this_present_frameworkDesc && that_present_frameworkDesc))
        return false;
      if (!this.frameworkDesc.equals(that.frameworkDesc))
        return false;
    }

    boolean this_present_is_File = true;
    boolean that_present_is_File = true;
    if (this_present_is_File || that_present_is_File) {
      if (!(this_present_is_File && that_present_is_File))
        return false;
      if (this.is_File != that.is_File)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_AdManager_Player_Framework other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFrameworkID()).compareTo(other.isSetFrameworkID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameworkID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameworkID, other.frameworkID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirectoryID()).compareTo(other.isSetDirectoryID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirectoryID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.directoryID, other.directoryID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrameworkName()).compareTo(other.isSetFrameworkName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameworkName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameworkName, other.frameworkName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrameworkPath()).compareTo(other.isSetFrameworkPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameworkPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameworkPath, other.frameworkPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrameworkDesc()).compareTo(other.isSetFrameworkDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameworkDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameworkDesc, other.frameworkDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_File()).compareTo(other.isSetIs_File());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_File()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_File, other.is_File);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_AdManager_Player_Framework(");
    boolean first = true;

    sb.append("frameworkID:");
    sb.append(this.frameworkID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("directoryID:");
    sb.append(this.directoryID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frameworkName:");
    if (this.frameworkName == null) {
      sb.append("null");
    } else {
      sb.append(this.frameworkName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frameworkPath:");
    if (this.frameworkPath == null) {
      sb.append("null");
    } else {
      sb.append(this.frameworkPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frameworkDesc:");
    if (this.frameworkDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.frameworkDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_File:");
    sb.append(this.is_File);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'frameworkID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'directoryID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    if (frameworkName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'frameworkName' was not present! Struct: " + toString());
    }
    if (frameworkPath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'frameworkPath' was not present! Struct: " + toString());
    }
    if (frameworkDesc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'frameworkDesc' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_File' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_AdManager_Player_FrameworkStandardSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Player_FrameworkStandardScheme getScheme() {
      return new TDbSync_AdManager_Player_FrameworkStandardScheme();
    }
  }

  private static class TDbSync_AdManager_Player_FrameworkStandardScheme extends StandardScheme<TDbSync_AdManager_Player_Framework> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_AdManager_Player_Framework struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRAMEWORK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frameworkID = iprot.readI32();
              struct.setFrameworkIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIRECTORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.directoryID = iprot.readI32();
              struct.setDirectoryIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FRAMEWORK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.frameworkName = iprot.readString();
              struct.setFrameworkNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FRAMEWORK_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.frameworkPath = iprot.readString();
              struct.setFrameworkPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FRAMEWORK_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.frameworkDesc = iprot.readString();
              struct.setFrameworkDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS__FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.is_File = iprot.readI32();
              struct.setIs_FileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFrameworkID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'frameworkID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDirectoryID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'directoryID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIs_File()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_File' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_AdManager_Player_Framework struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FRAMEWORK_ID_FIELD_DESC);
      oprot.writeI32(struct.frameworkID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIRECTORY_ID_FIELD_DESC);
      oprot.writeI32(struct.directoryID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      if (struct.frameworkName != null) {
        oprot.writeFieldBegin(FRAMEWORK_NAME_FIELD_DESC);
        oprot.writeString(struct.frameworkName);
        oprot.writeFieldEnd();
      }
      if (struct.frameworkPath != null) {
        oprot.writeFieldBegin(FRAMEWORK_PATH_FIELD_DESC);
        oprot.writeString(struct.frameworkPath);
        oprot.writeFieldEnd();
      }
      if (struct.frameworkDesc != null) {
        oprot.writeFieldBegin(FRAMEWORK_DESC_FIELD_DESC);
        oprot.writeString(struct.frameworkDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS__FILE_FIELD_DESC);
      oprot.writeI32(struct.is_File);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_AdManager_Player_FrameworkTupleSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Player_FrameworkTupleScheme getScheme() {
      return new TDbSync_AdManager_Player_FrameworkTupleScheme();
    }
  }

  private static class TDbSync_AdManager_Player_FrameworkTupleScheme extends TupleScheme<TDbSync_AdManager_Player_Framework> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Player_Framework struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.frameworkID);
      oprot.writeI32(struct.directoryID);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeString(struct.frameworkName);
      oprot.writeString(struct.frameworkPath);
      oprot.writeString(struct.frameworkDesc);
      oprot.writeI32(struct.is_File);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Player_Framework struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.frameworkID = iprot.readI32();
      struct.setFrameworkIDIsSet(true);
      struct.directoryID = iprot.readI32();
      struct.setDirectoryIDIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.frameworkName = iprot.readString();
      struct.setFrameworkNameIsSet(true);
      struct.frameworkPath = iprot.readString();
      struct.setFrameworkPathIsSet(true);
      struct.frameworkDesc = iprot.readString();
      struct.setFrameworkDescIsSet(true);
      struct.is_File = iprot.readI32();
      struct.setIs_FileIsSet(true);
    }
  }

}

