/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.admanager;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_AdManager_Creative implements org.apache.thrift.TBase<TDbSync_AdManager_Creative, TDbSync_AdManager_Creative._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_AdManager_Creative> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_AdManager_Creative");

  private static final org.apache.thrift.protocol.TField CREATIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creativeID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HTML_CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("htmlContents", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CLICK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("clickUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MEDIA_FILE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaFileSource", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CAPTION_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("captionUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MEDIA_FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaFileUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CLICK_URL_VAR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clickUrlVarName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SIZE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeID", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PLAYER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("playerUrl", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ADV_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("advFeature", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField ALTER_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("alterImage", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField AD_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("adFormat", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField SERIES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("seriesID", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField PLAY_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("playVersion", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField FLASH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flashID", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField TRANSPARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("transparent", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField EC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecType", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField EC_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ecCount", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField HTML_PLAYER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("htmlPlayerUrl", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_AdManager_CreativeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_AdManager_CreativeTupleSchemeFactory());
  }

  public int creativeID; // required
  public int status; // required
  public String lastChanged; // required
  public int accountID; // required
  public String htmlContents; // required
  public int contentType; // required
  public String clickUrl; // required
  public int mediaFileSource; // required
  public String captionUrl; // required
  public String mediaFileUrl; // required
  public String clickUrlVarName; // required
  public int sizeID; // required
  public String playerUrl; // required
  public long advFeature; // required
  public String alterImage; // required
  public int adFormat; // required
  public int seriesID; // required
  public int playVersion; // required
  public String flashID; // required
  public int transparent; // required
  public int ecType; // required
  public int ecCount; // required
  public String htmlPlayerUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CREATIVE_ID((short)1, "creativeID"),
    STATUS((short)2, "status"),
    LAST_CHANGED((short)3, "lastChanged"),
    ACCOUNT_ID((short)4, "accountID"),
    HTML_CONTENTS((short)5, "htmlContents"),
    CONTENT_TYPE((short)6, "contentType"),
    CLICK_URL((short)7, "clickUrl"),
    MEDIA_FILE_SOURCE((short)8, "mediaFileSource"),
    CAPTION_URL((short)9, "captionUrl"),
    MEDIA_FILE_URL((short)10, "mediaFileUrl"),
    CLICK_URL_VAR_NAME((short)11, "clickUrlVarName"),
    SIZE_ID((short)12, "sizeID"),
    PLAYER_URL((short)13, "playerUrl"),
    ADV_FEATURE((short)14, "advFeature"),
    ALTER_IMAGE((short)15, "alterImage"),
    AD_FORMAT((short)16, "adFormat"),
    SERIES_ID((short)17, "seriesID"),
    PLAY_VERSION((short)18, "playVersion"),
    FLASH_ID((short)19, "flashID"),
    TRANSPARENT((short)20, "transparent"),
    EC_TYPE((short)21, "ecType"),
    EC_COUNT((short)22, "ecCount"),
    HTML_PLAYER_URL((short)23, "htmlPlayerUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREATIVE_ID
          return CREATIVE_ID;
        case 2: // STATUS
          return STATUS;
        case 3: // LAST_CHANGED
          return LAST_CHANGED;
        case 4: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 5: // HTML_CONTENTS
          return HTML_CONTENTS;
        case 6: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 7: // CLICK_URL
          return CLICK_URL;
        case 8: // MEDIA_FILE_SOURCE
          return MEDIA_FILE_SOURCE;
        case 9: // CAPTION_URL
          return CAPTION_URL;
        case 10: // MEDIA_FILE_URL
          return MEDIA_FILE_URL;
        case 11: // CLICK_URL_VAR_NAME
          return CLICK_URL_VAR_NAME;
        case 12: // SIZE_ID
          return SIZE_ID;
        case 13: // PLAYER_URL
          return PLAYER_URL;
        case 14: // ADV_FEATURE
          return ADV_FEATURE;
        case 15: // ALTER_IMAGE
          return ALTER_IMAGE;
        case 16: // AD_FORMAT
          return AD_FORMAT;
        case 17: // SERIES_ID
          return SERIES_ID;
        case 18: // PLAY_VERSION
          return PLAY_VERSION;
        case 19: // FLASH_ID
          return FLASH_ID;
        case 20: // TRANSPARENT
          return TRANSPARENT;
        case 21: // EC_TYPE
          return EC_TYPE;
        case 22: // EC_COUNT
          return EC_COUNT;
        case 23: // HTML_PLAYER_URL
          return HTML_PLAYER_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATIVEID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __ACCOUNTID_ISSET_ID = 2;
  private static final int __CONTENTTYPE_ISSET_ID = 3;
  private static final int __MEDIAFILESOURCE_ISSET_ID = 4;
  private static final int __SIZEID_ISSET_ID = 5;
  private static final int __ADVFEATURE_ISSET_ID = 6;
  private static final int __ADFORMAT_ISSET_ID = 7;
  private static final int __SERIESID_ISSET_ID = 8;
  private static final int __PLAYVERSION_ISSET_ID = 9;
  private static final int __TRANSPARENT_ISSET_ID = 10;
  private static final int __ECTYPE_ISSET_ID = 11;
  private static final int __ECCOUNT_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREATIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("creativeID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HTML_CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("htmlContents", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLICK_URL, new org.apache.thrift.meta_data.FieldMetaData("clickUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_FILE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("mediaFileSource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAPTION_URL, new org.apache.thrift.meta_data.FieldMetaData("captionUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("mediaFileUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLICK_URL_VAR_NAME, new org.apache.thrift.meta_data.FieldMetaData("clickUrlVarName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE_ID, new org.apache.thrift.meta_data.FieldMetaData("sizeID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAYER_URL, new org.apache.thrift.meta_data.FieldMetaData("playerUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADV_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("advFeature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALTER_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("alterImage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("adFormat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERIES_ID, new org.apache.thrift.meta_data.FieldMetaData("seriesID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAY_VERSION, new org.apache.thrift.meta_data.FieldMetaData("playVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLASH_ID, new org.apache.thrift.meta_data.FieldMetaData("flashID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSPARENT, new org.apache.thrift.meta_data.FieldMetaData("transparent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ecType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EC_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ecCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HTML_PLAYER_URL, new org.apache.thrift.meta_data.FieldMetaData("htmlPlayerUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_AdManager_Creative.class, metaDataMap);
  }

  public TDbSync_AdManager_Creative() {
  }

  public TDbSync_AdManager_Creative(
    int creativeID,
    int status,
    String lastChanged,
    int accountID,
    String htmlContents,
    int contentType,
    String clickUrl,
    int mediaFileSource,
    String captionUrl,
    String mediaFileUrl,
    String clickUrlVarName,
    int sizeID,
    String playerUrl,
    long advFeature,
    String alterImage,
    int adFormat,
    int seriesID,
    int playVersion,
    String flashID,
    int transparent,
    int ecType,
    int ecCount,
    String htmlPlayerUrl)
  {
    this();
    this.creativeID = creativeID;
    setCreativeIDIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.accountID = accountID;
    setAccountIDIsSet(true);
    this.htmlContents = htmlContents;
    this.contentType = contentType;
    setContentTypeIsSet(true);
    this.clickUrl = clickUrl;
    this.mediaFileSource = mediaFileSource;
    setMediaFileSourceIsSet(true);
    this.captionUrl = captionUrl;
    this.mediaFileUrl = mediaFileUrl;
    this.clickUrlVarName = clickUrlVarName;
    this.sizeID = sizeID;
    setSizeIDIsSet(true);
    this.playerUrl = playerUrl;
    this.advFeature = advFeature;
    setAdvFeatureIsSet(true);
    this.alterImage = alterImage;
    this.adFormat = adFormat;
    setAdFormatIsSet(true);
    this.seriesID = seriesID;
    setSeriesIDIsSet(true);
    this.playVersion = playVersion;
    setPlayVersionIsSet(true);
    this.flashID = flashID;
    this.transparent = transparent;
    setTransparentIsSet(true);
    this.ecType = ecType;
    setEcTypeIsSet(true);
    this.ecCount = ecCount;
    setEcCountIsSet(true);
    this.htmlPlayerUrl = htmlPlayerUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_AdManager_Creative(TDbSync_AdManager_Creative other) {
    __isset_bitfield = other.__isset_bitfield;
    this.creativeID = other.creativeID;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    this.accountID = other.accountID;
    if (other.isSetHtmlContents()) {
      this.htmlContents = other.htmlContents;
    }
    this.contentType = other.contentType;
    if (other.isSetClickUrl()) {
      this.clickUrl = other.clickUrl;
    }
    this.mediaFileSource = other.mediaFileSource;
    if (other.isSetCaptionUrl()) {
      this.captionUrl = other.captionUrl;
    }
    if (other.isSetMediaFileUrl()) {
      this.mediaFileUrl = other.mediaFileUrl;
    }
    if (other.isSetClickUrlVarName()) {
      this.clickUrlVarName = other.clickUrlVarName;
    }
    this.sizeID = other.sizeID;
    if (other.isSetPlayerUrl()) {
      this.playerUrl = other.playerUrl;
    }
    this.advFeature = other.advFeature;
    if (other.isSetAlterImage()) {
      this.alterImage = other.alterImage;
    }
    this.adFormat = other.adFormat;
    this.seriesID = other.seriesID;
    this.playVersion = other.playVersion;
    if (other.isSetFlashID()) {
      this.flashID = other.flashID;
    }
    this.transparent = other.transparent;
    this.ecType = other.ecType;
    this.ecCount = other.ecCount;
    if (other.isSetHtmlPlayerUrl()) {
      this.htmlPlayerUrl = other.htmlPlayerUrl;
    }
  }

  public TDbSync_AdManager_Creative deepCopy() {
    return new TDbSync_AdManager_Creative(this);
  }

  @Override
  public void clear() {
    setCreativeIDIsSet(false);
    this.creativeID = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    setAccountIDIsSet(false);
    this.accountID = 0;
    this.htmlContents = null;
    setContentTypeIsSet(false);
    this.contentType = 0;
    this.clickUrl = null;
    setMediaFileSourceIsSet(false);
    this.mediaFileSource = 0;
    this.captionUrl = null;
    this.mediaFileUrl = null;
    this.clickUrlVarName = null;
    setSizeIDIsSet(false);
    this.sizeID = 0;
    this.playerUrl = null;
    setAdvFeatureIsSet(false);
    this.advFeature = 0;
    this.alterImage = null;
    setAdFormatIsSet(false);
    this.adFormat = 0;
    setSeriesIDIsSet(false);
    this.seriesID = 0;
    setPlayVersionIsSet(false);
    this.playVersion = 0;
    this.flashID = null;
    setTransparentIsSet(false);
    this.transparent = 0;
    setEcTypeIsSet(false);
    this.ecType = 0;
    setEcCountIsSet(false);
    this.ecCount = 0;
    this.htmlPlayerUrl = null;
  }

  public int getCreativeID() {
    return this.creativeID;
  }

  public TDbSync_AdManager_Creative setCreativeID(int creativeID) {
    this.creativeID = creativeID;
    setCreativeIDIsSet(true);
    return this;
  }

  public void unsetCreativeID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIVEID_ISSET_ID);
  }

  /** Returns true if field creativeID is set (has been assigned a value) and false otherwise */
  public boolean isSetCreativeID() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIVEID_ISSET_ID);
  }

  public void setCreativeIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIVEID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_AdManager_Creative setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_AdManager_Creative setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public int getAccountID() {
    return this.accountID;
  }

  public TDbSync_AdManager_Creative setAccountID(int accountID) {
    this.accountID = accountID;
    setAccountIDIsSet(true);
    return this;
  }

  public void unsetAccountID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountID() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  public void setAccountIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
  }

  public String getHtmlContents() {
    return this.htmlContents;
  }

  public TDbSync_AdManager_Creative setHtmlContents(String htmlContents) {
    this.htmlContents = htmlContents;
    return this;
  }

  public void unsetHtmlContents() {
    this.htmlContents = null;
  }

  /** Returns true if field htmlContents is set (has been assigned a value) and false otherwise */
  public boolean isSetHtmlContents() {
    return this.htmlContents != null;
  }

  public void setHtmlContentsIsSet(boolean value) {
    if (!value) {
      this.htmlContents = null;
    }
  }

  public int getContentType() {
    return this.contentType;
  }

  public TDbSync_AdManager_Creative setContentType(int contentType) {
    this.contentType = contentType;
    setContentTypeIsSet(true);
    return this;
  }

  public void unsetContentType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTTYPE_ISSET_ID);
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTENTTYPE_ISSET_ID);
  }

  public void setContentTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTTYPE_ISSET_ID, value);
  }

  public String getClickUrl() {
    return this.clickUrl;
  }

  public TDbSync_AdManager_Creative setClickUrl(String clickUrl) {
    this.clickUrl = clickUrl;
    return this;
  }

  public void unsetClickUrl() {
    this.clickUrl = null;
  }

  /** Returns true if field clickUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetClickUrl() {
    return this.clickUrl != null;
  }

  public void setClickUrlIsSet(boolean value) {
    if (!value) {
      this.clickUrl = null;
    }
  }

  public int getMediaFileSource() {
    return this.mediaFileSource;
  }

  public TDbSync_AdManager_Creative setMediaFileSource(int mediaFileSource) {
    this.mediaFileSource = mediaFileSource;
    setMediaFileSourceIsSet(true);
    return this;
  }

  public void unsetMediaFileSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIAFILESOURCE_ISSET_ID);
  }

  /** Returns true if field mediaFileSource is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaFileSource() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIAFILESOURCE_ISSET_ID);
  }

  public void setMediaFileSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIAFILESOURCE_ISSET_ID, value);
  }

  public String getCaptionUrl() {
    return this.captionUrl;
  }

  public TDbSync_AdManager_Creative setCaptionUrl(String captionUrl) {
    this.captionUrl = captionUrl;
    return this;
  }

  public void unsetCaptionUrl() {
    this.captionUrl = null;
  }

  /** Returns true if field captionUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCaptionUrl() {
    return this.captionUrl != null;
  }

  public void setCaptionUrlIsSet(boolean value) {
    if (!value) {
      this.captionUrl = null;
    }
  }

  public String getMediaFileUrl() {
    return this.mediaFileUrl;
  }

  public TDbSync_AdManager_Creative setMediaFileUrl(String mediaFileUrl) {
    this.mediaFileUrl = mediaFileUrl;
    return this;
  }

  public void unsetMediaFileUrl() {
    this.mediaFileUrl = null;
  }

  /** Returns true if field mediaFileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaFileUrl() {
    return this.mediaFileUrl != null;
  }

  public void setMediaFileUrlIsSet(boolean value) {
    if (!value) {
      this.mediaFileUrl = null;
    }
  }

  public String getClickUrlVarName() {
    return this.clickUrlVarName;
  }

  public TDbSync_AdManager_Creative setClickUrlVarName(String clickUrlVarName) {
    this.clickUrlVarName = clickUrlVarName;
    return this;
  }

  public void unsetClickUrlVarName() {
    this.clickUrlVarName = null;
  }

  /** Returns true if field clickUrlVarName is set (has been assigned a value) and false otherwise */
  public boolean isSetClickUrlVarName() {
    return this.clickUrlVarName != null;
  }

  public void setClickUrlVarNameIsSet(boolean value) {
    if (!value) {
      this.clickUrlVarName = null;
    }
  }

  public int getSizeID() {
    return this.sizeID;
  }

  public TDbSync_AdManager_Creative setSizeID(int sizeID) {
    this.sizeID = sizeID;
    setSizeIDIsSet(true);
    return this;
  }

  public void unsetSizeID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZEID_ISSET_ID);
  }

  /** Returns true if field sizeID is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeID() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZEID_ISSET_ID);
  }

  public void setSizeIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZEID_ISSET_ID, value);
  }

  public String getPlayerUrl() {
    return this.playerUrl;
  }

  public TDbSync_AdManager_Creative setPlayerUrl(String playerUrl) {
    this.playerUrl = playerUrl;
    return this;
  }

  public void unsetPlayerUrl() {
    this.playerUrl = null;
  }

  /** Returns true if field playerUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerUrl() {
    return this.playerUrl != null;
  }

  public void setPlayerUrlIsSet(boolean value) {
    if (!value) {
      this.playerUrl = null;
    }
  }

  public long getAdvFeature() {
    return this.advFeature;
  }

  public TDbSync_AdManager_Creative setAdvFeature(long advFeature) {
    this.advFeature = advFeature;
    setAdvFeatureIsSet(true);
    return this;
  }

  public void unsetAdvFeature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADVFEATURE_ISSET_ID);
  }

  /** Returns true if field advFeature is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvFeature() {
    return EncodingUtils.testBit(__isset_bitfield, __ADVFEATURE_ISSET_ID);
  }

  public void setAdvFeatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADVFEATURE_ISSET_ID, value);
  }

  public String getAlterImage() {
    return this.alterImage;
  }

  public TDbSync_AdManager_Creative setAlterImage(String alterImage) {
    this.alterImage = alterImage;
    return this;
  }

  public void unsetAlterImage() {
    this.alterImage = null;
  }

  /** Returns true if field alterImage is set (has been assigned a value) and false otherwise */
  public boolean isSetAlterImage() {
    return this.alterImage != null;
  }

  public void setAlterImageIsSet(boolean value) {
    if (!value) {
      this.alterImage = null;
    }
  }

  public int getAdFormat() {
    return this.adFormat;
  }

  public TDbSync_AdManager_Creative setAdFormat(int adFormat) {
    this.adFormat = adFormat;
    setAdFormatIsSet(true);
    return this;
  }

  public void unsetAdFormat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADFORMAT_ISSET_ID);
  }

  /** Returns true if field adFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetAdFormat() {
    return EncodingUtils.testBit(__isset_bitfield, __ADFORMAT_ISSET_ID);
  }

  public void setAdFormatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADFORMAT_ISSET_ID, value);
  }

  public int getSeriesID() {
    return this.seriesID;
  }

  public TDbSync_AdManager_Creative setSeriesID(int seriesID) {
    this.seriesID = seriesID;
    setSeriesIDIsSet(true);
    return this;
  }

  public void unsetSeriesID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIESID_ISSET_ID);
  }

  /** Returns true if field seriesID is set (has been assigned a value) and false otherwise */
  public boolean isSetSeriesID() {
    return EncodingUtils.testBit(__isset_bitfield, __SERIESID_ISSET_ID);
  }

  public void setSeriesIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIESID_ISSET_ID, value);
  }

  public int getPlayVersion() {
    return this.playVersion;
  }

  public TDbSync_AdManager_Creative setPlayVersion(int playVersion) {
    this.playVersion = playVersion;
    setPlayVersionIsSet(true);
    return this;
  }

  public void unsetPlayVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYVERSION_ISSET_ID);
  }

  /** Returns true if field playVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PLAYVERSION_ISSET_ID);
  }

  public void setPlayVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYVERSION_ISSET_ID, value);
  }

  public String getFlashID() {
    return this.flashID;
  }

  public TDbSync_AdManager_Creative setFlashID(String flashID) {
    this.flashID = flashID;
    return this;
  }

  public void unsetFlashID() {
    this.flashID = null;
  }

  /** Returns true if field flashID is set (has been assigned a value) and false otherwise */
  public boolean isSetFlashID() {
    return this.flashID != null;
  }

  public void setFlashIDIsSet(boolean value) {
    if (!value) {
      this.flashID = null;
    }
  }

  public int getTransparent() {
    return this.transparent;
  }

  public TDbSync_AdManager_Creative setTransparent(int transparent) {
    this.transparent = transparent;
    setTransparentIsSet(true);
    return this;
  }

  public void unsetTransparent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSPARENT_ISSET_ID);
  }

  /** Returns true if field transparent is set (has been assigned a value) and false otherwise */
  public boolean isSetTransparent() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSPARENT_ISSET_ID);
  }

  public void setTransparentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSPARENT_ISSET_ID, value);
  }

  public int getEcType() {
    return this.ecType;
  }

  public TDbSync_AdManager_Creative setEcType(int ecType) {
    this.ecType = ecType;
    setEcTypeIsSet(true);
    return this;
  }

  public void unsetEcType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ECTYPE_ISSET_ID);
  }

  /** Returns true if field ecType is set (has been assigned a value) and false otherwise */
  public boolean isSetEcType() {
    return EncodingUtils.testBit(__isset_bitfield, __ECTYPE_ISSET_ID);
  }

  public void setEcTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ECTYPE_ISSET_ID, value);
  }

  public int getEcCount() {
    return this.ecCount;
  }

  public TDbSync_AdManager_Creative setEcCount(int ecCount) {
    this.ecCount = ecCount;
    setEcCountIsSet(true);
    return this;
  }

  public void unsetEcCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ECCOUNT_ISSET_ID);
  }

  /** Returns true if field ecCount is set (has been assigned a value) and false otherwise */
  public boolean isSetEcCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ECCOUNT_ISSET_ID);
  }

  public void setEcCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ECCOUNT_ISSET_ID, value);
  }

  public String getHtmlPlayerUrl() {
    return this.htmlPlayerUrl;
  }

  public TDbSync_AdManager_Creative setHtmlPlayerUrl(String htmlPlayerUrl) {
    this.htmlPlayerUrl = htmlPlayerUrl;
    return this;
  }

  public void unsetHtmlPlayerUrl() {
    this.htmlPlayerUrl = null;
  }

  /** Returns true if field htmlPlayerUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetHtmlPlayerUrl() {
    return this.htmlPlayerUrl != null;
  }

  public void setHtmlPlayerUrlIsSet(boolean value) {
    if (!value) {
      this.htmlPlayerUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CREATIVE_ID:
      if (value == null) {
        unsetCreativeID();
      } else {
        setCreativeID((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountID();
      } else {
        setAccountID((Integer)value);
      }
      break;

    case HTML_CONTENTS:
      if (value == null) {
        unsetHtmlContents();
      } else {
        setHtmlContents((String)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((Integer)value);
      }
      break;

    case CLICK_URL:
      if (value == null) {
        unsetClickUrl();
      } else {
        setClickUrl((String)value);
      }
      break;

    case MEDIA_FILE_SOURCE:
      if (value == null) {
        unsetMediaFileSource();
      } else {
        setMediaFileSource((Integer)value);
      }
      break;

    case CAPTION_URL:
      if (value == null) {
        unsetCaptionUrl();
      } else {
        setCaptionUrl((String)value);
      }
      break;

    case MEDIA_FILE_URL:
      if (value == null) {
        unsetMediaFileUrl();
      } else {
        setMediaFileUrl((String)value);
      }
      break;

    case CLICK_URL_VAR_NAME:
      if (value == null) {
        unsetClickUrlVarName();
      } else {
        setClickUrlVarName((String)value);
      }
      break;

    case SIZE_ID:
      if (value == null) {
        unsetSizeID();
      } else {
        setSizeID((Integer)value);
      }
      break;

    case PLAYER_URL:
      if (value == null) {
        unsetPlayerUrl();
      } else {
        setPlayerUrl((String)value);
      }
      break;

    case ADV_FEATURE:
      if (value == null) {
        unsetAdvFeature();
      } else {
        setAdvFeature((Long)value);
      }
      break;

    case ALTER_IMAGE:
      if (value == null) {
        unsetAlterImage();
      } else {
        setAlterImage((String)value);
      }
      break;

    case AD_FORMAT:
      if (value == null) {
        unsetAdFormat();
      } else {
        setAdFormat((Integer)value);
      }
      break;

    case SERIES_ID:
      if (value == null) {
        unsetSeriesID();
      } else {
        setSeriesID((Integer)value);
      }
      break;

    case PLAY_VERSION:
      if (value == null) {
        unsetPlayVersion();
      } else {
        setPlayVersion((Integer)value);
      }
      break;

    case FLASH_ID:
      if (value == null) {
        unsetFlashID();
      } else {
        setFlashID((String)value);
      }
      break;

    case TRANSPARENT:
      if (value == null) {
        unsetTransparent();
      } else {
        setTransparent((Integer)value);
      }
      break;

    case EC_TYPE:
      if (value == null) {
        unsetEcType();
      } else {
        setEcType((Integer)value);
      }
      break;

    case EC_COUNT:
      if (value == null) {
        unsetEcCount();
      } else {
        setEcCount((Integer)value);
      }
      break;

    case HTML_PLAYER_URL:
      if (value == null) {
        unsetHtmlPlayerUrl();
      } else {
        setHtmlPlayerUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CREATIVE_ID:
      return Integer.valueOf(getCreativeID());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case ACCOUNT_ID:
      return Integer.valueOf(getAccountID());

    case HTML_CONTENTS:
      return getHtmlContents();

    case CONTENT_TYPE:
      return Integer.valueOf(getContentType());

    case CLICK_URL:
      return getClickUrl();

    case MEDIA_FILE_SOURCE:
      return Integer.valueOf(getMediaFileSource());

    case CAPTION_URL:
      return getCaptionUrl();

    case MEDIA_FILE_URL:
      return getMediaFileUrl();

    case CLICK_URL_VAR_NAME:
      return getClickUrlVarName();

    case SIZE_ID:
      return Integer.valueOf(getSizeID());

    case PLAYER_URL:
      return getPlayerUrl();

    case ADV_FEATURE:
      return Long.valueOf(getAdvFeature());

    case ALTER_IMAGE:
      return getAlterImage();

    case AD_FORMAT:
      return Integer.valueOf(getAdFormat());

    case SERIES_ID:
      return Integer.valueOf(getSeriesID());

    case PLAY_VERSION:
      return Integer.valueOf(getPlayVersion());

    case FLASH_ID:
      return getFlashID();

    case TRANSPARENT:
      return Integer.valueOf(getTransparent());

    case EC_TYPE:
      return Integer.valueOf(getEcType());

    case EC_COUNT:
      return Integer.valueOf(getEcCount());

    case HTML_PLAYER_URL:
      return getHtmlPlayerUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CREATIVE_ID:
      return isSetCreativeID();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case ACCOUNT_ID:
      return isSetAccountID();
    case HTML_CONTENTS:
      return isSetHtmlContents();
    case CONTENT_TYPE:
      return isSetContentType();
    case CLICK_URL:
      return isSetClickUrl();
    case MEDIA_FILE_SOURCE:
      return isSetMediaFileSource();
    case CAPTION_URL:
      return isSetCaptionUrl();
    case MEDIA_FILE_URL:
      return isSetMediaFileUrl();
    case CLICK_URL_VAR_NAME:
      return isSetClickUrlVarName();
    case SIZE_ID:
      return isSetSizeID();
    case PLAYER_URL:
      return isSetPlayerUrl();
    case ADV_FEATURE:
      return isSetAdvFeature();
    case ALTER_IMAGE:
      return isSetAlterImage();
    case AD_FORMAT:
      return isSetAdFormat();
    case SERIES_ID:
      return isSetSeriesID();
    case PLAY_VERSION:
      return isSetPlayVersion();
    case FLASH_ID:
      return isSetFlashID();
    case TRANSPARENT:
      return isSetTransparent();
    case EC_TYPE:
      return isSetEcType();
    case EC_COUNT:
      return isSetEcCount();
    case HTML_PLAYER_URL:
      return isSetHtmlPlayerUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_AdManager_Creative)
      return this.equals((TDbSync_AdManager_Creative)that);
    return false;
  }

  public boolean equals(TDbSync_AdManager_Creative that) {
    if (that == null)
      return false;

    boolean this_present_creativeID = true;
    boolean that_present_creativeID = true;
    if (this_present_creativeID || that_present_creativeID) {
      if (!(this_present_creativeID && that_present_creativeID))
        return false;
      if (this.creativeID != that.creativeID)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_accountID = true;
    boolean that_present_accountID = true;
    if (this_present_accountID || that_present_accountID) {
      if (!(this_present_accountID && that_present_accountID))
        return false;
      if (this.accountID != that.accountID)
        return false;
    }

    boolean this_present_htmlContents = true && this.isSetHtmlContents();
    boolean that_present_htmlContents = true && that.isSetHtmlContents();
    if (this_present_htmlContents || that_present_htmlContents) {
      if (!(this_present_htmlContents && that_present_htmlContents))
        return false;
      if (!this.htmlContents.equals(that.htmlContents))
        return false;
    }

    boolean this_present_contentType = true;
    boolean that_present_contentType = true;
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (this.contentType != that.contentType)
        return false;
    }

    boolean this_present_clickUrl = true && this.isSetClickUrl();
    boolean that_present_clickUrl = true && that.isSetClickUrl();
    if (this_present_clickUrl || that_present_clickUrl) {
      if (!(this_present_clickUrl && that_present_clickUrl))
        return false;
      if (!this.clickUrl.equals(that.clickUrl))
        return false;
    }

    boolean this_present_mediaFileSource = true;
    boolean that_present_mediaFileSource = true;
    if (this_present_mediaFileSource || that_present_mediaFileSource) {
      if (!(this_present_mediaFileSource && that_present_mediaFileSource))
        return false;
      if (this.mediaFileSource != that.mediaFileSource)
        return false;
    }

    boolean this_present_captionUrl = true && this.isSetCaptionUrl();
    boolean that_present_captionUrl = true && that.isSetCaptionUrl();
    if (this_present_captionUrl || that_present_captionUrl) {
      if (!(this_present_captionUrl && that_present_captionUrl))
        return false;
      if (!this.captionUrl.equals(that.captionUrl))
        return false;
    }

    boolean this_present_mediaFileUrl = true && this.isSetMediaFileUrl();
    boolean that_present_mediaFileUrl = true && that.isSetMediaFileUrl();
    if (this_present_mediaFileUrl || that_present_mediaFileUrl) {
      if (!(this_present_mediaFileUrl && that_present_mediaFileUrl))
        return false;
      if (!this.mediaFileUrl.equals(that.mediaFileUrl))
        return false;
    }

    boolean this_present_clickUrlVarName = true && this.isSetClickUrlVarName();
    boolean that_present_clickUrlVarName = true && that.isSetClickUrlVarName();
    if (this_present_clickUrlVarName || that_present_clickUrlVarName) {
      if (!(this_present_clickUrlVarName && that_present_clickUrlVarName))
        return false;
      if (!this.clickUrlVarName.equals(that.clickUrlVarName))
        return false;
    }

    boolean this_present_sizeID = true;
    boolean that_present_sizeID = true;
    if (this_present_sizeID || that_present_sizeID) {
      if (!(this_present_sizeID && that_present_sizeID))
        return false;
      if (this.sizeID != that.sizeID)
        return false;
    }

    boolean this_present_playerUrl = true && this.isSetPlayerUrl();
    boolean that_present_playerUrl = true && that.isSetPlayerUrl();
    if (this_present_playerUrl || that_present_playerUrl) {
      if (!(this_present_playerUrl && that_present_playerUrl))
        return false;
      if (!this.playerUrl.equals(that.playerUrl))
        return false;
    }

    boolean this_present_advFeature = true;
    boolean that_present_advFeature = true;
    if (this_present_advFeature || that_present_advFeature) {
      if (!(this_present_advFeature && that_present_advFeature))
        return false;
      if (this.advFeature != that.advFeature)
        return false;
    }

    boolean this_present_alterImage = true && this.isSetAlterImage();
    boolean that_present_alterImage = true && that.isSetAlterImage();
    if (this_present_alterImage || that_present_alterImage) {
      if (!(this_present_alterImage && that_present_alterImage))
        return false;
      if (!this.alterImage.equals(that.alterImage))
        return false;
    }

    boolean this_present_adFormat = true;
    boolean that_present_adFormat = true;
    if (this_present_adFormat || that_present_adFormat) {
      if (!(this_present_adFormat && that_present_adFormat))
        return false;
      if (this.adFormat != that.adFormat)
        return false;
    }

    boolean this_present_seriesID = true;
    boolean that_present_seriesID = true;
    if (this_present_seriesID || that_present_seriesID) {
      if (!(this_present_seriesID && that_present_seriesID))
        return false;
      if (this.seriesID != that.seriesID)
        return false;
    }

    boolean this_present_playVersion = true;
    boolean that_present_playVersion = true;
    if (this_present_playVersion || that_present_playVersion) {
      if (!(this_present_playVersion && that_present_playVersion))
        return false;
      if (this.playVersion != that.playVersion)
        return false;
    }

    boolean this_present_flashID = true && this.isSetFlashID();
    boolean that_present_flashID = true && that.isSetFlashID();
    if (this_present_flashID || that_present_flashID) {
      if (!(this_present_flashID && that_present_flashID))
        return false;
      if (!this.flashID.equals(that.flashID))
        return false;
    }

    boolean this_present_transparent = true;
    boolean that_present_transparent = true;
    if (this_present_transparent || that_present_transparent) {
      if (!(this_present_transparent && that_present_transparent))
        return false;
      if (this.transparent != that.transparent)
        return false;
    }

    boolean this_present_ecType = true;
    boolean that_present_ecType = true;
    if (this_present_ecType || that_present_ecType) {
      if (!(this_present_ecType && that_present_ecType))
        return false;
      if (this.ecType != that.ecType)
        return false;
    }

    boolean this_present_ecCount = true;
    boolean that_present_ecCount = true;
    if (this_present_ecCount || that_present_ecCount) {
      if (!(this_present_ecCount && that_present_ecCount))
        return false;
      if (this.ecCount != that.ecCount)
        return false;
    }

    boolean this_present_htmlPlayerUrl = true && this.isSetHtmlPlayerUrl();
    boolean that_present_htmlPlayerUrl = true && that.isSetHtmlPlayerUrl();
    if (this_present_htmlPlayerUrl || that_present_htmlPlayerUrl) {
      if (!(this_present_htmlPlayerUrl && that_present_htmlPlayerUrl))
        return false;
      if (!this.htmlPlayerUrl.equals(that.htmlPlayerUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_AdManager_Creative other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCreativeID()).compareTo(other.isSetCreativeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreativeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creativeID, other.creativeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHtmlContents()).compareTo(other.isSetHtmlContents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHtmlContents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.htmlContents, other.htmlContents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, other.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickUrl()).compareTo(other.isSetClickUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickUrl, other.clickUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaFileSource()).compareTo(other.isSetMediaFileSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaFileSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaFileSource, other.mediaFileSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaptionUrl()).compareTo(other.isSetCaptionUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaptionUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.captionUrl, other.captionUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaFileUrl()).compareTo(other.isSetMediaFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaFileUrl, other.mediaFileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickUrlVarName()).compareTo(other.isSetClickUrlVarName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickUrlVarName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickUrlVarName, other.clickUrlVarName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSizeID()).compareTo(other.isSetSizeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeID, other.sizeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerUrl()).compareTo(other.isSetPlayerUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerUrl, other.playerUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvFeature()).compareTo(other.isSetAdvFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advFeature, other.advFeature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlterImage()).compareTo(other.isSetAlterImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlterImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alterImage, other.alterImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdFormat()).compareTo(other.isSetAdFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adFormat, other.adFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeriesID()).compareTo(other.isSetSeriesID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeriesID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seriesID, other.seriesID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayVersion()).compareTo(other.isSetPlayVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playVersion, other.playVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlashID()).compareTo(other.isSetFlashID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlashID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flashID, other.flashID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransparent()).compareTo(other.isSetTransparent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransparent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transparent, other.transparent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcType()).compareTo(other.isSetEcType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecType, other.ecType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcCount()).compareTo(other.isSetEcCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecCount, other.ecCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHtmlPlayerUrl()).compareTo(other.isSetHtmlPlayerUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHtmlPlayerUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.htmlPlayerUrl, other.htmlPlayerUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_AdManager_Creative(");
    boolean first = true;

    sb.append("creativeID:");
    sb.append(this.creativeID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountID:");
    sb.append(this.accountID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("htmlContents:");
    if (this.htmlContents == null) {
      sb.append("null");
    } else {
      sb.append(this.htmlContents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentType:");
    sb.append(this.contentType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clickUrl:");
    if (this.clickUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.clickUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaFileSource:");
    sb.append(this.mediaFileSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("captionUrl:");
    if (this.captionUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.captionUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaFileUrl:");
    if (this.mediaFileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.mediaFileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clickUrlVarName:");
    if (this.clickUrlVarName == null) {
      sb.append("null");
    } else {
      sb.append(this.clickUrlVarName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sizeID:");
    sb.append(this.sizeID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerUrl:");
    if (this.playerUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.playerUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("advFeature:");
    sb.append(this.advFeature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alterImage:");
    if (this.alterImage == null) {
      sb.append("null");
    } else {
      sb.append(this.alterImage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adFormat:");
    sb.append(this.adFormat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seriesID:");
    sb.append(this.seriesID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playVersion:");
    sb.append(this.playVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flashID:");
    if (this.flashID == null) {
      sb.append("null");
    } else {
      sb.append(this.flashID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transparent:");
    sb.append(this.transparent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecType:");
    sb.append(this.ecType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecCount:");
    sb.append(this.ecCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("htmlPlayerUrl:");
    if (this.htmlPlayerUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.htmlPlayerUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'creativeID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'accountID' because it's a primitive and you chose the non-beans generator.
    if (htmlContents == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'htmlContents' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'contentType' because it's a primitive and you chose the non-beans generator.
    if (clickUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clickUrl' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'mediaFileSource' because it's a primitive and you chose the non-beans generator.
    if (captionUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'captionUrl' was not present! Struct: " + toString());
    }
    if (mediaFileUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaFileUrl' was not present! Struct: " + toString());
    }
    if (clickUrlVarName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clickUrlVarName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sizeID' because it's a primitive and you chose the non-beans generator.
    if (playerUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'playerUrl' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'advFeature' because it's a primitive and you chose the non-beans generator.
    if (alterImage == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'alterImage' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'adFormat' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'seriesID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'playVersion' because it's a primitive and you chose the non-beans generator.
    if (flashID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'flashID' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'transparent' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ecType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ecCount' because it's a primitive and you chose the non-beans generator.
    if (htmlPlayerUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'htmlPlayerUrl' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_AdManager_CreativeStandardSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_CreativeStandardScheme getScheme() {
      return new TDbSync_AdManager_CreativeStandardScheme();
    }
  }

  private static class TDbSync_AdManager_CreativeStandardScheme extends StandardScheme<TDbSync_AdManager_Creative> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_AdManager_Creative struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CREATIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creativeID = iprot.readI32();
              struct.setCreativeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountID = iprot.readI32();
              struct.setAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HTML_CONTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.htmlContents = iprot.readString();
              struct.setHtmlContentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contentType = iprot.readI32();
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLICK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clickUrl = iprot.readString();
              struct.setClickUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEDIA_FILE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaFileSource = iprot.readI32();
              struct.setMediaFileSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CAPTION_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.captionUrl = iprot.readString();
              struct.setCaptionUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MEDIA_FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaFileUrl = iprot.readString();
              struct.setMediaFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CLICK_URL_VAR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clickUrlVarName = iprot.readString();
              struct.setClickUrlVarNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SIZE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sizeID = iprot.readI32();
              struct.setSizeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLAYER_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playerUrl = iprot.readString();
              struct.setPlayerUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ADV_FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.advFeature = iprot.readI64();
              struct.setAdvFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ALTER_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alterImage = iprot.readString();
              struct.setAlterImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // AD_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adFormat = iprot.readI32();
              struct.setAdFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SERIES_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seriesID = iprot.readI32();
              struct.setSeriesIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PLAY_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.playVersion = iprot.readI32();
              struct.setPlayVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FLASH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flashID = iprot.readString();
              struct.setFlashIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TRANSPARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transparent = iprot.readI32();
              struct.setTransparentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ecType = iprot.readI32();
              struct.setEcTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // EC_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ecCount = iprot.readI32();
              struct.setEcCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // HTML_PLAYER_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.htmlPlayerUrl = iprot.readString();
              struct.setHtmlPlayerUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCreativeID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'creativeID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAccountID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetContentType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'contentType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMediaFileSource()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaFileSource' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSizeID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sizeID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAdvFeature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'advFeature' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAdFormat()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'adFormat' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSeriesID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'seriesID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPlayVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'playVersion' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTransparent()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transparent' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEcType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ecType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEcCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ecCount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_AdManager_Creative struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CREATIVE_ID_FIELD_DESC);
      oprot.writeI32(struct.creativeID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
      oprot.writeI32(struct.accountID);
      oprot.writeFieldEnd();
      if (struct.htmlContents != null) {
        oprot.writeFieldBegin(HTML_CONTENTS_FIELD_DESC);
        oprot.writeString(struct.htmlContents);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.contentType);
      oprot.writeFieldEnd();
      if (struct.clickUrl != null) {
        oprot.writeFieldBegin(CLICK_URL_FIELD_DESC);
        oprot.writeString(struct.clickUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEDIA_FILE_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.mediaFileSource);
      oprot.writeFieldEnd();
      if (struct.captionUrl != null) {
        oprot.writeFieldBegin(CAPTION_URL_FIELD_DESC);
        oprot.writeString(struct.captionUrl);
        oprot.writeFieldEnd();
      }
      if (struct.mediaFileUrl != null) {
        oprot.writeFieldBegin(MEDIA_FILE_URL_FIELD_DESC);
        oprot.writeString(struct.mediaFileUrl);
        oprot.writeFieldEnd();
      }
      if (struct.clickUrlVarName != null) {
        oprot.writeFieldBegin(CLICK_URL_VAR_NAME_FIELD_DESC);
        oprot.writeString(struct.clickUrlVarName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_ID_FIELD_DESC);
      oprot.writeI32(struct.sizeID);
      oprot.writeFieldEnd();
      if (struct.playerUrl != null) {
        oprot.writeFieldBegin(PLAYER_URL_FIELD_DESC);
        oprot.writeString(struct.playerUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ADV_FEATURE_FIELD_DESC);
      oprot.writeI64(struct.advFeature);
      oprot.writeFieldEnd();
      if (struct.alterImage != null) {
        oprot.writeFieldBegin(ALTER_IMAGE_FIELD_DESC);
        oprot.writeString(struct.alterImage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AD_FORMAT_FIELD_DESC);
      oprot.writeI32(struct.adFormat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERIES_ID_FIELD_DESC);
      oprot.writeI32(struct.seriesID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAY_VERSION_FIELD_DESC);
      oprot.writeI32(struct.playVersion);
      oprot.writeFieldEnd();
      if (struct.flashID != null) {
        oprot.writeFieldBegin(FLASH_ID_FIELD_DESC);
        oprot.writeString(struct.flashID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRANSPARENT_FIELD_DESC);
      oprot.writeI32(struct.transparent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EC_TYPE_FIELD_DESC);
      oprot.writeI32(struct.ecType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EC_COUNT_FIELD_DESC);
      oprot.writeI32(struct.ecCount);
      oprot.writeFieldEnd();
      if (struct.htmlPlayerUrl != null) {
        oprot.writeFieldBegin(HTML_PLAYER_URL_FIELD_DESC);
        oprot.writeString(struct.htmlPlayerUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_AdManager_CreativeTupleSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_CreativeTupleScheme getScheme() {
      return new TDbSync_AdManager_CreativeTupleScheme();
    }
  }

  private static class TDbSync_AdManager_CreativeTupleScheme extends TupleScheme<TDbSync_AdManager_Creative> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Creative struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.creativeID);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeI32(struct.accountID);
      oprot.writeString(struct.htmlContents);
      oprot.writeI32(struct.contentType);
      oprot.writeString(struct.clickUrl);
      oprot.writeI32(struct.mediaFileSource);
      oprot.writeString(struct.captionUrl);
      oprot.writeString(struct.mediaFileUrl);
      oprot.writeString(struct.clickUrlVarName);
      oprot.writeI32(struct.sizeID);
      oprot.writeString(struct.playerUrl);
      oprot.writeI64(struct.advFeature);
      oprot.writeString(struct.alterImage);
      oprot.writeI32(struct.adFormat);
      oprot.writeI32(struct.seriesID);
      oprot.writeI32(struct.playVersion);
      oprot.writeString(struct.flashID);
      oprot.writeI32(struct.transparent);
      oprot.writeI32(struct.ecType);
      oprot.writeI32(struct.ecCount);
      oprot.writeString(struct.htmlPlayerUrl);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Creative struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.creativeID = iprot.readI32();
      struct.setCreativeIDIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.accountID = iprot.readI32();
      struct.setAccountIDIsSet(true);
      struct.htmlContents = iprot.readString();
      struct.setHtmlContentsIsSet(true);
      struct.contentType = iprot.readI32();
      struct.setContentTypeIsSet(true);
      struct.clickUrl = iprot.readString();
      struct.setClickUrlIsSet(true);
      struct.mediaFileSource = iprot.readI32();
      struct.setMediaFileSourceIsSet(true);
      struct.captionUrl = iprot.readString();
      struct.setCaptionUrlIsSet(true);
      struct.mediaFileUrl = iprot.readString();
      struct.setMediaFileUrlIsSet(true);
      struct.clickUrlVarName = iprot.readString();
      struct.setClickUrlVarNameIsSet(true);
      struct.sizeID = iprot.readI32();
      struct.setSizeIDIsSet(true);
      struct.playerUrl = iprot.readString();
      struct.setPlayerUrlIsSet(true);
      struct.advFeature = iprot.readI64();
      struct.setAdvFeatureIsSet(true);
      struct.alterImage = iprot.readString();
      struct.setAlterImageIsSet(true);
      struct.adFormat = iprot.readI32();
      struct.setAdFormatIsSet(true);
      struct.seriesID = iprot.readI32();
      struct.setSeriesIDIsSet(true);
      struct.playVersion = iprot.readI32();
      struct.setPlayVersionIsSet(true);
      struct.flashID = iprot.readString();
      struct.setFlashIDIsSet(true);
      struct.transparent = iprot.readI32();
      struct.setTransparentIsSet(true);
      struct.ecType = iprot.readI32();
      struct.setEcTypeIsSet(true);
      struct.ecCount = iprot.readI32();
      struct.setEcCountIsSet(true);
      struct.htmlPlayerUrl = iprot.readString();
      struct.setHtmlPlayerUrlIsSet(true);
    }
  }

}

