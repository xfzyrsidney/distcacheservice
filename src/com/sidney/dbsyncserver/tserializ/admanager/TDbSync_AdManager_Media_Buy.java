/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.admanager;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_AdManager_Media_Buy implements org.apache.thrift.TBase<TDbSync_AdManager_Media_Buy, TDbSync_AdManager_Media_Buy._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_AdManager_Media_Buy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_AdManager_Media_Buy");

  private static final org.apache.thrift.protocol.TField MEDIA_BUY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaBuyID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campaignID", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CHARGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField UMBRELLA_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("umbrellaRate", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("network", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("budget", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PACING_DISABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("pacingDisabled", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CAP_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("capLength", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField CAP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("capCount", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MAX_DAILY_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDailyHit", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField GEO_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("geoLocation", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField BUY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("buyType", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField PUB_CHARGE_TYPE_FOR_CPA_FIELD_DESC = new org.apache.thrift.protocol.TField("pubChargeTypeForCPA", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField ADV_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("advFeature", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField DAILY_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyHit", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CHARGEABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeable", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField THIRD_PARTY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyParam", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField THIRD_PARTY_PUB_TRACKING_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyPubTracking", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField SURVEY_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("surveyPercent", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField MINUTE_BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("minuteBudget", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField SPECIFIC_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField("specificBuy", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField SURVEY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("surveyID", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField SURVEY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("surveyType", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField FREQ_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("freqTarget", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("rules", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField NIELSEN_TRACKING_FIELD_DESC = new org.apache.thrift.protocol.TField("nielsenTracking", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField FLOW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("flowType", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField PAYMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("payment", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField IS_AFPSOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("isAFPSource", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField NEGATIVE_CAMPIAGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("negative_campiagn_id", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField SITE_TRACKING_ID_FOR_CPA_FIELD_DESC = new org.apache.thrift.protocol.TField("siteTrackingIdForCpa", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField PUB_DEFAULT_RATE_FOR_CPA_FIELD_DESC = new org.apache.thrift.protocol.TField("pubDefaultRateForCpa", org.apache.thrift.protocol.TType.I32, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_AdManager_Media_BuyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_AdManager_Media_BuyTupleSchemeFactory());
  }

  public int mediaBuyID; // required
  public int status; // required
  public String lastChanged; // required
  public int campaignID; // required
  public int version; // required
  public int accountID; // required
  public int chargeType; // required
  public int rate; // required
  public int umbrellaRate; // required
  public int network; // required
  public String startTime; // required
  public String endTime; // required
  public String budget; // required
  public int pacingDisabled; // required
  public int capLength; // required
  public int capCount; // required
  public String maxDailyHit; // required
  public String geoLocation; // required
  public String balance; // required
  public int buyType; // required
  public int pubChargeTypeForCPA; // required
  public long advFeature; // required
  public String dailyHit; // required
  public int chargeable; // required
  public String thirdPartyParam; // required
  public String thirdPartyPubTracking; // required
  public int surveyPercent; // required
  public int priority; // required
  public String minuteBudget; // required
  public int specificBuy; // required
  public int surveyID; // required
  public int surveyType; // required
  public int freqTarget; // required
  public String rules; // required
  public String nielsenTracking; // required
  public int flowType; // required
  public int payment; // required
  public int isAFPSource; // required
  public String negative_campiagn_id; // required
  public int siteTrackingIdForCpa; // required
  public int pubDefaultRateForCpa; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEDIA_BUY_ID((short)1, "mediaBuyID"),
    STATUS((short)2, "status"),
    LAST_CHANGED((short)3, "lastChanged"),
    CAMPAIGN_ID((short)4, "campaignID"),
    VERSION((short)5, "version"),
    ACCOUNT_ID((short)6, "accountID"),
    CHARGE_TYPE((short)7, "chargeType"),
    RATE((short)8, "rate"),
    UMBRELLA_RATE((short)9, "umbrellaRate"),
    NETWORK((short)10, "network"),
    START_TIME((short)11, "startTime"),
    END_TIME((short)12, "endTime"),
    BUDGET((short)13, "budget"),
    PACING_DISABLED((short)14, "pacingDisabled"),
    CAP_LENGTH((short)15, "capLength"),
    CAP_COUNT((short)16, "capCount"),
    MAX_DAILY_HIT((short)17, "maxDailyHit"),
    GEO_LOCATION((short)18, "geoLocation"),
    BALANCE((short)19, "balance"),
    BUY_TYPE((short)20, "buyType"),
    PUB_CHARGE_TYPE_FOR_CPA((short)21, "pubChargeTypeForCPA"),
    ADV_FEATURE((short)22, "advFeature"),
    DAILY_HIT((short)23, "dailyHit"),
    CHARGEABLE((short)24, "chargeable"),
    THIRD_PARTY_PARAM((short)25, "thirdPartyParam"),
    THIRD_PARTY_PUB_TRACKING((short)26, "thirdPartyPubTracking"),
    SURVEY_PERCENT((short)27, "surveyPercent"),
    PRIORITY((short)28, "priority"),
    MINUTE_BUDGET((short)29, "minuteBudget"),
    SPECIFIC_BUY((short)30, "specificBuy"),
    SURVEY_ID((short)31, "surveyID"),
    SURVEY_TYPE((short)32, "surveyType"),
    FREQ_TARGET((short)33, "freqTarget"),
    RULES((short)34, "rules"),
    NIELSEN_TRACKING((short)35, "nielsenTracking"),
    FLOW_TYPE((short)36, "flowType"),
    PAYMENT((short)37, "payment"),
    IS_AFPSOURCE((short)38, "isAFPSource"),
    NEGATIVE_CAMPIAGN_ID((short)39, "negative_campiagn_id"),
    SITE_TRACKING_ID_FOR_CPA((short)40, "siteTrackingIdForCpa"),
    PUB_DEFAULT_RATE_FOR_CPA((short)41, "pubDefaultRateForCpa");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEDIA_BUY_ID
          return MEDIA_BUY_ID;
        case 2: // STATUS
          return STATUS;
        case 3: // LAST_CHANGED
          return LAST_CHANGED;
        case 4: // CAMPAIGN_ID
          return CAMPAIGN_ID;
        case 5: // VERSION
          return VERSION;
        case 6: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 7: // CHARGE_TYPE
          return CHARGE_TYPE;
        case 8: // RATE
          return RATE;
        case 9: // UMBRELLA_RATE
          return UMBRELLA_RATE;
        case 10: // NETWORK
          return NETWORK;
        case 11: // START_TIME
          return START_TIME;
        case 12: // END_TIME
          return END_TIME;
        case 13: // BUDGET
          return BUDGET;
        case 14: // PACING_DISABLED
          return PACING_DISABLED;
        case 15: // CAP_LENGTH
          return CAP_LENGTH;
        case 16: // CAP_COUNT
          return CAP_COUNT;
        case 17: // MAX_DAILY_HIT
          return MAX_DAILY_HIT;
        case 18: // GEO_LOCATION
          return GEO_LOCATION;
        case 19: // BALANCE
          return BALANCE;
        case 20: // BUY_TYPE
          return BUY_TYPE;
        case 21: // PUB_CHARGE_TYPE_FOR_CPA
          return PUB_CHARGE_TYPE_FOR_CPA;
        case 22: // ADV_FEATURE
          return ADV_FEATURE;
        case 23: // DAILY_HIT
          return DAILY_HIT;
        case 24: // CHARGEABLE
          return CHARGEABLE;
        case 25: // THIRD_PARTY_PARAM
          return THIRD_PARTY_PARAM;
        case 26: // THIRD_PARTY_PUB_TRACKING
          return THIRD_PARTY_PUB_TRACKING;
        case 27: // SURVEY_PERCENT
          return SURVEY_PERCENT;
        case 28: // PRIORITY
          return PRIORITY;
        case 29: // MINUTE_BUDGET
          return MINUTE_BUDGET;
        case 30: // SPECIFIC_BUY
          return SPECIFIC_BUY;
        case 31: // SURVEY_ID
          return SURVEY_ID;
        case 32: // SURVEY_TYPE
          return SURVEY_TYPE;
        case 33: // FREQ_TARGET
          return FREQ_TARGET;
        case 34: // RULES
          return RULES;
        case 35: // NIELSEN_TRACKING
          return NIELSEN_TRACKING;
        case 36: // FLOW_TYPE
          return FLOW_TYPE;
        case 37: // PAYMENT
          return PAYMENT;
        case 38: // IS_AFPSOURCE
          return IS_AFPSOURCE;
        case 39: // NEGATIVE_CAMPIAGN_ID
          return NEGATIVE_CAMPIAGN_ID;
        case 40: // SITE_TRACKING_ID_FOR_CPA
          return SITE_TRACKING_ID_FOR_CPA;
        case 41: // PUB_DEFAULT_RATE_FOR_CPA
          return PUB_DEFAULT_RATE_FOR_CPA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEDIABUYID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __CAMPAIGNID_ISSET_ID = 2;
  private static final int __VERSION_ISSET_ID = 3;
  private static final int __ACCOUNTID_ISSET_ID = 4;
  private static final int __CHARGETYPE_ISSET_ID = 5;
  private static final int __RATE_ISSET_ID = 6;
  private static final int __UMBRELLARATE_ISSET_ID = 7;
  private static final int __NETWORK_ISSET_ID = 8;
  private static final int __PACINGDISABLED_ISSET_ID = 9;
  private static final int __CAPLENGTH_ISSET_ID = 10;
  private static final int __CAPCOUNT_ISSET_ID = 11;
  private static final int __BUYTYPE_ISSET_ID = 12;
  private static final int __PUBCHARGETYPEFORCPA_ISSET_ID = 13;
  private static final int __ADVFEATURE_ISSET_ID = 14;
  private static final int __CHARGEABLE_ISSET_ID = 15;
  private static final int __SURVEYPERCENT_ISSET_ID = 16;
  private static final int __PRIORITY_ISSET_ID = 17;
  private static final int __SPECIFICBUY_ISSET_ID = 18;
  private static final int __SURVEYID_ISSET_ID = 19;
  private static final int __SURVEYTYPE_ISSET_ID = 20;
  private static final int __FREQTARGET_ISSET_ID = 21;
  private static final int __FLOWTYPE_ISSET_ID = 22;
  private static final int __PAYMENT_ISSET_ID = 23;
  private static final int __ISAFPSOURCE_ISSET_ID = 24;
  private static final int __SITETRACKINGIDFORCPA_ISSET_ID = 25;
  private static final int __PUBDEFAULTRATEFORCPA_ISSET_ID = 26;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEDIA_BUY_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaBuyID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("campaignID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHARGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("chargeType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UMBRELLA_RATE, new org.apache.thrift.meta_data.FieldMetaData("umbrellaRate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NETWORK, new org.apache.thrift.meta_data.FieldMetaData("network", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUDGET, new org.apache.thrift.meta_data.FieldMetaData("budget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PACING_DISABLED, new org.apache.thrift.meta_data.FieldMetaData("pacingDisabled", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAP_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("capLength", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("capCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_DAILY_HIT, new org.apache.thrift.meta_data.FieldMetaData("maxDailyHit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEO_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("geoLocation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("buyType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUB_CHARGE_TYPE_FOR_CPA, new org.apache.thrift.meta_data.FieldMetaData("pubChargeTypeForCPA", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADV_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("advFeature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DAILY_HIT, new org.apache.thrift.meta_data.FieldMetaData("dailyHit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARGEABLE, new org.apache.thrift.meta_data.FieldMetaData("chargeable", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THIRD_PARTY_PARAM, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyParam", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_PARTY_PUB_TRACKING, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyPubTracking", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SURVEY_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("surveyPercent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MINUTE_BUDGET, new org.apache.thrift.meta_data.FieldMetaData("minuteBudget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECIFIC_BUY, new org.apache.thrift.meta_data.FieldMetaData("specificBuy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SURVEY_ID, new org.apache.thrift.meta_data.FieldMetaData("surveyID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SURVEY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("surveyType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREQ_TARGET, new org.apache.thrift.meta_data.FieldMetaData("freqTarget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RULES, new org.apache.thrift.meta_data.FieldMetaData("rules", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NIELSEN_TRACKING, new org.apache.thrift.meta_data.FieldMetaData("nielsenTracking", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("flowType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT, new org.apache.thrift.meta_data.FieldMetaData("payment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_AFPSOURCE, new org.apache.thrift.meta_data.FieldMetaData("isAFPSource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEGATIVE_CAMPIAGN_ID, new org.apache.thrift.meta_data.FieldMetaData("negative_campiagn_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_TRACKING_ID_FOR_CPA, new org.apache.thrift.meta_data.FieldMetaData("siteTrackingIdForCpa", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUB_DEFAULT_RATE_FOR_CPA, new org.apache.thrift.meta_data.FieldMetaData("pubDefaultRateForCpa", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_AdManager_Media_Buy.class, metaDataMap);
  }

  public TDbSync_AdManager_Media_Buy() {
  }

  public TDbSync_AdManager_Media_Buy(
    int mediaBuyID,
    int status,
    String lastChanged,
    int campaignID,
    int version,
    int accountID,
    int chargeType,
    int rate,
    int umbrellaRate,
    int network,
    String startTime,
    String endTime,
    String budget,
    int pacingDisabled,
    int capLength,
    int capCount,
    String maxDailyHit,
    String geoLocation,
    String balance,
    int buyType,
    int pubChargeTypeForCPA,
    long advFeature,
    String dailyHit,
    int chargeable,
    String thirdPartyParam,
    String thirdPartyPubTracking,
    int surveyPercent,
    int priority,
    String minuteBudget,
    int specificBuy,
    int surveyID,
    int surveyType,
    int freqTarget,
    String rules,
    String nielsenTracking,
    int flowType,
    int payment,
    int isAFPSource,
    String negative_campiagn_id,
    int siteTrackingIdForCpa,
    int pubDefaultRateForCpa)
  {
    this();
    this.mediaBuyID = mediaBuyID;
    setMediaBuyIDIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.accountID = accountID;
    setAccountIDIsSet(true);
    this.chargeType = chargeType;
    setChargeTypeIsSet(true);
    this.rate = rate;
    setRateIsSet(true);
    this.umbrellaRate = umbrellaRate;
    setUmbrellaRateIsSet(true);
    this.network = network;
    setNetworkIsSet(true);
    this.startTime = startTime;
    this.endTime = endTime;
    this.budget = budget;
    this.pacingDisabled = pacingDisabled;
    setPacingDisabledIsSet(true);
    this.capLength = capLength;
    setCapLengthIsSet(true);
    this.capCount = capCount;
    setCapCountIsSet(true);
    this.maxDailyHit = maxDailyHit;
    this.geoLocation = geoLocation;
    this.balance = balance;
    this.buyType = buyType;
    setBuyTypeIsSet(true);
    this.pubChargeTypeForCPA = pubChargeTypeForCPA;
    setPubChargeTypeForCPAIsSet(true);
    this.advFeature = advFeature;
    setAdvFeatureIsSet(true);
    this.dailyHit = dailyHit;
    this.chargeable = chargeable;
    setChargeableIsSet(true);
    this.thirdPartyParam = thirdPartyParam;
    this.thirdPartyPubTracking = thirdPartyPubTracking;
    this.surveyPercent = surveyPercent;
    setSurveyPercentIsSet(true);
    this.priority = priority;
    setPriorityIsSet(true);
    this.minuteBudget = minuteBudget;
    this.specificBuy = specificBuy;
    setSpecificBuyIsSet(true);
    this.surveyID = surveyID;
    setSurveyIDIsSet(true);
    this.surveyType = surveyType;
    setSurveyTypeIsSet(true);
    this.freqTarget = freqTarget;
    setFreqTargetIsSet(true);
    this.rules = rules;
    this.nielsenTracking = nielsenTracking;
    this.flowType = flowType;
    setFlowTypeIsSet(true);
    this.payment = payment;
    setPaymentIsSet(true);
    this.isAFPSource = isAFPSource;
    setIsAFPSourceIsSet(true);
    this.negative_campiagn_id = negative_campiagn_id;
    this.siteTrackingIdForCpa = siteTrackingIdForCpa;
    setSiteTrackingIdForCpaIsSet(true);
    this.pubDefaultRateForCpa = pubDefaultRateForCpa;
    setPubDefaultRateForCpaIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_AdManager_Media_Buy(TDbSync_AdManager_Media_Buy other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mediaBuyID = other.mediaBuyID;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    this.campaignID = other.campaignID;
    this.version = other.version;
    this.accountID = other.accountID;
    this.chargeType = other.chargeType;
    this.rate = other.rate;
    this.umbrellaRate = other.umbrellaRate;
    this.network = other.network;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetBudget()) {
      this.budget = other.budget;
    }
    this.pacingDisabled = other.pacingDisabled;
    this.capLength = other.capLength;
    this.capCount = other.capCount;
    if (other.isSetMaxDailyHit()) {
      this.maxDailyHit = other.maxDailyHit;
    }
    if (other.isSetGeoLocation()) {
      this.geoLocation = other.geoLocation;
    }
    if (other.isSetBalance()) {
      this.balance = other.balance;
    }
    this.buyType = other.buyType;
    this.pubChargeTypeForCPA = other.pubChargeTypeForCPA;
    this.advFeature = other.advFeature;
    if (other.isSetDailyHit()) {
      this.dailyHit = other.dailyHit;
    }
    this.chargeable = other.chargeable;
    if (other.isSetThirdPartyParam()) {
      this.thirdPartyParam = other.thirdPartyParam;
    }
    if (other.isSetThirdPartyPubTracking()) {
      this.thirdPartyPubTracking = other.thirdPartyPubTracking;
    }
    this.surveyPercent = other.surveyPercent;
    this.priority = other.priority;
    if (other.isSetMinuteBudget()) {
      this.minuteBudget = other.minuteBudget;
    }
    this.specificBuy = other.specificBuy;
    this.surveyID = other.surveyID;
    this.surveyType = other.surveyType;
    this.freqTarget = other.freqTarget;
    if (other.isSetRules()) {
      this.rules = other.rules;
    }
    if (other.isSetNielsenTracking()) {
      this.nielsenTracking = other.nielsenTracking;
    }
    this.flowType = other.flowType;
    this.payment = other.payment;
    this.isAFPSource = other.isAFPSource;
    if (other.isSetNegative_campiagn_id()) {
      this.negative_campiagn_id = other.negative_campiagn_id;
    }
    this.siteTrackingIdForCpa = other.siteTrackingIdForCpa;
    this.pubDefaultRateForCpa = other.pubDefaultRateForCpa;
  }

  public TDbSync_AdManager_Media_Buy deepCopy() {
    return new TDbSync_AdManager_Media_Buy(this);
  }

  @Override
  public void clear() {
    setMediaBuyIDIsSet(false);
    this.mediaBuyID = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    setCampaignIDIsSet(false);
    this.campaignID = 0;
    setVersionIsSet(false);
    this.version = 0;
    setAccountIDIsSet(false);
    this.accountID = 0;
    setChargeTypeIsSet(false);
    this.chargeType = 0;
    setRateIsSet(false);
    this.rate = 0;
    setUmbrellaRateIsSet(false);
    this.umbrellaRate = 0;
    setNetworkIsSet(false);
    this.network = 0;
    this.startTime = null;
    this.endTime = null;
    this.budget = null;
    setPacingDisabledIsSet(false);
    this.pacingDisabled = 0;
    setCapLengthIsSet(false);
    this.capLength = 0;
    setCapCountIsSet(false);
    this.capCount = 0;
    this.maxDailyHit = null;
    this.geoLocation = null;
    this.balance = null;
    setBuyTypeIsSet(false);
    this.buyType = 0;
    setPubChargeTypeForCPAIsSet(false);
    this.pubChargeTypeForCPA = 0;
    setAdvFeatureIsSet(false);
    this.advFeature = 0;
    this.dailyHit = null;
    setChargeableIsSet(false);
    this.chargeable = 0;
    this.thirdPartyParam = null;
    this.thirdPartyPubTracking = null;
    setSurveyPercentIsSet(false);
    this.surveyPercent = 0;
    setPriorityIsSet(false);
    this.priority = 0;
    this.minuteBudget = null;
    setSpecificBuyIsSet(false);
    this.specificBuy = 0;
    setSurveyIDIsSet(false);
    this.surveyID = 0;
    setSurveyTypeIsSet(false);
    this.surveyType = 0;
    setFreqTargetIsSet(false);
    this.freqTarget = 0;
    this.rules = null;
    this.nielsenTracking = null;
    setFlowTypeIsSet(false);
    this.flowType = 0;
    setPaymentIsSet(false);
    this.payment = 0;
    setIsAFPSourceIsSet(false);
    this.isAFPSource = 0;
    this.negative_campiagn_id = null;
    setSiteTrackingIdForCpaIsSet(false);
    this.siteTrackingIdForCpa = 0;
    setPubDefaultRateForCpaIsSet(false);
    this.pubDefaultRateForCpa = 0;
  }

  public int getMediaBuyID() {
    return this.mediaBuyID;
  }

  public TDbSync_AdManager_Media_Buy setMediaBuyID(int mediaBuyID) {
    this.mediaBuyID = mediaBuyID;
    setMediaBuyIDIsSet(true);
    return this;
  }

  public void unsetMediaBuyID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIABUYID_ISSET_ID);
  }

  /** Returns true if field mediaBuyID is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaBuyID() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIABUYID_ISSET_ID);
  }

  public void setMediaBuyIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIABUYID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_AdManager_Media_Buy setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_AdManager_Media_Buy setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public int getCampaignID() {
    return this.campaignID;
  }

  public TDbSync_AdManager_Media_Buy setCampaignID(int campaignID) {
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    return this;
  }

  public void unsetCampaignID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  /** Returns true if field campaignID is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaignID() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  public void setCampaignIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public TDbSync_AdManager_Media_Buy setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getAccountID() {
    return this.accountID;
  }

  public TDbSync_AdManager_Media_Buy setAccountID(int accountID) {
    this.accountID = accountID;
    setAccountIDIsSet(true);
    return this;
  }

  public void unsetAccountID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountID() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTID_ISSET_ID);
  }

  public void setAccountIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTID_ISSET_ID, value);
  }

  public int getChargeType() {
    return this.chargeType;
  }

  public TDbSync_AdManager_Media_Buy setChargeType(int chargeType) {
    this.chargeType = chargeType;
    setChargeTypeIsSet(true);
    return this;
  }

  public void unsetChargeType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGETYPE_ISSET_ID);
  }

  /** Returns true if field chargeType is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeType() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGETYPE_ISSET_ID);
  }

  public void setChargeTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGETYPE_ISSET_ID, value);
  }

  public int getRate() {
    return this.rate;
  }

  public TDbSync_AdManager_Media_Buy setRate(int rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
  }

  public int getUmbrellaRate() {
    return this.umbrellaRate;
  }

  public TDbSync_AdManager_Media_Buy setUmbrellaRate(int umbrellaRate) {
    this.umbrellaRate = umbrellaRate;
    setUmbrellaRateIsSet(true);
    return this;
  }

  public void unsetUmbrellaRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UMBRELLARATE_ISSET_ID);
  }

  /** Returns true if field umbrellaRate is set (has been assigned a value) and false otherwise */
  public boolean isSetUmbrellaRate() {
    return EncodingUtils.testBit(__isset_bitfield, __UMBRELLARATE_ISSET_ID);
  }

  public void setUmbrellaRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UMBRELLARATE_ISSET_ID, value);
  }

  public int getNetwork() {
    return this.network;
  }

  public TDbSync_AdManager_Media_Buy setNetwork(int network) {
    this.network = network;
    setNetworkIsSet(true);
    return this;
  }

  public void unsetNetwork() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NETWORK_ISSET_ID);
  }

  /** Returns true if field network is set (has been assigned a value) and false otherwise */
  public boolean isSetNetwork() {
    return EncodingUtils.testBit(__isset_bitfield, __NETWORK_ISSET_ID);
  }

  public void setNetworkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NETWORK_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public TDbSync_AdManager_Media_Buy setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public TDbSync_AdManager_Media_Buy setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getBudget() {
    return this.budget;
  }

  public TDbSync_AdManager_Media_Buy setBudget(String budget) {
    this.budget = budget;
    return this;
  }

  public void unsetBudget() {
    this.budget = null;
  }

  /** Returns true if field budget is set (has been assigned a value) and false otherwise */
  public boolean isSetBudget() {
    return this.budget != null;
  }

  public void setBudgetIsSet(boolean value) {
    if (!value) {
      this.budget = null;
    }
  }

  public int getPacingDisabled() {
    return this.pacingDisabled;
  }

  public TDbSync_AdManager_Media_Buy setPacingDisabled(int pacingDisabled) {
    this.pacingDisabled = pacingDisabled;
    setPacingDisabledIsSet(true);
    return this;
  }

  public void unsetPacingDisabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PACINGDISABLED_ISSET_ID);
  }

  /** Returns true if field pacingDisabled is set (has been assigned a value) and false otherwise */
  public boolean isSetPacingDisabled() {
    return EncodingUtils.testBit(__isset_bitfield, __PACINGDISABLED_ISSET_ID);
  }

  public void setPacingDisabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PACINGDISABLED_ISSET_ID, value);
  }

  public int getCapLength() {
    return this.capLength;
  }

  public TDbSync_AdManager_Media_Buy setCapLength(int capLength) {
    this.capLength = capLength;
    setCapLengthIsSet(true);
    return this;
  }

  public void unsetCapLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAPLENGTH_ISSET_ID);
  }

  /** Returns true if field capLength is set (has been assigned a value) and false otherwise */
  public boolean isSetCapLength() {
    return EncodingUtils.testBit(__isset_bitfield, __CAPLENGTH_ISSET_ID);
  }

  public void setCapLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAPLENGTH_ISSET_ID, value);
  }

  public int getCapCount() {
    return this.capCount;
  }

  public TDbSync_AdManager_Media_Buy setCapCount(int capCount) {
    this.capCount = capCount;
    setCapCountIsSet(true);
    return this;
  }

  public void unsetCapCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAPCOUNT_ISSET_ID);
  }

  /** Returns true if field capCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCapCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CAPCOUNT_ISSET_ID);
  }

  public void setCapCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAPCOUNT_ISSET_ID, value);
  }

  public String getMaxDailyHit() {
    return this.maxDailyHit;
  }

  public TDbSync_AdManager_Media_Buy setMaxDailyHit(String maxDailyHit) {
    this.maxDailyHit = maxDailyHit;
    return this;
  }

  public void unsetMaxDailyHit() {
    this.maxDailyHit = null;
  }

  /** Returns true if field maxDailyHit is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDailyHit() {
    return this.maxDailyHit != null;
  }

  public void setMaxDailyHitIsSet(boolean value) {
    if (!value) {
      this.maxDailyHit = null;
    }
  }

  public String getGeoLocation() {
    return this.geoLocation;
  }

  public TDbSync_AdManager_Media_Buy setGeoLocation(String geoLocation) {
    this.geoLocation = geoLocation;
    return this;
  }

  public void unsetGeoLocation() {
    this.geoLocation = null;
  }

  /** Returns true if field geoLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoLocation() {
    return this.geoLocation != null;
  }

  public void setGeoLocationIsSet(boolean value) {
    if (!value) {
      this.geoLocation = null;
    }
  }

  public String getBalance() {
    return this.balance;
  }

  public TDbSync_AdManager_Media_Buy setBalance(String balance) {
    this.balance = balance;
    return this;
  }

  public void unsetBalance() {
    this.balance = null;
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return this.balance != null;
  }

  public void setBalanceIsSet(boolean value) {
    if (!value) {
      this.balance = null;
    }
  }

  public int getBuyType() {
    return this.buyType;
  }

  public TDbSync_AdManager_Media_Buy setBuyType(int buyType) {
    this.buyType = buyType;
    setBuyTypeIsSet(true);
    return this;
  }

  public void unsetBuyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUYTYPE_ISSET_ID);
  }

  /** Returns true if field buyType is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyType() {
    return EncodingUtils.testBit(__isset_bitfield, __BUYTYPE_ISSET_ID);
  }

  public void setBuyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUYTYPE_ISSET_ID, value);
  }

  public int getPubChargeTypeForCPA() {
    return this.pubChargeTypeForCPA;
  }

  public TDbSync_AdManager_Media_Buy setPubChargeTypeForCPA(int pubChargeTypeForCPA) {
    this.pubChargeTypeForCPA = pubChargeTypeForCPA;
    setPubChargeTypeForCPAIsSet(true);
    return this;
  }

  public void unsetPubChargeTypeForCPA() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBCHARGETYPEFORCPA_ISSET_ID);
  }

  /** Returns true if field pubChargeTypeForCPA is set (has been assigned a value) and false otherwise */
  public boolean isSetPubChargeTypeForCPA() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBCHARGETYPEFORCPA_ISSET_ID);
  }

  public void setPubChargeTypeForCPAIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBCHARGETYPEFORCPA_ISSET_ID, value);
  }

  public long getAdvFeature() {
    return this.advFeature;
  }

  public TDbSync_AdManager_Media_Buy setAdvFeature(long advFeature) {
    this.advFeature = advFeature;
    setAdvFeatureIsSet(true);
    return this;
  }

  public void unsetAdvFeature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADVFEATURE_ISSET_ID);
  }

  /** Returns true if field advFeature is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvFeature() {
    return EncodingUtils.testBit(__isset_bitfield, __ADVFEATURE_ISSET_ID);
  }

  public void setAdvFeatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADVFEATURE_ISSET_ID, value);
  }

  public String getDailyHit() {
    return this.dailyHit;
  }

  public TDbSync_AdManager_Media_Buy setDailyHit(String dailyHit) {
    this.dailyHit = dailyHit;
    return this;
  }

  public void unsetDailyHit() {
    this.dailyHit = null;
  }

  /** Returns true if field dailyHit is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyHit() {
    return this.dailyHit != null;
  }

  public void setDailyHitIsSet(boolean value) {
    if (!value) {
      this.dailyHit = null;
    }
  }

  public int getChargeable() {
    return this.chargeable;
  }

  public TDbSync_AdManager_Media_Buy setChargeable(int chargeable) {
    this.chargeable = chargeable;
    setChargeableIsSet(true);
    return this;
  }

  public void unsetChargeable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGEABLE_ISSET_ID);
  }

  /** Returns true if field chargeable is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeable() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGEABLE_ISSET_ID);
  }

  public void setChargeableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGEABLE_ISSET_ID, value);
  }

  public String getThirdPartyParam() {
    return this.thirdPartyParam;
  }

  public TDbSync_AdManager_Media_Buy setThirdPartyParam(String thirdPartyParam) {
    this.thirdPartyParam = thirdPartyParam;
    return this;
  }

  public void unsetThirdPartyParam() {
    this.thirdPartyParam = null;
  }

  /** Returns true if field thirdPartyParam is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdPartyParam() {
    return this.thirdPartyParam != null;
  }

  public void setThirdPartyParamIsSet(boolean value) {
    if (!value) {
      this.thirdPartyParam = null;
    }
  }

  public String getThirdPartyPubTracking() {
    return this.thirdPartyPubTracking;
  }

  public TDbSync_AdManager_Media_Buy setThirdPartyPubTracking(String thirdPartyPubTracking) {
    this.thirdPartyPubTracking = thirdPartyPubTracking;
    return this;
  }

  public void unsetThirdPartyPubTracking() {
    this.thirdPartyPubTracking = null;
  }

  /** Returns true if field thirdPartyPubTracking is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdPartyPubTracking() {
    return this.thirdPartyPubTracking != null;
  }

  public void setThirdPartyPubTrackingIsSet(boolean value) {
    if (!value) {
      this.thirdPartyPubTracking = null;
    }
  }

  public int getSurveyPercent() {
    return this.surveyPercent;
  }

  public TDbSync_AdManager_Media_Buy setSurveyPercent(int surveyPercent) {
    this.surveyPercent = surveyPercent;
    setSurveyPercentIsSet(true);
    return this;
  }

  public void unsetSurveyPercent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SURVEYPERCENT_ISSET_ID);
  }

  /** Returns true if field surveyPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetSurveyPercent() {
    return EncodingUtils.testBit(__isset_bitfield, __SURVEYPERCENT_ISSET_ID);
  }

  public void setSurveyPercentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SURVEYPERCENT_ISSET_ID, value);
  }

  public int getPriority() {
    return this.priority;
  }

  public TDbSync_AdManager_Media_Buy setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public String getMinuteBudget() {
    return this.minuteBudget;
  }

  public TDbSync_AdManager_Media_Buy setMinuteBudget(String minuteBudget) {
    this.minuteBudget = minuteBudget;
    return this;
  }

  public void unsetMinuteBudget() {
    this.minuteBudget = null;
  }

  /** Returns true if field minuteBudget is set (has been assigned a value) and false otherwise */
  public boolean isSetMinuteBudget() {
    return this.minuteBudget != null;
  }

  public void setMinuteBudgetIsSet(boolean value) {
    if (!value) {
      this.minuteBudget = null;
    }
  }

  public int getSpecificBuy() {
    return this.specificBuy;
  }

  public TDbSync_AdManager_Media_Buy setSpecificBuy(int specificBuy) {
    this.specificBuy = specificBuy;
    setSpecificBuyIsSet(true);
    return this;
  }

  public void unsetSpecificBuy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIFICBUY_ISSET_ID);
  }

  /** Returns true if field specificBuy is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecificBuy() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIFICBUY_ISSET_ID);
  }

  public void setSpecificBuyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIFICBUY_ISSET_ID, value);
  }

  public int getSurveyID() {
    return this.surveyID;
  }

  public TDbSync_AdManager_Media_Buy setSurveyID(int surveyID) {
    this.surveyID = surveyID;
    setSurveyIDIsSet(true);
    return this;
  }

  public void unsetSurveyID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SURVEYID_ISSET_ID);
  }

  /** Returns true if field surveyID is set (has been assigned a value) and false otherwise */
  public boolean isSetSurveyID() {
    return EncodingUtils.testBit(__isset_bitfield, __SURVEYID_ISSET_ID);
  }

  public void setSurveyIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SURVEYID_ISSET_ID, value);
  }

  public int getSurveyType() {
    return this.surveyType;
  }

  public TDbSync_AdManager_Media_Buy setSurveyType(int surveyType) {
    this.surveyType = surveyType;
    setSurveyTypeIsSet(true);
    return this;
  }

  public void unsetSurveyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SURVEYTYPE_ISSET_ID);
  }

  /** Returns true if field surveyType is set (has been assigned a value) and false otherwise */
  public boolean isSetSurveyType() {
    return EncodingUtils.testBit(__isset_bitfield, __SURVEYTYPE_ISSET_ID);
  }

  public void setSurveyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SURVEYTYPE_ISSET_ID, value);
  }

  public int getFreqTarget() {
    return this.freqTarget;
  }

  public TDbSync_AdManager_Media_Buy setFreqTarget(int freqTarget) {
    this.freqTarget = freqTarget;
    setFreqTargetIsSet(true);
    return this;
  }

  public void unsetFreqTarget() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREQTARGET_ISSET_ID);
  }

  /** Returns true if field freqTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetFreqTarget() {
    return EncodingUtils.testBit(__isset_bitfield, __FREQTARGET_ISSET_ID);
  }

  public void setFreqTargetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREQTARGET_ISSET_ID, value);
  }

  public String getRules() {
    return this.rules;
  }

  public TDbSync_AdManager_Media_Buy setRules(String rules) {
    this.rules = rules;
    return this;
  }

  public void unsetRules() {
    this.rules = null;
  }

  /** Returns true if field rules is set (has been assigned a value) and false otherwise */
  public boolean isSetRules() {
    return this.rules != null;
  }

  public void setRulesIsSet(boolean value) {
    if (!value) {
      this.rules = null;
    }
  }

  public String getNielsenTracking() {
    return this.nielsenTracking;
  }

  public TDbSync_AdManager_Media_Buy setNielsenTracking(String nielsenTracking) {
    this.nielsenTracking = nielsenTracking;
    return this;
  }

  public void unsetNielsenTracking() {
    this.nielsenTracking = null;
  }

  /** Returns true if field nielsenTracking is set (has been assigned a value) and false otherwise */
  public boolean isSetNielsenTracking() {
    return this.nielsenTracking != null;
  }

  public void setNielsenTrackingIsSet(boolean value) {
    if (!value) {
      this.nielsenTracking = null;
    }
  }

  public int getFlowType() {
    return this.flowType;
  }

  public TDbSync_AdManager_Media_Buy setFlowType(int flowType) {
    this.flowType = flowType;
    setFlowTypeIsSet(true);
    return this;
  }

  public void unsetFlowType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOWTYPE_ISSET_ID);
  }

  /** Returns true if field flowType is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowType() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOWTYPE_ISSET_ID);
  }

  public void setFlowTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOWTYPE_ISSET_ID, value);
  }

  public int getPayment() {
    return this.payment;
  }

  public TDbSync_AdManager_Media_Buy setPayment(int payment) {
    this.payment = payment;
    setPaymentIsSet(true);
    return this;
  }

  public void unsetPayment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENT_ISSET_ID);
  }

  /** Returns true if field payment is set (has been assigned a value) and false otherwise */
  public boolean isSetPayment() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENT_ISSET_ID);
  }

  public void setPaymentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENT_ISSET_ID, value);
  }

  public int getIsAFPSource() {
    return this.isAFPSource;
  }

  public TDbSync_AdManager_Media_Buy setIsAFPSource(int isAFPSource) {
    this.isAFPSource = isAFPSource;
    setIsAFPSourceIsSet(true);
    return this;
  }

  public void unsetIsAFPSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAFPSOURCE_ISSET_ID);
  }

  /** Returns true if field isAFPSource is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAFPSource() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAFPSOURCE_ISSET_ID);
  }

  public void setIsAFPSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAFPSOURCE_ISSET_ID, value);
  }

  public String getNegative_campiagn_id() {
    return this.negative_campiagn_id;
  }

  public TDbSync_AdManager_Media_Buy setNegative_campiagn_id(String negative_campiagn_id) {
    this.negative_campiagn_id = negative_campiagn_id;
    return this;
  }

  public void unsetNegative_campiagn_id() {
    this.negative_campiagn_id = null;
  }

  /** Returns true if field negative_campiagn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetNegative_campiagn_id() {
    return this.negative_campiagn_id != null;
  }

  public void setNegative_campiagn_idIsSet(boolean value) {
    if (!value) {
      this.negative_campiagn_id = null;
    }
  }

  public int getSiteTrackingIdForCpa() {
    return this.siteTrackingIdForCpa;
  }

  public TDbSync_AdManager_Media_Buy setSiteTrackingIdForCpa(int siteTrackingIdForCpa) {
    this.siteTrackingIdForCpa = siteTrackingIdForCpa;
    setSiteTrackingIdForCpaIsSet(true);
    return this;
  }

  public void unsetSiteTrackingIdForCpa() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SITETRACKINGIDFORCPA_ISSET_ID);
  }

  /** Returns true if field siteTrackingIdForCpa is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteTrackingIdForCpa() {
    return EncodingUtils.testBit(__isset_bitfield, __SITETRACKINGIDFORCPA_ISSET_ID);
  }

  public void setSiteTrackingIdForCpaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SITETRACKINGIDFORCPA_ISSET_ID, value);
  }

  public int getPubDefaultRateForCpa() {
    return this.pubDefaultRateForCpa;
  }

  public TDbSync_AdManager_Media_Buy setPubDefaultRateForCpa(int pubDefaultRateForCpa) {
    this.pubDefaultRateForCpa = pubDefaultRateForCpa;
    setPubDefaultRateForCpaIsSet(true);
    return this;
  }

  public void unsetPubDefaultRateForCpa() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBDEFAULTRATEFORCPA_ISSET_ID);
  }

  /** Returns true if field pubDefaultRateForCpa is set (has been assigned a value) and false otherwise */
  public boolean isSetPubDefaultRateForCpa() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBDEFAULTRATEFORCPA_ISSET_ID);
  }

  public void setPubDefaultRateForCpaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBDEFAULTRATEFORCPA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEDIA_BUY_ID:
      if (value == null) {
        unsetMediaBuyID();
      } else {
        setMediaBuyID((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case CAMPAIGN_ID:
      if (value == null) {
        unsetCampaignID();
      } else {
        setCampaignID((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountID();
      } else {
        setAccountID((Integer)value);
      }
      break;

    case CHARGE_TYPE:
      if (value == null) {
        unsetChargeType();
      } else {
        setChargeType((Integer)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((Integer)value);
      }
      break;

    case UMBRELLA_RATE:
      if (value == null) {
        unsetUmbrellaRate();
      } else {
        setUmbrellaRate((Integer)value);
      }
      break;

    case NETWORK:
      if (value == null) {
        unsetNetwork();
      } else {
        setNetwork((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case BUDGET:
      if (value == null) {
        unsetBudget();
      } else {
        setBudget((String)value);
      }
      break;

    case PACING_DISABLED:
      if (value == null) {
        unsetPacingDisabled();
      } else {
        setPacingDisabled((Integer)value);
      }
      break;

    case CAP_LENGTH:
      if (value == null) {
        unsetCapLength();
      } else {
        setCapLength((Integer)value);
      }
      break;

    case CAP_COUNT:
      if (value == null) {
        unsetCapCount();
      } else {
        setCapCount((Integer)value);
      }
      break;

    case MAX_DAILY_HIT:
      if (value == null) {
        unsetMaxDailyHit();
      } else {
        setMaxDailyHit((String)value);
      }
      break;

    case GEO_LOCATION:
      if (value == null) {
        unsetGeoLocation();
      } else {
        setGeoLocation((String)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((String)value);
      }
      break;

    case BUY_TYPE:
      if (value == null) {
        unsetBuyType();
      } else {
        setBuyType((Integer)value);
      }
      break;

    case PUB_CHARGE_TYPE_FOR_CPA:
      if (value == null) {
        unsetPubChargeTypeForCPA();
      } else {
        setPubChargeTypeForCPA((Integer)value);
      }
      break;

    case ADV_FEATURE:
      if (value == null) {
        unsetAdvFeature();
      } else {
        setAdvFeature((Long)value);
      }
      break;

    case DAILY_HIT:
      if (value == null) {
        unsetDailyHit();
      } else {
        setDailyHit((String)value);
      }
      break;

    case CHARGEABLE:
      if (value == null) {
        unsetChargeable();
      } else {
        setChargeable((Integer)value);
      }
      break;

    case THIRD_PARTY_PARAM:
      if (value == null) {
        unsetThirdPartyParam();
      } else {
        setThirdPartyParam((String)value);
      }
      break;

    case THIRD_PARTY_PUB_TRACKING:
      if (value == null) {
        unsetThirdPartyPubTracking();
      } else {
        setThirdPartyPubTracking((String)value);
      }
      break;

    case SURVEY_PERCENT:
      if (value == null) {
        unsetSurveyPercent();
      } else {
        setSurveyPercent((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case MINUTE_BUDGET:
      if (value == null) {
        unsetMinuteBudget();
      } else {
        setMinuteBudget((String)value);
      }
      break;

    case SPECIFIC_BUY:
      if (value == null) {
        unsetSpecificBuy();
      } else {
        setSpecificBuy((Integer)value);
      }
      break;

    case SURVEY_ID:
      if (value == null) {
        unsetSurveyID();
      } else {
        setSurveyID((Integer)value);
      }
      break;

    case SURVEY_TYPE:
      if (value == null) {
        unsetSurveyType();
      } else {
        setSurveyType((Integer)value);
      }
      break;

    case FREQ_TARGET:
      if (value == null) {
        unsetFreqTarget();
      } else {
        setFreqTarget((Integer)value);
      }
      break;

    case RULES:
      if (value == null) {
        unsetRules();
      } else {
        setRules((String)value);
      }
      break;

    case NIELSEN_TRACKING:
      if (value == null) {
        unsetNielsenTracking();
      } else {
        setNielsenTracking((String)value);
      }
      break;

    case FLOW_TYPE:
      if (value == null) {
        unsetFlowType();
      } else {
        setFlowType((Integer)value);
      }
      break;

    case PAYMENT:
      if (value == null) {
        unsetPayment();
      } else {
        setPayment((Integer)value);
      }
      break;

    case IS_AFPSOURCE:
      if (value == null) {
        unsetIsAFPSource();
      } else {
        setIsAFPSource((Integer)value);
      }
      break;

    case NEGATIVE_CAMPIAGN_ID:
      if (value == null) {
        unsetNegative_campiagn_id();
      } else {
        setNegative_campiagn_id((String)value);
      }
      break;

    case SITE_TRACKING_ID_FOR_CPA:
      if (value == null) {
        unsetSiteTrackingIdForCpa();
      } else {
        setSiteTrackingIdForCpa((Integer)value);
      }
      break;

    case PUB_DEFAULT_RATE_FOR_CPA:
      if (value == null) {
        unsetPubDefaultRateForCpa();
      } else {
        setPubDefaultRateForCpa((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEDIA_BUY_ID:
      return Integer.valueOf(getMediaBuyID());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case CAMPAIGN_ID:
      return Integer.valueOf(getCampaignID());

    case VERSION:
      return Integer.valueOf(getVersion());

    case ACCOUNT_ID:
      return Integer.valueOf(getAccountID());

    case CHARGE_TYPE:
      return Integer.valueOf(getChargeType());

    case RATE:
      return Integer.valueOf(getRate());

    case UMBRELLA_RATE:
      return Integer.valueOf(getUmbrellaRate());

    case NETWORK:
      return Integer.valueOf(getNetwork());

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case BUDGET:
      return getBudget();

    case PACING_DISABLED:
      return Integer.valueOf(getPacingDisabled());

    case CAP_LENGTH:
      return Integer.valueOf(getCapLength());

    case CAP_COUNT:
      return Integer.valueOf(getCapCount());

    case MAX_DAILY_HIT:
      return getMaxDailyHit();

    case GEO_LOCATION:
      return getGeoLocation();

    case BALANCE:
      return getBalance();

    case BUY_TYPE:
      return Integer.valueOf(getBuyType());

    case PUB_CHARGE_TYPE_FOR_CPA:
      return Integer.valueOf(getPubChargeTypeForCPA());

    case ADV_FEATURE:
      return Long.valueOf(getAdvFeature());

    case DAILY_HIT:
      return getDailyHit();

    case CHARGEABLE:
      return Integer.valueOf(getChargeable());

    case THIRD_PARTY_PARAM:
      return getThirdPartyParam();

    case THIRD_PARTY_PUB_TRACKING:
      return getThirdPartyPubTracking();

    case SURVEY_PERCENT:
      return Integer.valueOf(getSurveyPercent());

    case PRIORITY:
      return Integer.valueOf(getPriority());

    case MINUTE_BUDGET:
      return getMinuteBudget();

    case SPECIFIC_BUY:
      return Integer.valueOf(getSpecificBuy());

    case SURVEY_ID:
      return Integer.valueOf(getSurveyID());

    case SURVEY_TYPE:
      return Integer.valueOf(getSurveyType());

    case FREQ_TARGET:
      return Integer.valueOf(getFreqTarget());

    case RULES:
      return getRules();

    case NIELSEN_TRACKING:
      return getNielsenTracking();

    case FLOW_TYPE:
      return Integer.valueOf(getFlowType());

    case PAYMENT:
      return Integer.valueOf(getPayment());

    case IS_AFPSOURCE:
      return Integer.valueOf(getIsAFPSource());

    case NEGATIVE_CAMPIAGN_ID:
      return getNegative_campiagn_id();

    case SITE_TRACKING_ID_FOR_CPA:
      return Integer.valueOf(getSiteTrackingIdForCpa());

    case PUB_DEFAULT_RATE_FOR_CPA:
      return Integer.valueOf(getPubDefaultRateForCpa());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEDIA_BUY_ID:
      return isSetMediaBuyID();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case CAMPAIGN_ID:
      return isSetCampaignID();
    case VERSION:
      return isSetVersion();
    case ACCOUNT_ID:
      return isSetAccountID();
    case CHARGE_TYPE:
      return isSetChargeType();
    case RATE:
      return isSetRate();
    case UMBRELLA_RATE:
      return isSetUmbrellaRate();
    case NETWORK:
      return isSetNetwork();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case BUDGET:
      return isSetBudget();
    case PACING_DISABLED:
      return isSetPacingDisabled();
    case CAP_LENGTH:
      return isSetCapLength();
    case CAP_COUNT:
      return isSetCapCount();
    case MAX_DAILY_HIT:
      return isSetMaxDailyHit();
    case GEO_LOCATION:
      return isSetGeoLocation();
    case BALANCE:
      return isSetBalance();
    case BUY_TYPE:
      return isSetBuyType();
    case PUB_CHARGE_TYPE_FOR_CPA:
      return isSetPubChargeTypeForCPA();
    case ADV_FEATURE:
      return isSetAdvFeature();
    case DAILY_HIT:
      return isSetDailyHit();
    case CHARGEABLE:
      return isSetChargeable();
    case THIRD_PARTY_PARAM:
      return isSetThirdPartyParam();
    case THIRD_PARTY_PUB_TRACKING:
      return isSetThirdPartyPubTracking();
    case SURVEY_PERCENT:
      return isSetSurveyPercent();
    case PRIORITY:
      return isSetPriority();
    case MINUTE_BUDGET:
      return isSetMinuteBudget();
    case SPECIFIC_BUY:
      return isSetSpecificBuy();
    case SURVEY_ID:
      return isSetSurveyID();
    case SURVEY_TYPE:
      return isSetSurveyType();
    case FREQ_TARGET:
      return isSetFreqTarget();
    case RULES:
      return isSetRules();
    case NIELSEN_TRACKING:
      return isSetNielsenTracking();
    case FLOW_TYPE:
      return isSetFlowType();
    case PAYMENT:
      return isSetPayment();
    case IS_AFPSOURCE:
      return isSetIsAFPSource();
    case NEGATIVE_CAMPIAGN_ID:
      return isSetNegative_campiagn_id();
    case SITE_TRACKING_ID_FOR_CPA:
      return isSetSiteTrackingIdForCpa();
    case PUB_DEFAULT_RATE_FOR_CPA:
      return isSetPubDefaultRateForCpa();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_AdManager_Media_Buy)
      return this.equals((TDbSync_AdManager_Media_Buy)that);
    return false;
  }

  public boolean equals(TDbSync_AdManager_Media_Buy that) {
    if (that == null)
      return false;

    boolean this_present_mediaBuyID = true;
    boolean that_present_mediaBuyID = true;
    if (this_present_mediaBuyID || that_present_mediaBuyID) {
      if (!(this_present_mediaBuyID && that_present_mediaBuyID))
        return false;
      if (this.mediaBuyID != that.mediaBuyID)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_campaignID = true;
    boolean that_present_campaignID = true;
    if (this_present_campaignID || that_present_campaignID) {
      if (!(this_present_campaignID && that_present_campaignID))
        return false;
      if (this.campaignID != that.campaignID)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_accountID = true;
    boolean that_present_accountID = true;
    if (this_present_accountID || that_present_accountID) {
      if (!(this_present_accountID && that_present_accountID))
        return false;
      if (this.accountID != that.accountID)
        return false;
    }

    boolean this_present_chargeType = true;
    boolean that_present_chargeType = true;
    if (this_present_chargeType || that_present_chargeType) {
      if (!(this_present_chargeType && that_present_chargeType))
        return false;
      if (this.chargeType != that.chargeType)
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_umbrellaRate = true;
    boolean that_present_umbrellaRate = true;
    if (this_present_umbrellaRate || that_present_umbrellaRate) {
      if (!(this_present_umbrellaRate && that_present_umbrellaRate))
        return false;
      if (this.umbrellaRate != that.umbrellaRate)
        return false;
    }

    boolean this_present_network = true;
    boolean that_present_network = true;
    if (this_present_network || that_present_network) {
      if (!(this_present_network && that_present_network))
        return false;
      if (this.network != that.network)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_budget = true && this.isSetBudget();
    boolean that_present_budget = true && that.isSetBudget();
    if (this_present_budget || that_present_budget) {
      if (!(this_present_budget && that_present_budget))
        return false;
      if (!this.budget.equals(that.budget))
        return false;
    }

    boolean this_present_pacingDisabled = true;
    boolean that_present_pacingDisabled = true;
    if (this_present_pacingDisabled || that_present_pacingDisabled) {
      if (!(this_present_pacingDisabled && that_present_pacingDisabled))
        return false;
      if (this.pacingDisabled != that.pacingDisabled)
        return false;
    }

    boolean this_present_capLength = true;
    boolean that_present_capLength = true;
    if (this_present_capLength || that_present_capLength) {
      if (!(this_present_capLength && that_present_capLength))
        return false;
      if (this.capLength != that.capLength)
        return false;
    }

    boolean this_present_capCount = true;
    boolean that_present_capCount = true;
    if (this_present_capCount || that_present_capCount) {
      if (!(this_present_capCount && that_present_capCount))
        return false;
      if (this.capCount != that.capCount)
        return false;
    }

    boolean this_present_maxDailyHit = true && this.isSetMaxDailyHit();
    boolean that_present_maxDailyHit = true && that.isSetMaxDailyHit();
    if (this_present_maxDailyHit || that_present_maxDailyHit) {
      if (!(this_present_maxDailyHit && that_present_maxDailyHit))
        return false;
      if (!this.maxDailyHit.equals(that.maxDailyHit))
        return false;
    }

    boolean this_present_geoLocation = true && this.isSetGeoLocation();
    boolean that_present_geoLocation = true && that.isSetGeoLocation();
    if (this_present_geoLocation || that_present_geoLocation) {
      if (!(this_present_geoLocation && that_present_geoLocation))
        return false;
      if (!this.geoLocation.equals(that.geoLocation))
        return false;
    }

    boolean this_present_balance = true && this.isSetBalance();
    boolean that_present_balance = true && that.isSetBalance();
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (!this.balance.equals(that.balance))
        return false;
    }

    boolean this_present_buyType = true;
    boolean that_present_buyType = true;
    if (this_present_buyType || that_present_buyType) {
      if (!(this_present_buyType && that_present_buyType))
        return false;
      if (this.buyType != that.buyType)
        return false;
    }

    boolean this_present_pubChargeTypeForCPA = true;
    boolean that_present_pubChargeTypeForCPA = true;
    if (this_present_pubChargeTypeForCPA || that_present_pubChargeTypeForCPA) {
      if (!(this_present_pubChargeTypeForCPA && that_present_pubChargeTypeForCPA))
        return false;
      if (this.pubChargeTypeForCPA != that.pubChargeTypeForCPA)
        return false;
    }

    boolean this_present_advFeature = true;
    boolean that_present_advFeature = true;
    if (this_present_advFeature || that_present_advFeature) {
      if (!(this_present_advFeature && that_present_advFeature))
        return false;
      if (this.advFeature != that.advFeature)
        return false;
    }

    boolean this_present_dailyHit = true && this.isSetDailyHit();
    boolean that_present_dailyHit = true && that.isSetDailyHit();
    if (this_present_dailyHit || that_present_dailyHit) {
      if (!(this_present_dailyHit && that_present_dailyHit))
        return false;
      if (!this.dailyHit.equals(that.dailyHit))
        return false;
    }

    boolean this_present_chargeable = true;
    boolean that_present_chargeable = true;
    if (this_present_chargeable || that_present_chargeable) {
      if (!(this_present_chargeable && that_present_chargeable))
        return false;
      if (this.chargeable != that.chargeable)
        return false;
    }

    boolean this_present_thirdPartyParam = true && this.isSetThirdPartyParam();
    boolean that_present_thirdPartyParam = true && that.isSetThirdPartyParam();
    if (this_present_thirdPartyParam || that_present_thirdPartyParam) {
      if (!(this_present_thirdPartyParam && that_present_thirdPartyParam))
        return false;
      if (!this.thirdPartyParam.equals(that.thirdPartyParam))
        return false;
    }

    boolean this_present_thirdPartyPubTracking = true && this.isSetThirdPartyPubTracking();
    boolean that_present_thirdPartyPubTracking = true && that.isSetThirdPartyPubTracking();
    if (this_present_thirdPartyPubTracking || that_present_thirdPartyPubTracking) {
      if (!(this_present_thirdPartyPubTracking && that_present_thirdPartyPubTracking))
        return false;
      if (!this.thirdPartyPubTracking.equals(that.thirdPartyPubTracking))
        return false;
    }

    boolean this_present_surveyPercent = true;
    boolean that_present_surveyPercent = true;
    if (this_present_surveyPercent || that_present_surveyPercent) {
      if (!(this_present_surveyPercent && that_present_surveyPercent))
        return false;
      if (this.surveyPercent != that.surveyPercent)
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_minuteBudget = true && this.isSetMinuteBudget();
    boolean that_present_minuteBudget = true && that.isSetMinuteBudget();
    if (this_present_minuteBudget || that_present_minuteBudget) {
      if (!(this_present_minuteBudget && that_present_minuteBudget))
        return false;
      if (!this.minuteBudget.equals(that.minuteBudget))
        return false;
    }

    boolean this_present_specificBuy = true;
    boolean that_present_specificBuy = true;
    if (this_present_specificBuy || that_present_specificBuy) {
      if (!(this_present_specificBuy && that_present_specificBuy))
        return false;
      if (this.specificBuy != that.specificBuy)
        return false;
    }

    boolean this_present_surveyID = true;
    boolean that_present_surveyID = true;
    if (this_present_surveyID || that_present_surveyID) {
      if (!(this_present_surveyID && that_present_surveyID))
        return false;
      if (this.surveyID != that.surveyID)
        return false;
    }

    boolean this_present_surveyType = true;
    boolean that_present_surveyType = true;
    if (this_present_surveyType || that_present_surveyType) {
      if (!(this_present_surveyType && that_present_surveyType))
        return false;
      if (this.surveyType != that.surveyType)
        return false;
    }

    boolean this_present_freqTarget = true;
    boolean that_present_freqTarget = true;
    if (this_present_freqTarget || that_present_freqTarget) {
      if (!(this_present_freqTarget && that_present_freqTarget))
        return false;
      if (this.freqTarget != that.freqTarget)
        return false;
    }

    boolean this_present_rules = true && this.isSetRules();
    boolean that_present_rules = true && that.isSetRules();
    if (this_present_rules || that_present_rules) {
      if (!(this_present_rules && that_present_rules))
        return false;
      if (!this.rules.equals(that.rules))
        return false;
    }

    boolean this_present_nielsenTracking = true && this.isSetNielsenTracking();
    boolean that_present_nielsenTracking = true && that.isSetNielsenTracking();
    if (this_present_nielsenTracking || that_present_nielsenTracking) {
      if (!(this_present_nielsenTracking && that_present_nielsenTracking))
        return false;
      if (!this.nielsenTracking.equals(that.nielsenTracking))
        return false;
    }

    boolean this_present_flowType = true;
    boolean that_present_flowType = true;
    if (this_present_flowType || that_present_flowType) {
      if (!(this_present_flowType && that_present_flowType))
        return false;
      if (this.flowType != that.flowType)
        return false;
    }

    boolean this_present_payment = true;
    boolean that_present_payment = true;
    if (this_present_payment || that_present_payment) {
      if (!(this_present_payment && that_present_payment))
        return false;
      if (this.payment != that.payment)
        return false;
    }

    boolean this_present_isAFPSource = true;
    boolean that_present_isAFPSource = true;
    if (this_present_isAFPSource || that_present_isAFPSource) {
      if (!(this_present_isAFPSource && that_present_isAFPSource))
        return false;
      if (this.isAFPSource != that.isAFPSource)
        return false;
    }

    boolean this_present_negative_campiagn_id = true && this.isSetNegative_campiagn_id();
    boolean that_present_negative_campiagn_id = true && that.isSetNegative_campiagn_id();
    if (this_present_negative_campiagn_id || that_present_negative_campiagn_id) {
      if (!(this_present_negative_campiagn_id && that_present_negative_campiagn_id))
        return false;
      if (!this.negative_campiagn_id.equals(that.negative_campiagn_id))
        return false;
    }

    boolean this_present_siteTrackingIdForCpa = true;
    boolean that_present_siteTrackingIdForCpa = true;
    if (this_present_siteTrackingIdForCpa || that_present_siteTrackingIdForCpa) {
      if (!(this_present_siteTrackingIdForCpa && that_present_siteTrackingIdForCpa))
        return false;
      if (this.siteTrackingIdForCpa != that.siteTrackingIdForCpa)
        return false;
    }

    boolean this_present_pubDefaultRateForCpa = true;
    boolean that_present_pubDefaultRateForCpa = true;
    if (this_present_pubDefaultRateForCpa || that_present_pubDefaultRateForCpa) {
      if (!(this_present_pubDefaultRateForCpa && that_present_pubDefaultRateForCpa))
        return false;
      if (this.pubDefaultRateForCpa != that.pubDefaultRateForCpa)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_AdManager_Media_Buy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMediaBuyID()).compareTo(other.isSetMediaBuyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaBuyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaBuyID, other.mediaBuyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaignID()).compareTo(other.isSetCampaignID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaignID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaignID, other.campaignID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeType()).compareTo(other.isSetChargeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeType, other.chargeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUmbrellaRate()).compareTo(other.isSetUmbrellaRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUmbrellaRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.umbrellaRate, other.umbrellaRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetwork()).compareTo(other.isSetNetwork());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetwork()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.network, other.network);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBudget()).compareTo(other.isSetBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.budget, other.budget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPacingDisabled()).compareTo(other.isSetPacingDisabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacingDisabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pacingDisabled, other.pacingDisabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCapLength()).compareTo(other.isSetCapLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capLength, other.capLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCapCount()).compareTo(other.isSetCapCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capCount, other.capCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDailyHit()).compareTo(other.isSetMaxDailyHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDailyHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDailyHit, other.maxDailyHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoLocation()).compareTo(other.isSetGeoLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geoLocation, other.geoLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyType()).compareTo(other.isSetBuyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyType, other.buyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubChargeTypeForCPA()).compareTo(other.isSetPubChargeTypeForCPA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubChargeTypeForCPA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubChargeTypeForCPA, other.pubChargeTypeForCPA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvFeature()).compareTo(other.isSetAdvFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advFeature, other.advFeature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyHit()).compareTo(other.isSetDailyHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyHit, other.dailyHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeable()).compareTo(other.isSetChargeable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeable, other.chargeable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdPartyParam()).compareTo(other.isSetThirdPartyParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartyParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyParam, other.thirdPartyParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdPartyPubTracking()).compareTo(other.isSetThirdPartyPubTracking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartyPubTracking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyPubTracking, other.thirdPartyPubTracking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurveyPercent()).compareTo(other.isSetSurveyPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurveyPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surveyPercent, other.surveyPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinuteBudget()).compareTo(other.isSetMinuteBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinuteBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minuteBudget, other.minuteBudget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecificBuy()).compareTo(other.isSetSpecificBuy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecificBuy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specificBuy, other.specificBuy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurveyID()).compareTo(other.isSetSurveyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurveyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surveyID, other.surveyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurveyType()).compareTo(other.isSetSurveyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurveyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surveyType, other.surveyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreqTarget()).compareTo(other.isSetFreqTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreqTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freqTarget, other.freqTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRules()).compareTo(other.isSetRules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rules, other.rules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNielsenTracking()).compareTo(other.isSetNielsenTracking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNielsenTracking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nielsenTracking, other.nielsenTracking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowType()).compareTo(other.isSetFlowType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowType, other.flowType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayment()).compareTo(other.isSetPayment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payment, other.payment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAFPSource()).compareTo(other.isSetIsAFPSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAFPSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAFPSource, other.isAFPSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNegative_campiagn_id()).compareTo(other.isSetNegative_campiagn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNegative_campiagn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.negative_campiagn_id, other.negative_campiagn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteTrackingIdForCpa()).compareTo(other.isSetSiteTrackingIdForCpa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteTrackingIdForCpa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteTrackingIdForCpa, other.siteTrackingIdForCpa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubDefaultRateForCpa()).compareTo(other.isSetPubDefaultRateForCpa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubDefaultRateForCpa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubDefaultRateForCpa, other.pubDefaultRateForCpa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_AdManager_Media_Buy(");
    boolean first = true;

    sb.append("mediaBuyID:");
    sb.append(this.mediaBuyID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("campaignID:");
    sb.append(this.campaignID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountID:");
    sb.append(this.accountID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeType:");
    sb.append(this.chargeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("umbrellaRate:");
    sb.append(this.umbrellaRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("network:");
    sb.append(this.network);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("budget:");
    if (this.budget == null) {
      sb.append("null");
    } else {
      sb.append(this.budget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pacingDisabled:");
    sb.append(this.pacingDisabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("capLength:");
    sb.append(this.capLength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("capCount:");
    sb.append(this.capCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDailyHit:");
    if (this.maxDailyHit == null) {
      sb.append("null");
    } else {
      sb.append(this.maxDailyHit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geoLocation:");
    if (this.geoLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.geoLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    if (this.balance == null) {
      sb.append("null");
    } else {
      sb.append(this.balance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyType:");
    sb.append(this.buyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubChargeTypeForCPA:");
    sb.append(this.pubChargeTypeForCPA);
    first = false;
    if (!first) sb.append(", ");
    sb.append("advFeature:");
    sb.append(this.advFeature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dailyHit:");
    if (this.dailyHit == null) {
      sb.append("null");
    } else {
      sb.append(this.dailyHit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeable:");
    sb.append(this.chargeable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdPartyParam:");
    if (this.thirdPartyParam == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdPartyParam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdPartyPubTracking:");
    if (this.thirdPartyPubTracking == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdPartyPubTracking);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("surveyPercent:");
    sb.append(this.surveyPercent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minuteBudget:");
    if (this.minuteBudget == null) {
      sb.append("null");
    } else {
      sb.append(this.minuteBudget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("specificBuy:");
    sb.append(this.specificBuy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("surveyID:");
    sb.append(this.surveyID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("surveyType:");
    sb.append(this.surveyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freqTarget:");
    sb.append(this.freqTarget);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rules:");
    if (this.rules == null) {
      sb.append("null");
    } else {
      sb.append(this.rules);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nielsenTracking:");
    if (this.nielsenTracking == null) {
      sb.append("null");
    } else {
      sb.append(this.nielsenTracking);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowType:");
    sb.append(this.flowType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payment:");
    sb.append(this.payment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAFPSource:");
    sb.append(this.isAFPSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("negative_campiagn_id:");
    if (this.negative_campiagn_id == null) {
      sb.append("null");
    } else {
      sb.append(this.negative_campiagn_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteTrackingIdForCpa:");
    sb.append(this.siteTrackingIdForCpa);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubDefaultRateForCpa:");
    sb.append(this.pubDefaultRateForCpa);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'mediaBuyID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'campaignID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'accountID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'chargeType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'umbrellaRate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'network' because it's a primitive and you chose the non-beans generator.
    if (startTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not present! Struct: " + toString());
    }
    if (endTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' was not present! Struct: " + toString());
    }
    if (budget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'budget' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'pacingDisabled' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'capLength' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'capCount' because it's a primitive and you chose the non-beans generator.
    if (maxDailyHit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxDailyHit' was not present! Struct: " + toString());
    }
    if (geoLocation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'geoLocation' was not present! Struct: " + toString());
    }
    if (balance == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'balance' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'buyType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pubChargeTypeForCPA' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'advFeature' because it's a primitive and you chose the non-beans generator.
    if (dailyHit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dailyHit' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'chargeable' because it's a primitive and you chose the non-beans generator.
    if (thirdPartyParam == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'thirdPartyParam' was not present! Struct: " + toString());
    }
    if (thirdPartyPubTracking == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'thirdPartyPubTracking' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'surveyPercent' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'priority' because it's a primitive and you chose the non-beans generator.
    if (minuteBudget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'minuteBudget' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'specificBuy' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'surveyID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'surveyType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'freqTarget' because it's a primitive and you chose the non-beans generator.
    if (rules == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rules' was not present! Struct: " + toString());
    }
    if (nielsenTracking == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nielsenTracking' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'flowType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'payment' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isAFPSource' because it's a primitive and you chose the non-beans generator.
    if (negative_campiagn_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'negative_campiagn_id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'siteTrackingIdForCpa' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pubDefaultRateForCpa' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_AdManager_Media_BuyStandardSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Media_BuyStandardScheme getScheme() {
      return new TDbSync_AdManager_Media_BuyStandardScheme();
    }
  }

  private static class TDbSync_AdManager_Media_BuyStandardScheme extends StandardScheme<TDbSync_AdManager_Media_Buy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_AdManager_Media_Buy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEDIA_BUY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaBuyID = iprot.readI32();
              struct.setMediaBuyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CAMPAIGN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.campaignID = iprot.readI32();
              struct.setCampaignIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountID = iprot.readI32();
              struct.setAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHARGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chargeType = iprot.readI32();
              struct.setChargeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rate = iprot.readI32();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UMBRELLA_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.umbrellaRate = iprot.readI32();
              struct.setUmbrellaRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NETWORK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.network = iprot.readI32();
              struct.setNetworkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.budget = iprot.readString();
              struct.setBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PACING_DISABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pacingDisabled = iprot.readI32();
              struct.setPacingDisabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CAP_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.capLength = iprot.readI32();
              struct.setCapLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CAP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.capCount = iprot.readI32();
              struct.setCapCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MAX_DAILY_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxDailyHit = iprot.readString();
              struct.setMaxDailyHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // GEO_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.geoLocation = iprot.readString();
              struct.setGeoLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.balance = iprot.readString();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BUY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buyType = iprot.readI32();
              struct.setBuyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PUB_CHARGE_TYPE_FOR_CPA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pubChargeTypeForCPA = iprot.readI32();
              struct.setPubChargeTypeForCPAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ADV_FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.advFeature = iprot.readI64();
              struct.setAdvFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DAILY_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dailyHit = iprot.readString();
              struct.setDailyHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CHARGEABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chargeable = iprot.readI32();
              struct.setChargeableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // THIRD_PARTY_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdPartyParam = iprot.readString();
              struct.setThirdPartyParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // THIRD_PARTY_PUB_TRACKING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdPartyPubTracking = iprot.readString();
              struct.setThirdPartyPubTrackingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SURVEY_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.surveyPercent = iprot.readI32();
              struct.setSurveyPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // MINUTE_BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.minuteBudget = iprot.readString();
              struct.setMinuteBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // SPECIFIC_BUY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specificBuy = iprot.readI32();
              struct.setSpecificBuyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // SURVEY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.surveyID = iprot.readI32();
              struct.setSurveyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // SURVEY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.surveyType = iprot.readI32();
              struct.setSurveyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // FREQ_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freqTarget = iprot.readI32();
              struct.setFreqTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // RULES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rules = iprot.readString();
              struct.setRulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // NIELSEN_TRACKING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nielsenTracking = iprot.readString();
              struct.setNielsenTrackingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // FLOW_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flowType = iprot.readI32();
              struct.setFlowTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // PAYMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.payment = iprot.readI32();
              struct.setPaymentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // IS_AFPSOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isAFPSource = iprot.readI32();
              struct.setIsAFPSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // NEGATIVE_CAMPIAGN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.negative_campiagn_id = iprot.readString();
              struct.setNegative_campiagn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // SITE_TRACKING_ID_FOR_CPA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.siteTrackingIdForCpa = iprot.readI32();
              struct.setSiteTrackingIdForCpaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // PUB_DEFAULT_RATE_FOR_CPA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pubDefaultRateForCpa = iprot.readI32();
              struct.setPubDefaultRateForCpaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMediaBuyID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaBuyID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCampaignID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'campaignID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAccountID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accountID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetChargeType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'chargeType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUmbrellaRate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'umbrellaRate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNetwork()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'network' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPacingDisabled()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pacingDisabled' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCapLength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'capLength' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCapCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'capCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBuyType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'buyType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPubChargeTypeForCPA()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pubChargeTypeForCPA' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAdvFeature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'advFeature' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetChargeable()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'chargeable' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSurveyPercent()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'surveyPercent' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPriority()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'priority' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpecificBuy()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'specificBuy' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSurveyID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'surveyID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSurveyType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'surveyType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFreqTarget()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'freqTarget' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFlowType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'flowType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPayment()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'payment' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsAFPSource()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isAFPSource' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSiteTrackingIdForCpa()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'siteTrackingIdForCpa' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPubDefaultRateForCpa()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pubDefaultRateForCpa' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_AdManager_Media_Buy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEDIA_BUY_ID_FIELD_DESC);
      oprot.writeI32(struct.mediaBuyID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAMPAIGN_ID_FIELD_DESC);
      oprot.writeI32(struct.campaignID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
      oprot.writeI32(struct.accountID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHARGE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.chargeType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeI32(struct.rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UMBRELLA_RATE_FIELD_DESC);
      oprot.writeI32(struct.umbrellaRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NETWORK_FIELD_DESC);
      oprot.writeI32(struct.network);
      oprot.writeFieldEnd();
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.budget != null) {
        oprot.writeFieldBegin(BUDGET_FIELD_DESC);
        oprot.writeString(struct.budget);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PACING_DISABLED_FIELD_DESC);
      oprot.writeI32(struct.pacingDisabled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAP_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.capLength);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAP_COUNT_FIELD_DESC);
      oprot.writeI32(struct.capCount);
      oprot.writeFieldEnd();
      if (struct.maxDailyHit != null) {
        oprot.writeFieldBegin(MAX_DAILY_HIT_FIELD_DESC);
        oprot.writeString(struct.maxDailyHit);
        oprot.writeFieldEnd();
      }
      if (struct.geoLocation != null) {
        oprot.writeFieldBegin(GEO_LOCATION_FIELD_DESC);
        oprot.writeString(struct.geoLocation);
        oprot.writeFieldEnd();
      }
      if (struct.balance != null) {
        oprot.writeFieldBegin(BALANCE_FIELD_DESC);
        oprot.writeString(struct.balance);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.buyType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUB_CHARGE_TYPE_FOR_CPA_FIELD_DESC);
      oprot.writeI32(struct.pubChargeTypeForCPA);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADV_FEATURE_FIELD_DESC);
      oprot.writeI64(struct.advFeature);
      oprot.writeFieldEnd();
      if (struct.dailyHit != null) {
        oprot.writeFieldBegin(DAILY_HIT_FIELD_DESC);
        oprot.writeString(struct.dailyHit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHARGEABLE_FIELD_DESC);
      oprot.writeI32(struct.chargeable);
      oprot.writeFieldEnd();
      if (struct.thirdPartyParam != null) {
        oprot.writeFieldBegin(THIRD_PARTY_PARAM_FIELD_DESC);
        oprot.writeString(struct.thirdPartyParam);
        oprot.writeFieldEnd();
      }
      if (struct.thirdPartyPubTracking != null) {
        oprot.writeFieldBegin(THIRD_PARTY_PUB_TRACKING_FIELD_DESC);
        oprot.writeString(struct.thirdPartyPubTracking);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SURVEY_PERCENT_FIELD_DESC);
      oprot.writeI32(struct.surveyPercent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      if (struct.minuteBudget != null) {
        oprot.writeFieldBegin(MINUTE_BUDGET_FIELD_DESC);
        oprot.writeString(struct.minuteBudget);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SPECIFIC_BUY_FIELD_DESC);
      oprot.writeI32(struct.specificBuy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SURVEY_ID_FIELD_DESC);
      oprot.writeI32(struct.surveyID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SURVEY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.surveyType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREQ_TARGET_FIELD_DESC);
      oprot.writeI32(struct.freqTarget);
      oprot.writeFieldEnd();
      if (struct.rules != null) {
        oprot.writeFieldBegin(RULES_FIELD_DESC);
        oprot.writeString(struct.rules);
        oprot.writeFieldEnd();
      }
      if (struct.nielsenTracking != null) {
        oprot.writeFieldBegin(NIELSEN_TRACKING_FIELD_DESC);
        oprot.writeString(struct.nielsenTracking);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLOW_TYPE_FIELD_DESC);
      oprot.writeI32(struct.flowType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYMENT_FIELD_DESC);
      oprot.writeI32(struct.payment);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_AFPSOURCE_FIELD_DESC);
      oprot.writeI32(struct.isAFPSource);
      oprot.writeFieldEnd();
      if (struct.negative_campiagn_id != null) {
        oprot.writeFieldBegin(NEGATIVE_CAMPIAGN_ID_FIELD_DESC);
        oprot.writeString(struct.negative_campiagn_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SITE_TRACKING_ID_FOR_CPA_FIELD_DESC);
      oprot.writeI32(struct.siteTrackingIdForCpa);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PUB_DEFAULT_RATE_FOR_CPA_FIELD_DESC);
      oprot.writeI32(struct.pubDefaultRateForCpa);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_AdManager_Media_BuyTupleSchemeFactory implements SchemeFactory {
    public TDbSync_AdManager_Media_BuyTupleScheme getScheme() {
      return new TDbSync_AdManager_Media_BuyTupleScheme();
    }
  }

  private static class TDbSync_AdManager_Media_BuyTupleScheme extends TupleScheme<TDbSync_AdManager_Media_Buy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Media_Buy struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.mediaBuyID);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeI32(struct.campaignID);
      oprot.writeI32(struct.version);
      oprot.writeI32(struct.accountID);
      oprot.writeI32(struct.chargeType);
      oprot.writeI32(struct.rate);
      oprot.writeI32(struct.umbrellaRate);
      oprot.writeI32(struct.network);
      oprot.writeString(struct.startTime);
      oprot.writeString(struct.endTime);
      oprot.writeString(struct.budget);
      oprot.writeI32(struct.pacingDisabled);
      oprot.writeI32(struct.capLength);
      oprot.writeI32(struct.capCount);
      oprot.writeString(struct.maxDailyHit);
      oprot.writeString(struct.geoLocation);
      oprot.writeString(struct.balance);
      oprot.writeI32(struct.buyType);
      oprot.writeI32(struct.pubChargeTypeForCPA);
      oprot.writeI64(struct.advFeature);
      oprot.writeString(struct.dailyHit);
      oprot.writeI32(struct.chargeable);
      oprot.writeString(struct.thirdPartyParam);
      oprot.writeString(struct.thirdPartyPubTracking);
      oprot.writeI32(struct.surveyPercent);
      oprot.writeI32(struct.priority);
      oprot.writeString(struct.minuteBudget);
      oprot.writeI32(struct.specificBuy);
      oprot.writeI32(struct.surveyID);
      oprot.writeI32(struct.surveyType);
      oprot.writeI32(struct.freqTarget);
      oprot.writeString(struct.rules);
      oprot.writeString(struct.nielsenTracking);
      oprot.writeI32(struct.flowType);
      oprot.writeI32(struct.payment);
      oprot.writeI32(struct.isAFPSource);
      oprot.writeString(struct.negative_campiagn_id);
      oprot.writeI32(struct.siteTrackingIdForCpa);
      oprot.writeI32(struct.pubDefaultRateForCpa);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_AdManager_Media_Buy struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mediaBuyID = iprot.readI32();
      struct.setMediaBuyIDIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.campaignID = iprot.readI32();
      struct.setCampaignIDIsSet(true);
      struct.version = iprot.readI32();
      struct.setVersionIsSet(true);
      struct.accountID = iprot.readI32();
      struct.setAccountIDIsSet(true);
      struct.chargeType = iprot.readI32();
      struct.setChargeTypeIsSet(true);
      struct.rate = iprot.readI32();
      struct.setRateIsSet(true);
      struct.umbrellaRate = iprot.readI32();
      struct.setUmbrellaRateIsSet(true);
      struct.network = iprot.readI32();
      struct.setNetworkIsSet(true);
      struct.startTime = iprot.readString();
      struct.setStartTimeIsSet(true);
      struct.endTime = iprot.readString();
      struct.setEndTimeIsSet(true);
      struct.budget = iprot.readString();
      struct.setBudgetIsSet(true);
      struct.pacingDisabled = iprot.readI32();
      struct.setPacingDisabledIsSet(true);
      struct.capLength = iprot.readI32();
      struct.setCapLengthIsSet(true);
      struct.capCount = iprot.readI32();
      struct.setCapCountIsSet(true);
      struct.maxDailyHit = iprot.readString();
      struct.setMaxDailyHitIsSet(true);
      struct.geoLocation = iprot.readString();
      struct.setGeoLocationIsSet(true);
      struct.balance = iprot.readString();
      struct.setBalanceIsSet(true);
      struct.buyType = iprot.readI32();
      struct.setBuyTypeIsSet(true);
      struct.pubChargeTypeForCPA = iprot.readI32();
      struct.setPubChargeTypeForCPAIsSet(true);
      struct.advFeature = iprot.readI64();
      struct.setAdvFeatureIsSet(true);
      struct.dailyHit = iprot.readString();
      struct.setDailyHitIsSet(true);
      struct.chargeable = iprot.readI32();
      struct.setChargeableIsSet(true);
      struct.thirdPartyParam = iprot.readString();
      struct.setThirdPartyParamIsSet(true);
      struct.thirdPartyPubTracking = iprot.readString();
      struct.setThirdPartyPubTrackingIsSet(true);
      struct.surveyPercent = iprot.readI32();
      struct.setSurveyPercentIsSet(true);
      struct.priority = iprot.readI32();
      struct.setPriorityIsSet(true);
      struct.minuteBudget = iprot.readString();
      struct.setMinuteBudgetIsSet(true);
      struct.specificBuy = iprot.readI32();
      struct.setSpecificBuyIsSet(true);
      struct.surveyID = iprot.readI32();
      struct.setSurveyIDIsSet(true);
      struct.surveyType = iprot.readI32();
      struct.setSurveyTypeIsSet(true);
      struct.freqTarget = iprot.readI32();
      struct.setFreqTargetIsSet(true);
      struct.rules = iprot.readString();
      struct.setRulesIsSet(true);
      struct.nielsenTracking = iprot.readString();
      struct.setNielsenTrackingIsSet(true);
      struct.flowType = iprot.readI32();
      struct.setFlowTypeIsSet(true);
      struct.payment = iprot.readI32();
      struct.setPaymentIsSet(true);
      struct.isAFPSource = iprot.readI32();
      struct.setIsAFPSourceIsSet(true);
      struct.negative_campiagn_id = iprot.readString();
      struct.setNegative_campiagn_idIsSet(true);
      struct.siteTrackingIdForCpa = iprot.readI32();
      struct.setSiteTrackingIdForCpaIsSet(true);
      struct.pubDefaultRateForCpa = iprot.readI32();
      struct.setPubDefaultRateForCpaIsSet(true);
    }
  }

}

