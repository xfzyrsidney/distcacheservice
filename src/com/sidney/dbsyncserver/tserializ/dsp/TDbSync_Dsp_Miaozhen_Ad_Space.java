/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.dsp;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_Dsp_Miaozhen_Ad_Space implements org.apache.thrift.TBase<TDbSync_Dsp_Miaozhen_Ad_Space, TDbSync_Dsp_Miaozhen_Ad_Space._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_Dsp_Miaozhen_Ad_Space> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_Dsp_Miaozhen_Ad_Space");

  private static final org.apache.thrift.protocol.TField LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("locationID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOCATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("locationName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AD_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("adSize", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BID_FLOOR_FIELD_DESC = new org.apache.thrift.protocol.TField("bidFloor", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BLOCK_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("blockCategory", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ALLOW_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("allowFile", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_Dsp_Miaozhen_Ad_SpaceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_Dsp_Miaozhen_Ad_SpaceTupleSchemeFactory());
  }

  public String locationID; // required
  public int status; // required
  public String lastChanged; // required
  public String locationName; // required
  public String adSize; // required
  public String bidFloor; // required
  public String blockCategory; // required
  public String allowFile; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCATION_ID((short)1, "locationID"),
    STATUS((short)2, "status"),
    LAST_CHANGED((short)3, "lastChanged"),
    LOCATION_NAME((short)4, "locationName"),
    AD_SIZE((short)5, "adSize"),
    BID_FLOOR((short)6, "bidFloor"),
    BLOCK_CATEGORY((short)7, "blockCategory"),
    ALLOW_FILE((short)8, "allowFile");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATION_ID
          return LOCATION_ID;
        case 2: // STATUS
          return STATUS;
        case 3: // LAST_CHANGED
          return LAST_CHANGED;
        case 4: // LOCATION_NAME
          return LOCATION_NAME;
        case 5: // AD_SIZE
          return AD_SIZE;
        case 6: // BID_FLOOR
          return BID_FLOOR;
        case 7: // BLOCK_CATEGORY
          return BLOCK_CATEGORY;
        case 8: // ALLOW_FILE
          return ALLOW_FILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("locationID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("locationName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_SIZE, new org.apache.thrift.meta_data.FieldMetaData("adSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BID_FLOOR, new org.apache.thrift.meta_data.FieldMetaData("bidFloor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOCK_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("blockCategory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOW_FILE, new org.apache.thrift.meta_data.FieldMetaData("allowFile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_Dsp_Miaozhen_Ad_Space.class, metaDataMap);
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space() {
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space(
    String locationID,
    int status,
    String lastChanged,
    String locationName,
    String adSize,
    String bidFloor,
    String blockCategory,
    String allowFile)
  {
    this();
    this.locationID = locationID;
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.locationName = locationName;
    this.adSize = adSize;
    this.bidFloor = bidFloor;
    this.blockCategory = blockCategory;
    this.allowFile = allowFile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_Dsp_Miaozhen_Ad_Space(TDbSync_Dsp_Miaozhen_Ad_Space other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLocationID()) {
      this.locationID = other.locationID;
    }
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    if (other.isSetLocationName()) {
      this.locationName = other.locationName;
    }
    if (other.isSetAdSize()) {
      this.adSize = other.adSize;
    }
    if (other.isSetBidFloor()) {
      this.bidFloor = other.bidFloor;
    }
    if (other.isSetBlockCategory()) {
      this.blockCategory = other.blockCategory;
    }
    if (other.isSetAllowFile()) {
      this.allowFile = other.allowFile;
    }
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space deepCopy() {
    return new TDbSync_Dsp_Miaozhen_Ad_Space(this);
  }

  @Override
  public void clear() {
    this.locationID = null;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    this.locationName = null;
    this.adSize = null;
    this.bidFloor = null;
    this.blockCategory = null;
    this.allowFile = null;
  }

  public String getLocationID() {
    return this.locationID;
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space setLocationID(String locationID) {
    this.locationID = locationID;
    return this;
  }

  public void unsetLocationID() {
    this.locationID = null;
  }

  /** Returns true if field locationID is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationID() {
    return this.locationID != null;
  }

  public void setLocationIDIsSet(boolean value) {
    if (!value) {
      this.locationID = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public String getLocationName() {
    return this.locationName;
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space setLocationName(String locationName) {
    this.locationName = locationName;
    return this;
  }

  public void unsetLocationName() {
    this.locationName = null;
  }

  /** Returns true if field locationName is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationName() {
    return this.locationName != null;
  }

  public void setLocationNameIsSet(boolean value) {
    if (!value) {
      this.locationName = null;
    }
  }

  public String getAdSize() {
    return this.adSize;
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space setAdSize(String adSize) {
    this.adSize = adSize;
    return this;
  }

  public void unsetAdSize() {
    this.adSize = null;
  }

  /** Returns true if field adSize is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSize() {
    return this.adSize != null;
  }

  public void setAdSizeIsSet(boolean value) {
    if (!value) {
      this.adSize = null;
    }
  }

  public String getBidFloor() {
    return this.bidFloor;
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space setBidFloor(String bidFloor) {
    this.bidFloor = bidFloor;
    return this;
  }

  public void unsetBidFloor() {
    this.bidFloor = null;
  }

  /** Returns true if field bidFloor is set (has been assigned a value) and false otherwise */
  public boolean isSetBidFloor() {
    return this.bidFloor != null;
  }

  public void setBidFloorIsSet(boolean value) {
    if (!value) {
      this.bidFloor = null;
    }
  }

  public String getBlockCategory() {
    return this.blockCategory;
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space setBlockCategory(String blockCategory) {
    this.blockCategory = blockCategory;
    return this;
  }

  public void unsetBlockCategory() {
    this.blockCategory = null;
  }

  /** Returns true if field blockCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockCategory() {
    return this.blockCategory != null;
  }

  public void setBlockCategoryIsSet(boolean value) {
    if (!value) {
      this.blockCategory = null;
    }
  }

  public String getAllowFile() {
    return this.allowFile;
  }

  public TDbSync_Dsp_Miaozhen_Ad_Space setAllowFile(String allowFile) {
    this.allowFile = allowFile;
    return this;
  }

  public void unsetAllowFile() {
    this.allowFile = null;
  }

  /** Returns true if field allowFile is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowFile() {
    return this.allowFile != null;
  }

  public void setAllowFileIsSet(boolean value) {
    if (!value) {
      this.allowFile = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOCATION_ID:
      if (value == null) {
        unsetLocationID();
      } else {
        setLocationID((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case LOCATION_NAME:
      if (value == null) {
        unsetLocationName();
      } else {
        setLocationName((String)value);
      }
      break;

    case AD_SIZE:
      if (value == null) {
        unsetAdSize();
      } else {
        setAdSize((String)value);
      }
      break;

    case BID_FLOOR:
      if (value == null) {
        unsetBidFloor();
      } else {
        setBidFloor((String)value);
      }
      break;

    case BLOCK_CATEGORY:
      if (value == null) {
        unsetBlockCategory();
      } else {
        setBlockCategory((String)value);
      }
      break;

    case ALLOW_FILE:
      if (value == null) {
        unsetAllowFile();
      } else {
        setAllowFile((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATION_ID:
      return getLocationID();

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case LOCATION_NAME:
      return getLocationName();

    case AD_SIZE:
      return getAdSize();

    case BID_FLOOR:
      return getBidFloor();

    case BLOCK_CATEGORY:
      return getBlockCategory();

    case ALLOW_FILE:
      return getAllowFile();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOCATION_ID:
      return isSetLocationID();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case LOCATION_NAME:
      return isSetLocationName();
    case AD_SIZE:
      return isSetAdSize();
    case BID_FLOOR:
      return isSetBidFloor();
    case BLOCK_CATEGORY:
      return isSetBlockCategory();
    case ALLOW_FILE:
      return isSetAllowFile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_Dsp_Miaozhen_Ad_Space)
      return this.equals((TDbSync_Dsp_Miaozhen_Ad_Space)that);
    return false;
  }

  public boolean equals(TDbSync_Dsp_Miaozhen_Ad_Space that) {
    if (that == null)
      return false;

    boolean this_present_locationID = true && this.isSetLocationID();
    boolean that_present_locationID = true && that.isSetLocationID();
    if (this_present_locationID || that_present_locationID) {
      if (!(this_present_locationID && that_present_locationID))
        return false;
      if (!this.locationID.equals(that.locationID))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_locationName = true && this.isSetLocationName();
    boolean that_present_locationName = true && that.isSetLocationName();
    if (this_present_locationName || that_present_locationName) {
      if (!(this_present_locationName && that_present_locationName))
        return false;
      if (!this.locationName.equals(that.locationName))
        return false;
    }

    boolean this_present_adSize = true && this.isSetAdSize();
    boolean that_present_adSize = true && that.isSetAdSize();
    if (this_present_adSize || that_present_adSize) {
      if (!(this_present_adSize && that_present_adSize))
        return false;
      if (!this.adSize.equals(that.adSize))
        return false;
    }

    boolean this_present_bidFloor = true && this.isSetBidFloor();
    boolean that_present_bidFloor = true && that.isSetBidFloor();
    if (this_present_bidFloor || that_present_bidFloor) {
      if (!(this_present_bidFloor && that_present_bidFloor))
        return false;
      if (!this.bidFloor.equals(that.bidFloor))
        return false;
    }

    boolean this_present_blockCategory = true && this.isSetBlockCategory();
    boolean that_present_blockCategory = true && that.isSetBlockCategory();
    if (this_present_blockCategory || that_present_blockCategory) {
      if (!(this_present_blockCategory && that_present_blockCategory))
        return false;
      if (!this.blockCategory.equals(that.blockCategory))
        return false;
    }

    boolean this_present_allowFile = true && this.isSetAllowFile();
    boolean that_present_allowFile = true && that.isSetAllowFile();
    if (this_present_allowFile || that_present_allowFile) {
      if (!(this_present_allowFile && that_present_allowFile))
        return false;
      if (!this.allowFile.equals(that.allowFile))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_Dsp_Miaozhen_Ad_Space other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLocationID()).compareTo(other.isSetLocationID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationID, other.locationID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationName()).compareTo(other.isSetLocationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationName, other.locationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdSize()).compareTo(other.isSetAdSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSize, other.adSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidFloor()).compareTo(other.isSetBidFloor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidFloor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidFloor, other.bidFloor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockCategory()).compareTo(other.isSetBlockCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockCategory, other.blockCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowFile()).compareTo(other.isSetAllowFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowFile, other.allowFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_Dsp_Miaozhen_Ad_Space(");
    boolean first = true;

    sb.append("locationID:");
    if (this.locationID == null) {
      sb.append("null");
    } else {
      sb.append(this.locationID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationName:");
    if (this.locationName == null) {
      sb.append("null");
    } else {
      sb.append(this.locationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adSize:");
    if (this.adSize == null) {
      sb.append("null");
    } else {
      sb.append(this.adSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidFloor:");
    if (this.bidFloor == null) {
      sb.append("null");
    } else {
      sb.append(this.bidFloor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockCategory:");
    if (this.blockCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.blockCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowFile:");
    if (this.allowFile == null) {
      sb.append("null");
    } else {
      sb.append(this.allowFile);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (locationID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'locationID' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    if (locationName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'locationName' was not present! Struct: " + toString());
    }
    if (adSize == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'adSize' was not present! Struct: " + toString());
    }
    if (bidFloor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bidFloor' was not present! Struct: " + toString());
    }
    if (blockCategory == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blockCategory' was not present! Struct: " + toString());
    }
    if (allowFile == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'allowFile' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_Dsp_Miaozhen_Ad_SpaceStandardSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Miaozhen_Ad_SpaceStandardScheme getScheme() {
      return new TDbSync_Dsp_Miaozhen_Ad_SpaceStandardScheme();
    }
  }

  private static class TDbSync_Dsp_Miaozhen_Ad_SpaceStandardScheme extends StandardScheme<TDbSync_Dsp_Miaozhen_Ad_Space> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_Dsp_Miaozhen_Ad_Space struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationID = iprot.readString();
              struct.setLocationIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOCATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationName = iprot.readString();
              struct.setLocationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AD_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adSize = iprot.readString();
              struct.setAdSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BID_FLOOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bidFloor = iprot.readString();
              struct.setBidFloorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BLOCK_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blockCategory = iprot.readString();
              struct.setBlockCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALLOW_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.allowFile = iprot.readString();
              struct.setAllowFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_Dsp_Miaozhen_Ad_Space struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.locationID != null) {
        oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
        oprot.writeString(struct.locationID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      if (struct.locationName != null) {
        oprot.writeFieldBegin(LOCATION_NAME_FIELD_DESC);
        oprot.writeString(struct.locationName);
        oprot.writeFieldEnd();
      }
      if (struct.adSize != null) {
        oprot.writeFieldBegin(AD_SIZE_FIELD_DESC);
        oprot.writeString(struct.adSize);
        oprot.writeFieldEnd();
      }
      if (struct.bidFloor != null) {
        oprot.writeFieldBegin(BID_FLOOR_FIELD_DESC);
        oprot.writeString(struct.bidFloor);
        oprot.writeFieldEnd();
      }
      if (struct.blockCategory != null) {
        oprot.writeFieldBegin(BLOCK_CATEGORY_FIELD_DESC);
        oprot.writeString(struct.blockCategory);
        oprot.writeFieldEnd();
      }
      if (struct.allowFile != null) {
        oprot.writeFieldBegin(ALLOW_FILE_FIELD_DESC);
        oprot.writeString(struct.allowFile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_Dsp_Miaozhen_Ad_SpaceTupleSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Miaozhen_Ad_SpaceTupleScheme getScheme() {
      return new TDbSync_Dsp_Miaozhen_Ad_SpaceTupleScheme();
    }
  }

  private static class TDbSync_Dsp_Miaozhen_Ad_SpaceTupleScheme extends TupleScheme<TDbSync_Dsp_Miaozhen_Ad_Space> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Miaozhen_Ad_Space struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.locationID);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeString(struct.locationName);
      oprot.writeString(struct.adSize);
      oprot.writeString(struct.bidFloor);
      oprot.writeString(struct.blockCategory);
      oprot.writeString(struct.allowFile);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Miaozhen_Ad_Space struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.locationID = iprot.readString();
      struct.setLocationIDIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.locationName = iprot.readString();
      struct.setLocationNameIsSet(true);
      struct.adSize = iprot.readString();
      struct.setAdSizeIsSet(true);
      struct.bidFloor = iprot.readString();
      struct.setBidFloorIsSet(true);
      struct.blockCategory = iprot.readString();
      struct.setBlockCategoryIsSet(true);
      struct.allowFile = iprot.readString();
      struct.setAllowFileIsSet(true);
    }
  }

}

