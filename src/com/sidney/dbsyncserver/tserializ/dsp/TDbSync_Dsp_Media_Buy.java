/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.dsp;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_Dsp_Media_Buy implements org.apache.thrift.TBase<TDbSync_Dsp_Media_Buy, TDbSync_Dsp_Media_Buy._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_Dsp_Media_Buy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_Dsp_Media_Buy");

  private static final org.apache.thrift.protocol.TField I_D_FIELD_DESC = new org.apache.thrift.protocol.TField("iD", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campaignID", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("budget", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField KPI_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("kpiAmount", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField AD_EXCHANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("adExchanges", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BID_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPrice", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BID_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPriceType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATIVE_ROTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("creativeRotation", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField AD_SIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("adSizes", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField AD_POSITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("adPositions", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField AD_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("adTypes", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ADV_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("advFeature", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField TOTAL_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHit", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DAILY_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyHit", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField BUDGET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("budgetType", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField KPI_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("kpiType", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField MEDIAS_FIELD_DESC = new org.apache.thrift.protocol.TField("medias", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField THIRD_PARTY_PUB_TRACKING_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdPartyPubTracking", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField THIRDPARTY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdpartyParam", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField MEDIA_BUY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaBuyType", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField PACING_DISABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("pacingDisabled", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField MAX_DAILY_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDailyHit", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField QUANTITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("quantityType", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField QUANTITY_BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("quantityBudget", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField DAILY_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyQuantity", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField MAX_DAILY_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDailyQuantity", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("income", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField TOTAL_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalQuantity", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField PV_HIT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pvHitRate", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("Priority", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField NON_PV_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("nonPvRate", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField MAKEUP_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("makeupRate", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField USE_HTML_SNIPPET_FIELD_DESC = new org.apache.thrift.protocol.TField("useHtmlSnippet", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField PACING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("pacingType", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField CLICK_BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("clickBudget", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField MAX_DAILY_CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDailyClick", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField DAILY_HIT_CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyHitClick", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField TOTAL_HIT_CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHitClick", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField PV_BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("pvBudget", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField MAX_DAILY_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDailyPV", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField DAILY_HIT_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyHitPV", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField TOTAL_HIT_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHitPV", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField CREATIVE_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("creativeTags", org.apache.thrift.protocol.TType.STRING, (short)51);
  private static final org.apache.thrift.protocol.TField STRATEGY_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyGroupId", org.apache.thrift.protocol.TType.I32, (short)52);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_Dsp_Media_BuyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_Dsp_Media_BuyTupleSchemeFactory());
  }

  public int iD; // required
  public int status; // required
  public String lastChanged; // required
  public String name; // required
  public int campaignID; // required
  public String budget; // required
  public String kpiAmount; // required
  public String adExchanges; // required
  public String bidPrice; // required
  public int bidPriceType; // required
  public int creativeRotation; // required
  public String adSizes; // required
  public String adPositions; // required
  public String adTypes; // required
  public int advFeature; // required
  public String totalHit; // required
  public String dailyHit; // required
  public int budgetType; // required
  public int kpiType; // required
  public String medias; // required
  public String startTime; // required
  public String endTime; // required
  public String thirdPartyPubTracking; // required
  public String thirdpartyParam; // required
  public int mediaType; // required
  public int mediaBuyType; // required
  public int pacingDisabled; // required
  public String maxDailyHit; // required
  public int quantityType; // required
  public String quantityBudget; // required
  public String balance; // required
  public String dailyQuantity; // required
  public String maxDailyQuantity; // required
  public String income; // required
  public int source; // required
  public String totalQuantity; // required
  public int pvHitRate; // required
  public int Priority; // required
  public int nonPvRate; // required
  public String makeupRate; // required
  public int useHtmlSnippet; // required
  public int pacingType; // required
  public String clickBudget; // required
  public String maxDailyClick; // required
  public String dailyHitClick; // required
  public String totalHitClick; // required
  public String pvBudget; // required
  public String maxDailyPV; // required
  public String dailyHitPV; // required
  public String totalHitPV; // required
  public String creativeTags; // required
  public int strategyGroupId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_D((short)1, "iD"),
    STATUS((short)2, "status"),
    LAST_CHANGED((short)3, "lastChanged"),
    NAME((short)4, "name"),
    CAMPAIGN_ID((short)5, "campaignID"),
    BUDGET((short)6, "budget"),
    KPI_AMOUNT((short)7, "kpiAmount"),
    AD_EXCHANGES((short)8, "adExchanges"),
    BID_PRICE((short)9, "bidPrice"),
    BID_PRICE_TYPE((short)10, "bidPriceType"),
    CREATIVE_ROTATION((short)11, "creativeRotation"),
    AD_SIZES((short)12, "adSizes"),
    AD_POSITIONS((short)13, "adPositions"),
    AD_TYPES((short)14, "adTypes"),
    ADV_FEATURE((short)15, "advFeature"),
    TOTAL_HIT((short)16, "totalHit"),
    DAILY_HIT((short)17, "dailyHit"),
    BUDGET_TYPE((short)18, "budgetType"),
    KPI_TYPE((short)19, "kpiType"),
    MEDIAS((short)20, "medias"),
    START_TIME((short)21, "startTime"),
    END_TIME((short)22, "endTime"),
    THIRD_PARTY_PUB_TRACKING((short)23, "thirdPartyPubTracking"),
    THIRDPARTY_PARAM((short)24, "thirdpartyParam"),
    MEDIA_TYPE((short)25, "mediaType"),
    MEDIA_BUY_TYPE((short)26, "mediaBuyType"),
    PACING_DISABLED((short)27, "pacingDisabled"),
    MAX_DAILY_HIT((short)28, "maxDailyHit"),
    QUANTITY_TYPE((short)29, "quantityType"),
    QUANTITY_BUDGET((short)30, "quantityBudget"),
    BALANCE((short)31, "balance"),
    DAILY_QUANTITY((short)32, "dailyQuantity"),
    MAX_DAILY_QUANTITY((short)33, "maxDailyQuantity"),
    INCOME((short)34, "income"),
    SOURCE((short)35, "source"),
    TOTAL_QUANTITY((short)36, "totalQuantity"),
    PV_HIT_RATE((short)37, "pvHitRate"),
    PRIORITY((short)38, "Priority"),
    NON_PV_RATE((short)39, "nonPvRate"),
    MAKEUP_RATE((short)40, "makeupRate"),
    USE_HTML_SNIPPET((short)41, "useHtmlSnippet"),
    PACING_TYPE((short)42, "pacingType"),
    CLICK_BUDGET((short)43, "clickBudget"),
    MAX_DAILY_CLICK((short)44, "maxDailyClick"),
    DAILY_HIT_CLICK((short)45, "dailyHitClick"),
    TOTAL_HIT_CLICK((short)46, "totalHitClick"),
    PV_BUDGET((short)47, "pvBudget"),
    MAX_DAILY_PV((short)48, "maxDailyPV"),
    DAILY_HIT_PV((short)49, "dailyHitPV"),
    TOTAL_HIT_PV((short)50, "totalHitPV"),
    CREATIVE_TAGS((short)51, "creativeTags"),
    STRATEGY_GROUP_ID((short)52, "strategyGroupId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_D
          return I_D;
        case 2: // STATUS
          return STATUS;
        case 3: // LAST_CHANGED
          return LAST_CHANGED;
        case 4: // NAME
          return NAME;
        case 5: // CAMPAIGN_ID
          return CAMPAIGN_ID;
        case 6: // BUDGET
          return BUDGET;
        case 7: // KPI_AMOUNT
          return KPI_AMOUNT;
        case 8: // AD_EXCHANGES
          return AD_EXCHANGES;
        case 9: // BID_PRICE
          return BID_PRICE;
        case 10: // BID_PRICE_TYPE
          return BID_PRICE_TYPE;
        case 11: // CREATIVE_ROTATION
          return CREATIVE_ROTATION;
        case 12: // AD_SIZES
          return AD_SIZES;
        case 13: // AD_POSITIONS
          return AD_POSITIONS;
        case 14: // AD_TYPES
          return AD_TYPES;
        case 15: // ADV_FEATURE
          return ADV_FEATURE;
        case 16: // TOTAL_HIT
          return TOTAL_HIT;
        case 17: // DAILY_HIT
          return DAILY_HIT;
        case 18: // BUDGET_TYPE
          return BUDGET_TYPE;
        case 19: // KPI_TYPE
          return KPI_TYPE;
        case 20: // MEDIAS
          return MEDIAS;
        case 21: // START_TIME
          return START_TIME;
        case 22: // END_TIME
          return END_TIME;
        case 23: // THIRD_PARTY_PUB_TRACKING
          return THIRD_PARTY_PUB_TRACKING;
        case 24: // THIRDPARTY_PARAM
          return THIRDPARTY_PARAM;
        case 25: // MEDIA_TYPE
          return MEDIA_TYPE;
        case 26: // MEDIA_BUY_TYPE
          return MEDIA_BUY_TYPE;
        case 27: // PACING_DISABLED
          return PACING_DISABLED;
        case 28: // MAX_DAILY_HIT
          return MAX_DAILY_HIT;
        case 29: // QUANTITY_TYPE
          return QUANTITY_TYPE;
        case 30: // QUANTITY_BUDGET
          return QUANTITY_BUDGET;
        case 31: // BALANCE
          return BALANCE;
        case 32: // DAILY_QUANTITY
          return DAILY_QUANTITY;
        case 33: // MAX_DAILY_QUANTITY
          return MAX_DAILY_QUANTITY;
        case 34: // INCOME
          return INCOME;
        case 35: // SOURCE
          return SOURCE;
        case 36: // TOTAL_QUANTITY
          return TOTAL_QUANTITY;
        case 37: // PV_HIT_RATE
          return PV_HIT_RATE;
        case 38: // PRIORITY
          return PRIORITY;
        case 39: // NON_PV_RATE
          return NON_PV_RATE;
        case 40: // MAKEUP_RATE
          return MAKEUP_RATE;
        case 41: // USE_HTML_SNIPPET
          return USE_HTML_SNIPPET;
        case 42: // PACING_TYPE
          return PACING_TYPE;
        case 43: // CLICK_BUDGET
          return CLICK_BUDGET;
        case 44: // MAX_DAILY_CLICK
          return MAX_DAILY_CLICK;
        case 45: // DAILY_HIT_CLICK
          return DAILY_HIT_CLICK;
        case 46: // TOTAL_HIT_CLICK
          return TOTAL_HIT_CLICK;
        case 47: // PV_BUDGET
          return PV_BUDGET;
        case 48: // MAX_DAILY_PV
          return MAX_DAILY_PV;
        case 49: // DAILY_HIT_PV
          return DAILY_HIT_PV;
        case 50: // TOTAL_HIT_PV
          return TOTAL_HIT_PV;
        case 51: // CREATIVE_TAGS
          return CREATIVE_TAGS;
        case 52: // STRATEGY_GROUP_ID
          return STRATEGY_GROUP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __CAMPAIGNID_ISSET_ID = 2;
  private static final int __BIDPRICETYPE_ISSET_ID = 3;
  private static final int __CREATIVEROTATION_ISSET_ID = 4;
  private static final int __ADVFEATURE_ISSET_ID = 5;
  private static final int __BUDGETTYPE_ISSET_ID = 6;
  private static final int __KPITYPE_ISSET_ID = 7;
  private static final int __MEDIATYPE_ISSET_ID = 8;
  private static final int __MEDIABUYTYPE_ISSET_ID = 9;
  private static final int __PACINGDISABLED_ISSET_ID = 10;
  private static final int __QUANTITYTYPE_ISSET_ID = 11;
  private static final int __SOURCE_ISSET_ID = 12;
  private static final int __PVHITRATE_ISSET_ID = 13;
  private static final int __PRIORITY_ISSET_ID = 14;
  private static final int __NONPVRATE_ISSET_ID = 15;
  private static final int __USEHTMLSNIPPET_ISSET_ID = 16;
  private static final int __PACINGTYPE_ISSET_ID = 17;
  private static final int __STRATEGYGROUPID_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_D, new org.apache.thrift.meta_data.FieldMetaData("iD", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("campaignID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUDGET, new org.apache.thrift.meta_data.FieldMetaData("budget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KPI_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("kpiAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_EXCHANGES, new org.apache.thrift.meta_data.FieldMetaData("adExchanges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BID_PRICE, new org.apache.thrift.meta_data.FieldMetaData("bidPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BID_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bidPriceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATIVE_ROTATION, new org.apache.thrift.meta_data.FieldMetaData("creativeRotation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_SIZES, new org.apache.thrift.meta_data.FieldMetaData("adSizes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_POSITIONS, new org.apache.thrift.meta_data.FieldMetaData("adPositions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_TYPES, new org.apache.thrift.meta_data.FieldMetaData("adTypes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADV_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("advFeature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_HIT, new org.apache.thrift.meta_data.FieldMetaData("totalHit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAILY_HIT, new org.apache.thrift.meta_data.FieldMetaData("dailyHit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUDGET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("budgetType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KPI_TYPE, new org.apache.thrift.meta_data.FieldMetaData("kpiType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEDIAS, new org.apache.thrift.meta_data.FieldMetaData("medias", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_PARTY_PUB_TRACKING, new org.apache.thrift.meta_data.FieldMetaData("thirdPartyPubTracking", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRDPARTY_PARAM, new org.apache.thrift.meta_data.FieldMetaData("thirdpartyParam", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEDIA_BUY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaBuyType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PACING_DISABLED, new org.apache.thrift.meta_data.FieldMetaData("pacingDisabled", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_DAILY_HIT, new org.apache.thrift.meta_data.FieldMetaData("maxDailyHit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUANTITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("quantityType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUANTITY_BUDGET, new org.apache.thrift.meta_data.FieldMetaData("quantityBudget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAILY_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("dailyQuantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_DAILY_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("maxDailyQuantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCOME, new org.apache.thrift.meta_data.FieldMetaData("income", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("totalQuantity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PV_HIT_RATE, new org.apache.thrift.meta_data.FieldMetaData("pvHitRate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("Priority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NON_PV_RATE, new org.apache.thrift.meta_data.FieldMetaData("nonPvRate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAKEUP_RATE, new org.apache.thrift.meta_data.FieldMetaData("makeupRate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_HTML_SNIPPET, new org.apache.thrift.meta_data.FieldMetaData("useHtmlSnippet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PACING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("pacingType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLICK_BUDGET, new org.apache.thrift.meta_data.FieldMetaData("clickBudget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_DAILY_CLICK, new org.apache.thrift.meta_data.FieldMetaData("maxDailyClick", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAILY_HIT_CLICK, new org.apache.thrift.meta_data.FieldMetaData("dailyHitClick", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_HIT_CLICK, new org.apache.thrift.meta_data.FieldMetaData("totalHitClick", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PV_BUDGET, new org.apache.thrift.meta_data.FieldMetaData("pvBudget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_DAILY_PV, new org.apache.thrift.meta_data.FieldMetaData("maxDailyPV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAILY_HIT_PV, new org.apache.thrift.meta_data.FieldMetaData("dailyHitPV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_HIT_PV, new org.apache.thrift.meta_data.FieldMetaData("totalHitPV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATIVE_TAGS, new org.apache.thrift.meta_data.FieldMetaData("creativeTags", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRATEGY_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyGroupId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_Dsp_Media_Buy.class, metaDataMap);
  }

  public TDbSync_Dsp_Media_Buy() {
  }

  public TDbSync_Dsp_Media_Buy(
    int iD,
    int status,
    String lastChanged,
    String name,
    int campaignID,
    String budget,
    String kpiAmount,
    String adExchanges,
    String bidPrice,
    int bidPriceType,
    int creativeRotation,
    String adSizes,
    String adPositions,
    String adTypes,
    int advFeature,
    String totalHit,
    String dailyHit,
    int budgetType,
    int kpiType,
    String medias,
    String startTime,
    String endTime,
    String thirdPartyPubTracking,
    String thirdpartyParam,
    int mediaType,
    int mediaBuyType,
    int pacingDisabled,
    String maxDailyHit,
    int quantityType,
    String quantityBudget,
    String balance,
    String dailyQuantity,
    String maxDailyQuantity,
    String income,
    int source,
    String totalQuantity,
    int pvHitRate,
    int Priority,
    int nonPvRate,
    String makeupRate,
    int useHtmlSnippet,
    int pacingType,
    String clickBudget,
    String maxDailyClick,
    String dailyHitClick,
    String totalHitClick,
    String pvBudget,
    String maxDailyPV,
    String dailyHitPV,
    String totalHitPV,
    String creativeTags,
    int strategyGroupId)
  {
    this();
    this.iD = iD;
    setIDIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.name = name;
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    this.budget = budget;
    this.kpiAmount = kpiAmount;
    this.adExchanges = adExchanges;
    this.bidPrice = bidPrice;
    this.bidPriceType = bidPriceType;
    setBidPriceTypeIsSet(true);
    this.creativeRotation = creativeRotation;
    setCreativeRotationIsSet(true);
    this.adSizes = adSizes;
    this.adPositions = adPositions;
    this.adTypes = adTypes;
    this.advFeature = advFeature;
    setAdvFeatureIsSet(true);
    this.totalHit = totalHit;
    this.dailyHit = dailyHit;
    this.budgetType = budgetType;
    setBudgetTypeIsSet(true);
    this.kpiType = kpiType;
    setKpiTypeIsSet(true);
    this.medias = medias;
    this.startTime = startTime;
    this.endTime = endTime;
    this.thirdPartyPubTracking = thirdPartyPubTracking;
    this.thirdpartyParam = thirdpartyParam;
    this.mediaType = mediaType;
    setMediaTypeIsSet(true);
    this.mediaBuyType = mediaBuyType;
    setMediaBuyTypeIsSet(true);
    this.pacingDisabled = pacingDisabled;
    setPacingDisabledIsSet(true);
    this.maxDailyHit = maxDailyHit;
    this.quantityType = quantityType;
    setQuantityTypeIsSet(true);
    this.quantityBudget = quantityBudget;
    this.balance = balance;
    this.dailyQuantity = dailyQuantity;
    this.maxDailyQuantity = maxDailyQuantity;
    this.income = income;
    this.source = source;
    setSourceIsSet(true);
    this.totalQuantity = totalQuantity;
    this.pvHitRate = pvHitRate;
    setPvHitRateIsSet(true);
    this.Priority = Priority;
    setPriorityIsSet(true);
    this.nonPvRate = nonPvRate;
    setNonPvRateIsSet(true);
    this.makeupRate = makeupRate;
    this.useHtmlSnippet = useHtmlSnippet;
    setUseHtmlSnippetIsSet(true);
    this.pacingType = pacingType;
    setPacingTypeIsSet(true);
    this.clickBudget = clickBudget;
    this.maxDailyClick = maxDailyClick;
    this.dailyHitClick = dailyHitClick;
    this.totalHitClick = totalHitClick;
    this.pvBudget = pvBudget;
    this.maxDailyPV = maxDailyPV;
    this.dailyHitPV = dailyHitPV;
    this.totalHitPV = totalHitPV;
    this.creativeTags = creativeTags;
    this.strategyGroupId = strategyGroupId;
    setStrategyGroupIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_Dsp_Media_Buy(TDbSync_Dsp_Media_Buy other) {
    __isset_bitfield = other.__isset_bitfield;
    this.iD = other.iD;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.campaignID = other.campaignID;
    if (other.isSetBudget()) {
      this.budget = other.budget;
    }
    if (other.isSetKpiAmount()) {
      this.kpiAmount = other.kpiAmount;
    }
    if (other.isSetAdExchanges()) {
      this.adExchanges = other.adExchanges;
    }
    if (other.isSetBidPrice()) {
      this.bidPrice = other.bidPrice;
    }
    this.bidPriceType = other.bidPriceType;
    this.creativeRotation = other.creativeRotation;
    if (other.isSetAdSizes()) {
      this.adSizes = other.adSizes;
    }
    if (other.isSetAdPositions()) {
      this.adPositions = other.adPositions;
    }
    if (other.isSetAdTypes()) {
      this.adTypes = other.adTypes;
    }
    this.advFeature = other.advFeature;
    if (other.isSetTotalHit()) {
      this.totalHit = other.totalHit;
    }
    if (other.isSetDailyHit()) {
      this.dailyHit = other.dailyHit;
    }
    this.budgetType = other.budgetType;
    this.kpiType = other.kpiType;
    if (other.isSetMedias()) {
      this.medias = other.medias;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetThirdPartyPubTracking()) {
      this.thirdPartyPubTracking = other.thirdPartyPubTracking;
    }
    if (other.isSetThirdpartyParam()) {
      this.thirdpartyParam = other.thirdpartyParam;
    }
    this.mediaType = other.mediaType;
    this.mediaBuyType = other.mediaBuyType;
    this.pacingDisabled = other.pacingDisabled;
    if (other.isSetMaxDailyHit()) {
      this.maxDailyHit = other.maxDailyHit;
    }
    this.quantityType = other.quantityType;
    if (other.isSetQuantityBudget()) {
      this.quantityBudget = other.quantityBudget;
    }
    if (other.isSetBalance()) {
      this.balance = other.balance;
    }
    if (other.isSetDailyQuantity()) {
      this.dailyQuantity = other.dailyQuantity;
    }
    if (other.isSetMaxDailyQuantity()) {
      this.maxDailyQuantity = other.maxDailyQuantity;
    }
    if (other.isSetIncome()) {
      this.income = other.income;
    }
    this.source = other.source;
    if (other.isSetTotalQuantity()) {
      this.totalQuantity = other.totalQuantity;
    }
    this.pvHitRate = other.pvHitRate;
    this.Priority = other.Priority;
    this.nonPvRate = other.nonPvRate;
    if (other.isSetMakeupRate()) {
      this.makeupRate = other.makeupRate;
    }
    this.useHtmlSnippet = other.useHtmlSnippet;
    this.pacingType = other.pacingType;
    if (other.isSetClickBudget()) {
      this.clickBudget = other.clickBudget;
    }
    if (other.isSetMaxDailyClick()) {
      this.maxDailyClick = other.maxDailyClick;
    }
    if (other.isSetDailyHitClick()) {
      this.dailyHitClick = other.dailyHitClick;
    }
    if (other.isSetTotalHitClick()) {
      this.totalHitClick = other.totalHitClick;
    }
    if (other.isSetPvBudget()) {
      this.pvBudget = other.pvBudget;
    }
    if (other.isSetMaxDailyPV()) {
      this.maxDailyPV = other.maxDailyPV;
    }
    if (other.isSetDailyHitPV()) {
      this.dailyHitPV = other.dailyHitPV;
    }
    if (other.isSetTotalHitPV()) {
      this.totalHitPV = other.totalHitPV;
    }
    if (other.isSetCreativeTags()) {
      this.creativeTags = other.creativeTags;
    }
    this.strategyGroupId = other.strategyGroupId;
  }

  public TDbSync_Dsp_Media_Buy deepCopy() {
    return new TDbSync_Dsp_Media_Buy(this);
  }

  @Override
  public void clear() {
    setIDIsSet(false);
    this.iD = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    this.name = null;
    setCampaignIDIsSet(false);
    this.campaignID = 0;
    this.budget = null;
    this.kpiAmount = null;
    this.adExchanges = null;
    this.bidPrice = null;
    setBidPriceTypeIsSet(false);
    this.bidPriceType = 0;
    setCreativeRotationIsSet(false);
    this.creativeRotation = 0;
    this.adSizes = null;
    this.adPositions = null;
    this.adTypes = null;
    setAdvFeatureIsSet(false);
    this.advFeature = 0;
    this.totalHit = null;
    this.dailyHit = null;
    setBudgetTypeIsSet(false);
    this.budgetType = 0;
    setKpiTypeIsSet(false);
    this.kpiType = 0;
    this.medias = null;
    this.startTime = null;
    this.endTime = null;
    this.thirdPartyPubTracking = null;
    this.thirdpartyParam = null;
    setMediaTypeIsSet(false);
    this.mediaType = 0;
    setMediaBuyTypeIsSet(false);
    this.mediaBuyType = 0;
    setPacingDisabledIsSet(false);
    this.pacingDisabled = 0;
    this.maxDailyHit = null;
    setQuantityTypeIsSet(false);
    this.quantityType = 0;
    this.quantityBudget = null;
    this.balance = null;
    this.dailyQuantity = null;
    this.maxDailyQuantity = null;
    this.income = null;
    setSourceIsSet(false);
    this.source = 0;
    this.totalQuantity = null;
    setPvHitRateIsSet(false);
    this.pvHitRate = 0;
    setPriorityIsSet(false);
    this.Priority = 0;
    setNonPvRateIsSet(false);
    this.nonPvRate = 0;
    this.makeupRate = null;
    setUseHtmlSnippetIsSet(false);
    this.useHtmlSnippet = 0;
    setPacingTypeIsSet(false);
    this.pacingType = 0;
    this.clickBudget = null;
    this.maxDailyClick = null;
    this.dailyHitClick = null;
    this.totalHitClick = null;
    this.pvBudget = null;
    this.maxDailyPV = null;
    this.dailyHitPV = null;
    this.totalHitPV = null;
    this.creativeTags = null;
    setStrategyGroupIdIsSet(false);
    this.strategyGroupId = 0;
  }

  public int getID() {
    return this.iD;
  }

  public TDbSync_Dsp_Media_Buy setID(int iD) {
    this.iD = iD;
    setIDIsSet(true);
    return this;
  }

  public void unsetID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field iD is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_Dsp_Media_Buy setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_Dsp_Media_Buy setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TDbSync_Dsp_Media_Buy setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getCampaignID() {
    return this.campaignID;
  }

  public TDbSync_Dsp_Media_Buy setCampaignID(int campaignID) {
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    return this;
  }

  public void unsetCampaignID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  /** Returns true if field campaignID is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaignID() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  public void setCampaignIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID, value);
  }

  public String getBudget() {
    return this.budget;
  }

  public TDbSync_Dsp_Media_Buy setBudget(String budget) {
    this.budget = budget;
    return this;
  }

  public void unsetBudget() {
    this.budget = null;
  }

  /** Returns true if field budget is set (has been assigned a value) and false otherwise */
  public boolean isSetBudget() {
    return this.budget != null;
  }

  public void setBudgetIsSet(boolean value) {
    if (!value) {
      this.budget = null;
    }
  }

  public String getKpiAmount() {
    return this.kpiAmount;
  }

  public TDbSync_Dsp_Media_Buy setKpiAmount(String kpiAmount) {
    this.kpiAmount = kpiAmount;
    return this;
  }

  public void unsetKpiAmount() {
    this.kpiAmount = null;
  }

  /** Returns true if field kpiAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetKpiAmount() {
    return this.kpiAmount != null;
  }

  public void setKpiAmountIsSet(boolean value) {
    if (!value) {
      this.kpiAmount = null;
    }
  }

  public String getAdExchanges() {
    return this.adExchanges;
  }

  public TDbSync_Dsp_Media_Buy setAdExchanges(String adExchanges) {
    this.adExchanges = adExchanges;
    return this;
  }

  public void unsetAdExchanges() {
    this.adExchanges = null;
  }

  /** Returns true if field adExchanges is set (has been assigned a value) and false otherwise */
  public boolean isSetAdExchanges() {
    return this.adExchanges != null;
  }

  public void setAdExchangesIsSet(boolean value) {
    if (!value) {
      this.adExchanges = null;
    }
  }

  public String getBidPrice() {
    return this.bidPrice;
  }

  public TDbSync_Dsp_Media_Buy setBidPrice(String bidPrice) {
    this.bidPrice = bidPrice;
    return this;
  }

  public void unsetBidPrice() {
    this.bidPrice = null;
  }

  /** Returns true if field bidPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPrice() {
    return this.bidPrice != null;
  }

  public void setBidPriceIsSet(boolean value) {
    if (!value) {
      this.bidPrice = null;
    }
  }

  public int getBidPriceType() {
    return this.bidPriceType;
  }

  public TDbSync_Dsp_Media_Buy setBidPriceType(int bidPriceType) {
    this.bidPriceType = bidPriceType;
    setBidPriceTypeIsSet(true);
    return this;
  }

  public void unsetBidPriceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDPRICETYPE_ISSET_ID);
  }

  /** Returns true if field bidPriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPriceType() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDPRICETYPE_ISSET_ID);
  }

  public void setBidPriceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDPRICETYPE_ISSET_ID, value);
  }

  public int getCreativeRotation() {
    return this.creativeRotation;
  }

  public TDbSync_Dsp_Media_Buy setCreativeRotation(int creativeRotation) {
    this.creativeRotation = creativeRotation;
    setCreativeRotationIsSet(true);
    return this;
  }

  public void unsetCreativeRotation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIVEROTATION_ISSET_ID);
  }

  /** Returns true if field creativeRotation is set (has been assigned a value) and false otherwise */
  public boolean isSetCreativeRotation() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIVEROTATION_ISSET_ID);
  }

  public void setCreativeRotationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIVEROTATION_ISSET_ID, value);
  }

  public String getAdSizes() {
    return this.adSizes;
  }

  public TDbSync_Dsp_Media_Buy setAdSizes(String adSizes) {
    this.adSizes = adSizes;
    return this;
  }

  public void unsetAdSizes() {
    this.adSizes = null;
  }

  /** Returns true if field adSizes is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSizes() {
    return this.adSizes != null;
  }

  public void setAdSizesIsSet(boolean value) {
    if (!value) {
      this.adSizes = null;
    }
  }

  public String getAdPositions() {
    return this.adPositions;
  }

  public TDbSync_Dsp_Media_Buy setAdPositions(String adPositions) {
    this.adPositions = adPositions;
    return this;
  }

  public void unsetAdPositions() {
    this.adPositions = null;
  }

  /** Returns true if field adPositions is set (has been assigned a value) and false otherwise */
  public boolean isSetAdPositions() {
    return this.adPositions != null;
  }

  public void setAdPositionsIsSet(boolean value) {
    if (!value) {
      this.adPositions = null;
    }
  }

  public String getAdTypes() {
    return this.adTypes;
  }

  public TDbSync_Dsp_Media_Buy setAdTypes(String adTypes) {
    this.adTypes = adTypes;
    return this;
  }

  public void unsetAdTypes() {
    this.adTypes = null;
  }

  /** Returns true if field adTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetAdTypes() {
    return this.adTypes != null;
  }

  public void setAdTypesIsSet(boolean value) {
    if (!value) {
      this.adTypes = null;
    }
  }

  public int getAdvFeature() {
    return this.advFeature;
  }

  public TDbSync_Dsp_Media_Buy setAdvFeature(int advFeature) {
    this.advFeature = advFeature;
    setAdvFeatureIsSet(true);
    return this;
  }

  public void unsetAdvFeature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADVFEATURE_ISSET_ID);
  }

  /** Returns true if field advFeature is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvFeature() {
    return EncodingUtils.testBit(__isset_bitfield, __ADVFEATURE_ISSET_ID);
  }

  public void setAdvFeatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADVFEATURE_ISSET_ID, value);
  }

  public String getTotalHit() {
    return this.totalHit;
  }

  public TDbSync_Dsp_Media_Buy setTotalHit(String totalHit) {
    this.totalHit = totalHit;
    return this;
  }

  public void unsetTotalHit() {
    this.totalHit = null;
  }

  /** Returns true if field totalHit is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHit() {
    return this.totalHit != null;
  }

  public void setTotalHitIsSet(boolean value) {
    if (!value) {
      this.totalHit = null;
    }
  }

  public String getDailyHit() {
    return this.dailyHit;
  }

  public TDbSync_Dsp_Media_Buy setDailyHit(String dailyHit) {
    this.dailyHit = dailyHit;
    return this;
  }

  public void unsetDailyHit() {
    this.dailyHit = null;
  }

  /** Returns true if field dailyHit is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyHit() {
    return this.dailyHit != null;
  }

  public void setDailyHitIsSet(boolean value) {
    if (!value) {
      this.dailyHit = null;
    }
  }

  public int getBudgetType() {
    return this.budgetType;
  }

  public TDbSync_Dsp_Media_Buy setBudgetType(int budgetType) {
    this.budgetType = budgetType;
    setBudgetTypeIsSet(true);
    return this;
  }

  public void unsetBudgetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUDGETTYPE_ISSET_ID);
  }

  /** Returns true if field budgetType is set (has been assigned a value) and false otherwise */
  public boolean isSetBudgetType() {
    return EncodingUtils.testBit(__isset_bitfield, __BUDGETTYPE_ISSET_ID);
  }

  public void setBudgetTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUDGETTYPE_ISSET_ID, value);
  }

  public int getKpiType() {
    return this.kpiType;
  }

  public TDbSync_Dsp_Media_Buy setKpiType(int kpiType) {
    this.kpiType = kpiType;
    setKpiTypeIsSet(true);
    return this;
  }

  public void unsetKpiType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KPITYPE_ISSET_ID);
  }

  /** Returns true if field kpiType is set (has been assigned a value) and false otherwise */
  public boolean isSetKpiType() {
    return EncodingUtils.testBit(__isset_bitfield, __KPITYPE_ISSET_ID);
  }

  public void setKpiTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KPITYPE_ISSET_ID, value);
  }

  public String getMedias() {
    return this.medias;
  }

  public TDbSync_Dsp_Media_Buy setMedias(String medias) {
    this.medias = medias;
    return this;
  }

  public void unsetMedias() {
    this.medias = null;
  }

  /** Returns true if field medias is set (has been assigned a value) and false otherwise */
  public boolean isSetMedias() {
    return this.medias != null;
  }

  public void setMediasIsSet(boolean value) {
    if (!value) {
      this.medias = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public TDbSync_Dsp_Media_Buy setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public TDbSync_Dsp_Media_Buy setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getThirdPartyPubTracking() {
    return this.thirdPartyPubTracking;
  }

  public TDbSync_Dsp_Media_Buy setThirdPartyPubTracking(String thirdPartyPubTracking) {
    this.thirdPartyPubTracking = thirdPartyPubTracking;
    return this;
  }

  public void unsetThirdPartyPubTracking() {
    this.thirdPartyPubTracking = null;
  }

  /** Returns true if field thirdPartyPubTracking is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdPartyPubTracking() {
    return this.thirdPartyPubTracking != null;
  }

  public void setThirdPartyPubTrackingIsSet(boolean value) {
    if (!value) {
      this.thirdPartyPubTracking = null;
    }
  }

  public String getThirdpartyParam() {
    return this.thirdpartyParam;
  }

  public TDbSync_Dsp_Media_Buy setThirdpartyParam(String thirdpartyParam) {
    this.thirdpartyParam = thirdpartyParam;
    return this;
  }

  public void unsetThirdpartyParam() {
    this.thirdpartyParam = null;
  }

  /** Returns true if field thirdpartyParam is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdpartyParam() {
    return this.thirdpartyParam != null;
  }

  public void setThirdpartyParamIsSet(boolean value) {
    if (!value) {
      this.thirdpartyParam = null;
    }
  }

  public int getMediaType() {
    return this.mediaType;
  }

  public TDbSync_Dsp_Media_Buy setMediaType(int mediaType) {
    this.mediaType = mediaType;
    setMediaTypeIsSet(true);
    return this;
  }

  public void unsetMediaType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIATYPE_ISSET_ID);
  }

  /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaType() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIATYPE_ISSET_ID);
  }

  public void setMediaTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIATYPE_ISSET_ID, value);
  }

  public int getMediaBuyType() {
    return this.mediaBuyType;
  }

  public TDbSync_Dsp_Media_Buy setMediaBuyType(int mediaBuyType) {
    this.mediaBuyType = mediaBuyType;
    setMediaBuyTypeIsSet(true);
    return this;
  }

  public void unsetMediaBuyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIABUYTYPE_ISSET_ID);
  }

  /** Returns true if field mediaBuyType is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaBuyType() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIABUYTYPE_ISSET_ID);
  }

  public void setMediaBuyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIABUYTYPE_ISSET_ID, value);
  }

  public int getPacingDisabled() {
    return this.pacingDisabled;
  }

  public TDbSync_Dsp_Media_Buy setPacingDisabled(int pacingDisabled) {
    this.pacingDisabled = pacingDisabled;
    setPacingDisabledIsSet(true);
    return this;
  }

  public void unsetPacingDisabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PACINGDISABLED_ISSET_ID);
  }

  /** Returns true if field pacingDisabled is set (has been assigned a value) and false otherwise */
  public boolean isSetPacingDisabled() {
    return EncodingUtils.testBit(__isset_bitfield, __PACINGDISABLED_ISSET_ID);
  }

  public void setPacingDisabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PACINGDISABLED_ISSET_ID, value);
  }

  public String getMaxDailyHit() {
    return this.maxDailyHit;
  }

  public TDbSync_Dsp_Media_Buy setMaxDailyHit(String maxDailyHit) {
    this.maxDailyHit = maxDailyHit;
    return this;
  }

  public void unsetMaxDailyHit() {
    this.maxDailyHit = null;
  }

  /** Returns true if field maxDailyHit is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDailyHit() {
    return this.maxDailyHit != null;
  }

  public void setMaxDailyHitIsSet(boolean value) {
    if (!value) {
      this.maxDailyHit = null;
    }
  }

  public int getQuantityType() {
    return this.quantityType;
  }

  public TDbSync_Dsp_Media_Buy setQuantityType(int quantityType) {
    this.quantityType = quantityType;
    setQuantityTypeIsSet(true);
    return this;
  }

  public void unsetQuantityType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITYTYPE_ISSET_ID);
  }

  /** Returns true if field quantityType is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantityType() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITYTYPE_ISSET_ID);
  }

  public void setQuantityTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITYTYPE_ISSET_ID, value);
  }

  public String getQuantityBudget() {
    return this.quantityBudget;
  }

  public TDbSync_Dsp_Media_Buy setQuantityBudget(String quantityBudget) {
    this.quantityBudget = quantityBudget;
    return this;
  }

  public void unsetQuantityBudget() {
    this.quantityBudget = null;
  }

  /** Returns true if field quantityBudget is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantityBudget() {
    return this.quantityBudget != null;
  }

  public void setQuantityBudgetIsSet(boolean value) {
    if (!value) {
      this.quantityBudget = null;
    }
  }

  public String getBalance() {
    return this.balance;
  }

  public TDbSync_Dsp_Media_Buy setBalance(String balance) {
    this.balance = balance;
    return this;
  }

  public void unsetBalance() {
    this.balance = null;
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return this.balance != null;
  }

  public void setBalanceIsSet(boolean value) {
    if (!value) {
      this.balance = null;
    }
  }

  public String getDailyQuantity() {
    return this.dailyQuantity;
  }

  public TDbSync_Dsp_Media_Buy setDailyQuantity(String dailyQuantity) {
    this.dailyQuantity = dailyQuantity;
    return this;
  }

  public void unsetDailyQuantity() {
    this.dailyQuantity = null;
  }

  /** Returns true if field dailyQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyQuantity() {
    return this.dailyQuantity != null;
  }

  public void setDailyQuantityIsSet(boolean value) {
    if (!value) {
      this.dailyQuantity = null;
    }
  }

  public String getMaxDailyQuantity() {
    return this.maxDailyQuantity;
  }

  public TDbSync_Dsp_Media_Buy setMaxDailyQuantity(String maxDailyQuantity) {
    this.maxDailyQuantity = maxDailyQuantity;
    return this;
  }

  public void unsetMaxDailyQuantity() {
    this.maxDailyQuantity = null;
  }

  /** Returns true if field maxDailyQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDailyQuantity() {
    return this.maxDailyQuantity != null;
  }

  public void setMaxDailyQuantityIsSet(boolean value) {
    if (!value) {
      this.maxDailyQuantity = null;
    }
  }

  public String getIncome() {
    return this.income;
  }

  public TDbSync_Dsp_Media_Buy setIncome(String income) {
    this.income = income;
    return this;
  }

  public void unsetIncome() {
    this.income = null;
  }

  /** Returns true if field income is set (has been assigned a value) and false otherwise */
  public boolean isSetIncome() {
    return this.income != null;
  }

  public void setIncomeIsSet(boolean value) {
    if (!value) {
      this.income = null;
    }
  }

  public int getSource() {
    return this.source;
  }

  public TDbSync_Dsp_Media_Buy setSource(int source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public String getTotalQuantity() {
    return this.totalQuantity;
  }

  public TDbSync_Dsp_Media_Buy setTotalQuantity(String totalQuantity) {
    this.totalQuantity = totalQuantity;
    return this;
  }

  public void unsetTotalQuantity() {
    this.totalQuantity = null;
  }

  /** Returns true if field totalQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalQuantity() {
    return this.totalQuantity != null;
  }

  public void setTotalQuantityIsSet(boolean value) {
    if (!value) {
      this.totalQuantity = null;
    }
  }

  public int getPvHitRate() {
    return this.pvHitRate;
  }

  public TDbSync_Dsp_Media_Buy setPvHitRate(int pvHitRate) {
    this.pvHitRate = pvHitRate;
    setPvHitRateIsSet(true);
    return this;
  }

  public void unsetPvHitRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PVHITRATE_ISSET_ID);
  }

  /** Returns true if field pvHitRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPvHitRate() {
    return EncodingUtils.testBit(__isset_bitfield, __PVHITRATE_ISSET_ID);
  }

  public void setPvHitRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PVHITRATE_ISSET_ID, value);
  }

  public int getPriority() {
    return this.Priority;
  }

  public TDbSync_Dsp_Media_Buy setPriority(int Priority) {
    this.Priority = Priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field Priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public int getNonPvRate() {
    return this.nonPvRate;
  }

  public TDbSync_Dsp_Media_Buy setNonPvRate(int nonPvRate) {
    this.nonPvRate = nonPvRate;
    setNonPvRateIsSet(true);
    return this;
  }

  public void unsetNonPvRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NONPVRATE_ISSET_ID);
  }

  /** Returns true if field nonPvRate is set (has been assigned a value) and false otherwise */
  public boolean isSetNonPvRate() {
    return EncodingUtils.testBit(__isset_bitfield, __NONPVRATE_ISSET_ID);
  }

  public void setNonPvRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NONPVRATE_ISSET_ID, value);
  }

  public String getMakeupRate() {
    return this.makeupRate;
  }

  public TDbSync_Dsp_Media_Buy setMakeupRate(String makeupRate) {
    this.makeupRate = makeupRate;
    return this;
  }

  public void unsetMakeupRate() {
    this.makeupRate = null;
  }

  /** Returns true if field makeupRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMakeupRate() {
    return this.makeupRate != null;
  }

  public void setMakeupRateIsSet(boolean value) {
    if (!value) {
      this.makeupRate = null;
    }
  }

  public int getUseHtmlSnippet() {
    return this.useHtmlSnippet;
  }

  public TDbSync_Dsp_Media_Buy setUseHtmlSnippet(int useHtmlSnippet) {
    this.useHtmlSnippet = useHtmlSnippet;
    setUseHtmlSnippetIsSet(true);
    return this;
  }

  public void unsetUseHtmlSnippet() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEHTMLSNIPPET_ISSET_ID);
  }

  /** Returns true if field useHtmlSnippet is set (has been assigned a value) and false otherwise */
  public boolean isSetUseHtmlSnippet() {
    return EncodingUtils.testBit(__isset_bitfield, __USEHTMLSNIPPET_ISSET_ID);
  }

  public void setUseHtmlSnippetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEHTMLSNIPPET_ISSET_ID, value);
  }

  public int getPacingType() {
    return this.pacingType;
  }

  public TDbSync_Dsp_Media_Buy setPacingType(int pacingType) {
    this.pacingType = pacingType;
    setPacingTypeIsSet(true);
    return this;
  }

  public void unsetPacingType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PACINGTYPE_ISSET_ID);
  }

  /** Returns true if field pacingType is set (has been assigned a value) and false otherwise */
  public boolean isSetPacingType() {
    return EncodingUtils.testBit(__isset_bitfield, __PACINGTYPE_ISSET_ID);
  }

  public void setPacingTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PACINGTYPE_ISSET_ID, value);
  }

  public String getClickBudget() {
    return this.clickBudget;
  }

  public TDbSync_Dsp_Media_Buy setClickBudget(String clickBudget) {
    this.clickBudget = clickBudget;
    return this;
  }

  public void unsetClickBudget() {
    this.clickBudget = null;
  }

  /** Returns true if field clickBudget is set (has been assigned a value) and false otherwise */
  public boolean isSetClickBudget() {
    return this.clickBudget != null;
  }

  public void setClickBudgetIsSet(boolean value) {
    if (!value) {
      this.clickBudget = null;
    }
  }

  public String getMaxDailyClick() {
    return this.maxDailyClick;
  }

  public TDbSync_Dsp_Media_Buy setMaxDailyClick(String maxDailyClick) {
    this.maxDailyClick = maxDailyClick;
    return this;
  }

  public void unsetMaxDailyClick() {
    this.maxDailyClick = null;
  }

  /** Returns true if field maxDailyClick is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDailyClick() {
    return this.maxDailyClick != null;
  }

  public void setMaxDailyClickIsSet(boolean value) {
    if (!value) {
      this.maxDailyClick = null;
    }
  }

  public String getDailyHitClick() {
    return this.dailyHitClick;
  }

  public TDbSync_Dsp_Media_Buy setDailyHitClick(String dailyHitClick) {
    this.dailyHitClick = dailyHitClick;
    return this;
  }

  public void unsetDailyHitClick() {
    this.dailyHitClick = null;
  }

  /** Returns true if field dailyHitClick is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyHitClick() {
    return this.dailyHitClick != null;
  }

  public void setDailyHitClickIsSet(boolean value) {
    if (!value) {
      this.dailyHitClick = null;
    }
  }

  public String getTotalHitClick() {
    return this.totalHitClick;
  }

  public TDbSync_Dsp_Media_Buy setTotalHitClick(String totalHitClick) {
    this.totalHitClick = totalHitClick;
    return this;
  }

  public void unsetTotalHitClick() {
    this.totalHitClick = null;
  }

  /** Returns true if field totalHitClick is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHitClick() {
    return this.totalHitClick != null;
  }

  public void setTotalHitClickIsSet(boolean value) {
    if (!value) {
      this.totalHitClick = null;
    }
  }

  public String getPvBudget() {
    return this.pvBudget;
  }

  public TDbSync_Dsp_Media_Buy setPvBudget(String pvBudget) {
    this.pvBudget = pvBudget;
    return this;
  }

  public void unsetPvBudget() {
    this.pvBudget = null;
  }

  /** Returns true if field pvBudget is set (has been assigned a value) and false otherwise */
  public boolean isSetPvBudget() {
    return this.pvBudget != null;
  }

  public void setPvBudgetIsSet(boolean value) {
    if (!value) {
      this.pvBudget = null;
    }
  }

  public String getMaxDailyPV() {
    return this.maxDailyPV;
  }

  public TDbSync_Dsp_Media_Buy setMaxDailyPV(String maxDailyPV) {
    this.maxDailyPV = maxDailyPV;
    return this;
  }

  public void unsetMaxDailyPV() {
    this.maxDailyPV = null;
  }

  /** Returns true if field maxDailyPV is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDailyPV() {
    return this.maxDailyPV != null;
  }

  public void setMaxDailyPVIsSet(boolean value) {
    if (!value) {
      this.maxDailyPV = null;
    }
  }

  public String getDailyHitPV() {
    return this.dailyHitPV;
  }

  public TDbSync_Dsp_Media_Buy setDailyHitPV(String dailyHitPV) {
    this.dailyHitPV = dailyHitPV;
    return this;
  }

  public void unsetDailyHitPV() {
    this.dailyHitPV = null;
  }

  /** Returns true if field dailyHitPV is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyHitPV() {
    return this.dailyHitPV != null;
  }

  public void setDailyHitPVIsSet(boolean value) {
    if (!value) {
      this.dailyHitPV = null;
    }
  }

  public String getTotalHitPV() {
    return this.totalHitPV;
  }

  public TDbSync_Dsp_Media_Buy setTotalHitPV(String totalHitPV) {
    this.totalHitPV = totalHitPV;
    return this;
  }

  public void unsetTotalHitPV() {
    this.totalHitPV = null;
  }

  /** Returns true if field totalHitPV is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHitPV() {
    return this.totalHitPV != null;
  }

  public void setTotalHitPVIsSet(boolean value) {
    if (!value) {
      this.totalHitPV = null;
    }
  }

  public String getCreativeTags() {
    return this.creativeTags;
  }

  public TDbSync_Dsp_Media_Buy setCreativeTags(String creativeTags) {
    this.creativeTags = creativeTags;
    return this;
  }

  public void unsetCreativeTags() {
    this.creativeTags = null;
  }

  /** Returns true if field creativeTags is set (has been assigned a value) and false otherwise */
  public boolean isSetCreativeTags() {
    return this.creativeTags != null;
  }

  public void setCreativeTagsIsSet(boolean value) {
    if (!value) {
      this.creativeTags = null;
    }
  }

  public int getStrategyGroupId() {
    return this.strategyGroupId;
  }

  public TDbSync_Dsp_Media_Buy setStrategyGroupId(int strategyGroupId) {
    this.strategyGroupId = strategyGroupId;
    setStrategyGroupIdIsSet(true);
    return this;
  }

  public void unsetStrategyGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYGROUPID_ISSET_ID);
  }

  /** Returns true if field strategyGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategyGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __STRATEGYGROUPID_ISSET_ID);
  }

  public void setStrategyGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYGROUPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_D:
      if (value == null) {
        unsetID();
      } else {
        setID((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CAMPAIGN_ID:
      if (value == null) {
        unsetCampaignID();
      } else {
        setCampaignID((Integer)value);
      }
      break;

    case BUDGET:
      if (value == null) {
        unsetBudget();
      } else {
        setBudget((String)value);
      }
      break;

    case KPI_AMOUNT:
      if (value == null) {
        unsetKpiAmount();
      } else {
        setKpiAmount((String)value);
      }
      break;

    case AD_EXCHANGES:
      if (value == null) {
        unsetAdExchanges();
      } else {
        setAdExchanges((String)value);
      }
      break;

    case BID_PRICE:
      if (value == null) {
        unsetBidPrice();
      } else {
        setBidPrice((String)value);
      }
      break;

    case BID_PRICE_TYPE:
      if (value == null) {
        unsetBidPriceType();
      } else {
        setBidPriceType((Integer)value);
      }
      break;

    case CREATIVE_ROTATION:
      if (value == null) {
        unsetCreativeRotation();
      } else {
        setCreativeRotation((Integer)value);
      }
      break;

    case AD_SIZES:
      if (value == null) {
        unsetAdSizes();
      } else {
        setAdSizes((String)value);
      }
      break;

    case AD_POSITIONS:
      if (value == null) {
        unsetAdPositions();
      } else {
        setAdPositions((String)value);
      }
      break;

    case AD_TYPES:
      if (value == null) {
        unsetAdTypes();
      } else {
        setAdTypes((String)value);
      }
      break;

    case ADV_FEATURE:
      if (value == null) {
        unsetAdvFeature();
      } else {
        setAdvFeature((Integer)value);
      }
      break;

    case TOTAL_HIT:
      if (value == null) {
        unsetTotalHit();
      } else {
        setTotalHit((String)value);
      }
      break;

    case DAILY_HIT:
      if (value == null) {
        unsetDailyHit();
      } else {
        setDailyHit((String)value);
      }
      break;

    case BUDGET_TYPE:
      if (value == null) {
        unsetBudgetType();
      } else {
        setBudgetType((Integer)value);
      }
      break;

    case KPI_TYPE:
      if (value == null) {
        unsetKpiType();
      } else {
        setKpiType((Integer)value);
      }
      break;

    case MEDIAS:
      if (value == null) {
        unsetMedias();
      } else {
        setMedias((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case THIRD_PARTY_PUB_TRACKING:
      if (value == null) {
        unsetThirdPartyPubTracking();
      } else {
        setThirdPartyPubTracking((String)value);
      }
      break;

    case THIRDPARTY_PARAM:
      if (value == null) {
        unsetThirdpartyParam();
      } else {
        setThirdpartyParam((String)value);
      }
      break;

    case MEDIA_TYPE:
      if (value == null) {
        unsetMediaType();
      } else {
        setMediaType((Integer)value);
      }
      break;

    case MEDIA_BUY_TYPE:
      if (value == null) {
        unsetMediaBuyType();
      } else {
        setMediaBuyType((Integer)value);
      }
      break;

    case PACING_DISABLED:
      if (value == null) {
        unsetPacingDisabled();
      } else {
        setPacingDisabled((Integer)value);
      }
      break;

    case MAX_DAILY_HIT:
      if (value == null) {
        unsetMaxDailyHit();
      } else {
        setMaxDailyHit((String)value);
      }
      break;

    case QUANTITY_TYPE:
      if (value == null) {
        unsetQuantityType();
      } else {
        setQuantityType((Integer)value);
      }
      break;

    case QUANTITY_BUDGET:
      if (value == null) {
        unsetQuantityBudget();
      } else {
        setQuantityBudget((String)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((String)value);
      }
      break;

    case DAILY_QUANTITY:
      if (value == null) {
        unsetDailyQuantity();
      } else {
        setDailyQuantity((String)value);
      }
      break;

    case MAX_DAILY_QUANTITY:
      if (value == null) {
        unsetMaxDailyQuantity();
      } else {
        setMaxDailyQuantity((String)value);
      }
      break;

    case INCOME:
      if (value == null) {
        unsetIncome();
      } else {
        setIncome((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;

    case TOTAL_QUANTITY:
      if (value == null) {
        unsetTotalQuantity();
      } else {
        setTotalQuantity((String)value);
      }
      break;

    case PV_HIT_RATE:
      if (value == null) {
        unsetPvHitRate();
      } else {
        setPvHitRate((Integer)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case NON_PV_RATE:
      if (value == null) {
        unsetNonPvRate();
      } else {
        setNonPvRate((Integer)value);
      }
      break;

    case MAKEUP_RATE:
      if (value == null) {
        unsetMakeupRate();
      } else {
        setMakeupRate((String)value);
      }
      break;

    case USE_HTML_SNIPPET:
      if (value == null) {
        unsetUseHtmlSnippet();
      } else {
        setUseHtmlSnippet((Integer)value);
      }
      break;

    case PACING_TYPE:
      if (value == null) {
        unsetPacingType();
      } else {
        setPacingType((Integer)value);
      }
      break;

    case CLICK_BUDGET:
      if (value == null) {
        unsetClickBudget();
      } else {
        setClickBudget((String)value);
      }
      break;

    case MAX_DAILY_CLICK:
      if (value == null) {
        unsetMaxDailyClick();
      } else {
        setMaxDailyClick((String)value);
      }
      break;

    case DAILY_HIT_CLICK:
      if (value == null) {
        unsetDailyHitClick();
      } else {
        setDailyHitClick((String)value);
      }
      break;

    case TOTAL_HIT_CLICK:
      if (value == null) {
        unsetTotalHitClick();
      } else {
        setTotalHitClick((String)value);
      }
      break;

    case PV_BUDGET:
      if (value == null) {
        unsetPvBudget();
      } else {
        setPvBudget((String)value);
      }
      break;

    case MAX_DAILY_PV:
      if (value == null) {
        unsetMaxDailyPV();
      } else {
        setMaxDailyPV((String)value);
      }
      break;

    case DAILY_HIT_PV:
      if (value == null) {
        unsetDailyHitPV();
      } else {
        setDailyHitPV((String)value);
      }
      break;

    case TOTAL_HIT_PV:
      if (value == null) {
        unsetTotalHitPV();
      } else {
        setTotalHitPV((String)value);
      }
      break;

    case CREATIVE_TAGS:
      if (value == null) {
        unsetCreativeTags();
      } else {
        setCreativeTags((String)value);
      }
      break;

    case STRATEGY_GROUP_ID:
      if (value == null) {
        unsetStrategyGroupId();
      } else {
        setStrategyGroupId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_D:
      return Integer.valueOf(getID());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case NAME:
      return getName();

    case CAMPAIGN_ID:
      return Integer.valueOf(getCampaignID());

    case BUDGET:
      return getBudget();

    case KPI_AMOUNT:
      return getKpiAmount();

    case AD_EXCHANGES:
      return getAdExchanges();

    case BID_PRICE:
      return getBidPrice();

    case BID_PRICE_TYPE:
      return Integer.valueOf(getBidPriceType());

    case CREATIVE_ROTATION:
      return Integer.valueOf(getCreativeRotation());

    case AD_SIZES:
      return getAdSizes();

    case AD_POSITIONS:
      return getAdPositions();

    case AD_TYPES:
      return getAdTypes();

    case ADV_FEATURE:
      return Integer.valueOf(getAdvFeature());

    case TOTAL_HIT:
      return getTotalHit();

    case DAILY_HIT:
      return getDailyHit();

    case BUDGET_TYPE:
      return Integer.valueOf(getBudgetType());

    case KPI_TYPE:
      return Integer.valueOf(getKpiType());

    case MEDIAS:
      return getMedias();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case THIRD_PARTY_PUB_TRACKING:
      return getThirdPartyPubTracking();

    case THIRDPARTY_PARAM:
      return getThirdpartyParam();

    case MEDIA_TYPE:
      return Integer.valueOf(getMediaType());

    case MEDIA_BUY_TYPE:
      return Integer.valueOf(getMediaBuyType());

    case PACING_DISABLED:
      return Integer.valueOf(getPacingDisabled());

    case MAX_DAILY_HIT:
      return getMaxDailyHit();

    case QUANTITY_TYPE:
      return Integer.valueOf(getQuantityType());

    case QUANTITY_BUDGET:
      return getQuantityBudget();

    case BALANCE:
      return getBalance();

    case DAILY_QUANTITY:
      return getDailyQuantity();

    case MAX_DAILY_QUANTITY:
      return getMaxDailyQuantity();

    case INCOME:
      return getIncome();

    case SOURCE:
      return Integer.valueOf(getSource());

    case TOTAL_QUANTITY:
      return getTotalQuantity();

    case PV_HIT_RATE:
      return Integer.valueOf(getPvHitRate());

    case PRIORITY:
      return Integer.valueOf(getPriority());

    case NON_PV_RATE:
      return Integer.valueOf(getNonPvRate());

    case MAKEUP_RATE:
      return getMakeupRate();

    case USE_HTML_SNIPPET:
      return Integer.valueOf(getUseHtmlSnippet());

    case PACING_TYPE:
      return Integer.valueOf(getPacingType());

    case CLICK_BUDGET:
      return getClickBudget();

    case MAX_DAILY_CLICK:
      return getMaxDailyClick();

    case DAILY_HIT_CLICK:
      return getDailyHitClick();

    case TOTAL_HIT_CLICK:
      return getTotalHitClick();

    case PV_BUDGET:
      return getPvBudget();

    case MAX_DAILY_PV:
      return getMaxDailyPV();

    case DAILY_HIT_PV:
      return getDailyHitPV();

    case TOTAL_HIT_PV:
      return getTotalHitPV();

    case CREATIVE_TAGS:
      return getCreativeTags();

    case STRATEGY_GROUP_ID:
      return Integer.valueOf(getStrategyGroupId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_D:
      return isSetID();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case NAME:
      return isSetName();
    case CAMPAIGN_ID:
      return isSetCampaignID();
    case BUDGET:
      return isSetBudget();
    case KPI_AMOUNT:
      return isSetKpiAmount();
    case AD_EXCHANGES:
      return isSetAdExchanges();
    case BID_PRICE:
      return isSetBidPrice();
    case BID_PRICE_TYPE:
      return isSetBidPriceType();
    case CREATIVE_ROTATION:
      return isSetCreativeRotation();
    case AD_SIZES:
      return isSetAdSizes();
    case AD_POSITIONS:
      return isSetAdPositions();
    case AD_TYPES:
      return isSetAdTypes();
    case ADV_FEATURE:
      return isSetAdvFeature();
    case TOTAL_HIT:
      return isSetTotalHit();
    case DAILY_HIT:
      return isSetDailyHit();
    case BUDGET_TYPE:
      return isSetBudgetType();
    case KPI_TYPE:
      return isSetKpiType();
    case MEDIAS:
      return isSetMedias();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case THIRD_PARTY_PUB_TRACKING:
      return isSetThirdPartyPubTracking();
    case THIRDPARTY_PARAM:
      return isSetThirdpartyParam();
    case MEDIA_TYPE:
      return isSetMediaType();
    case MEDIA_BUY_TYPE:
      return isSetMediaBuyType();
    case PACING_DISABLED:
      return isSetPacingDisabled();
    case MAX_DAILY_HIT:
      return isSetMaxDailyHit();
    case QUANTITY_TYPE:
      return isSetQuantityType();
    case QUANTITY_BUDGET:
      return isSetQuantityBudget();
    case BALANCE:
      return isSetBalance();
    case DAILY_QUANTITY:
      return isSetDailyQuantity();
    case MAX_DAILY_QUANTITY:
      return isSetMaxDailyQuantity();
    case INCOME:
      return isSetIncome();
    case SOURCE:
      return isSetSource();
    case TOTAL_QUANTITY:
      return isSetTotalQuantity();
    case PV_HIT_RATE:
      return isSetPvHitRate();
    case PRIORITY:
      return isSetPriority();
    case NON_PV_RATE:
      return isSetNonPvRate();
    case MAKEUP_RATE:
      return isSetMakeupRate();
    case USE_HTML_SNIPPET:
      return isSetUseHtmlSnippet();
    case PACING_TYPE:
      return isSetPacingType();
    case CLICK_BUDGET:
      return isSetClickBudget();
    case MAX_DAILY_CLICK:
      return isSetMaxDailyClick();
    case DAILY_HIT_CLICK:
      return isSetDailyHitClick();
    case TOTAL_HIT_CLICK:
      return isSetTotalHitClick();
    case PV_BUDGET:
      return isSetPvBudget();
    case MAX_DAILY_PV:
      return isSetMaxDailyPV();
    case DAILY_HIT_PV:
      return isSetDailyHitPV();
    case TOTAL_HIT_PV:
      return isSetTotalHitPV();
    case CREATIVE_TAGS:
      return isSetCreativeTags();
    case STRATEGY_GROUP_ID:
      return isSetStrategyGroupId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_Dsp_Media_Buy)
      return this.equals((TDbSync_Dsp_Media_Buy)that);
    return false;
  }

  public boolean equals(TDbSync_Dsp_Media_Buy that) {
    if (that == null)
      return false;

    boolean this_present_iD = true;
    boolean that_present_iD = true;
    if (this_present_iD || that_present_iD) {
      if (!(this_present_iD && that_present_iD))
        return false;
      if (this.iD != that.iD)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_campaignID = true;
    boolean that_present_campaignID = true;
    if (this_present_campaignID || that_present_campaignID) {
      if (!(this_present_campaignID && that_present_campaignID))
        return false;
      if (this.campaignID != that.campaignID)
        return false;
    }

    boolean this_present_budget = true && this.isSetBudget();
    boolean that_present_budget = true && that.isSetBudget();
    if (this_present_budget || that_present_budget) {
      if (!(this_present_budget && that_present_budget))
        return false;
      if (!this.budget.equals(that.budget))
        return false;
    }

    boolean this_present_kpiAmount = true && this.isSetKpiAmount();
    boolean that_present_kpiAmount = true && that.isSetKpiAmount();
    if (this_present_kpiAmount || that_present_kpiAmount) {
      if (!(this_present_kpiAmount && that_present_kpiAmount))
        return false;
      if (!this.kpiAmount.equals(that.kpiAmount))
        return false;
    }

    boolean this_present_adExchanges = true && this.isSetAdExchanges();
    boolean that_present_adExchanges = true && that.isSetAdExchanges();
    if (this_present_adExchanges || that_present_adExchanges) {
      if (!(this_present_adExchanges && that_present_adExchanges))
        return false;
      if (!this.adExchanges.equals(that.adExchanges))
        return false;
    }

    boolean this_present_bidPrice = true && this.isSetBidPrice();
    boolean that_present_bidPrice = true && that.isSetBidPrice();
    if (this_present_bidPrice || that_present_bidPrice) {
      if (!(this_present_bidPrice && that_present_bidPrice))
        return false;
      if (!this.bidPrice.equals(that.bidPrice))
        return false;
    }

    boolean this_present_bidPriceType = true;
    boolean that_present_bidPriceType = true;
    if (this_present_bidPriceType || that_present_bidPriceType) {
      if (!(this_present_bidPriceType && that_present_bidPriceType))
        return false;
      if (this.bidPriceType != that.bidPriceType)
        return false;
    }

    boolean this_present_creativeRotation = true;
    boolean that_present_creativeRotation = true;
    if (this_present_creativeRotation || that_present_creativeRotation) {
      if (!(this_present_creativeRotation && that_present_creativeRotation))
        return false;
      if (this.creativeRotation != that.creativeRotation)
        return false;
    }

    boolean this_present_adSizes = true && this.isSetAdSizes();
    boolean that_present_adSizes = true && that.isSetAdSizes();
    if (this_present_adSizes || that_present_adSizes) {
      if (!(this_present_adSizes && that_present_adSizes))
        return false;
      if (!this.adSizes.equals(that.adSizes))
        return false;
    }

    boolean this_present_adPositions = true && this.isSetAdPositions();
    boolean that_present_adPositions = true && that.isSetAdPositions();
    if (this_present_adPositions || that_present_adPositions) {
      if (!(this_present_adPositions && that_present_adPositions))
        return false;
      if (!this.adPositions.equals(that.adPositions))
        return false;
    }

    boolean this_present_adTypes = true && this.isSetAdTypes();
    boolean that_present_adTypes = true && that.isSetAdTypes();
    if (this_present_adTypes || that_present_adTypes) {
      if (!(this_present_adTypes && that_present_adTypes))
        return false;
      if (!this.adTypes.equals(that.adTypes))
        return false;
    }

    boolean this_present_advFeature = true;
    boolean that_present_advFeature = true;
    if (this_present_advFeature || that_present_advFeature) {
      if (!(this_present_advFeature && that_present_advFeature))
        return false;
      if (this.advFeature != that.advFeature)
        return false;
    }

    boolean this_present_totalHit = true && this.isSetTotalHit();
    boolean that_present_totalHit = true && that.isSetTotalHit();
    if (this_present_totalHit || that_present_totalHit) {
      if (!(this_present_totalHit && that_present_totalHit))
        return false;
      if (!this.totalHit.equals(that.totalHit))
        return false;
    }

    boolean this_present_dailyHit = true && this.isSetDailyHit();
    boolean that_present_dailyHit = true && that.isSetDailyHit();
    if (this_present_dailyHit || that_present_dailyHit) {
      if (!(this_present_dailyHit && that_present_dailyHit))
        return false;
      if (!this.dailyHit.equals(that.dailyHit))
        return false;
    }

    boolean this_present_budgetType = true;
    boolean that_present_budgetType = true;
    if (this_present_budgetType || that_present_budgetType) {
      if (!(this_present_budgetType && that_present_budgetType))
        return false;
      if (this.budgetType != that.budgetType)
        return false;
    }

    boolean this_present_kpiType = true;
    boolean that_present_kpiType = true;
    if (this_present_kpiType || that_present_kpiType) {
      if (!(this_present_kpiType && that_present_kpiType))
        return false;
      if (this.kpiType != that.kpiType)
        return false;
    }

    boolean this_present_medias = true && this.isSetMedias();
    boolean that_present_medias = true && that.isSetMedias();
    if (this_present_medias || that_present_medias) {
      if (!(this_present_medias && that_present_medias))
        return false;
      if (!this.medias.equals(that.medias))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_thirdPartyPubTracking = true && this.isSetThirdPartyPubTracking();
    boolean that_present_thirdPartyPubTracking = true && that.isSetThirdPartyPubTracking();
    if (this_present_thirdPartyPubTracking || that_present_thirdPartyPubTracking) {
      if (!(this_present_thirdPartyPubTracking && that_present_thirdPartyPubTracking))
        return false;
      if (!this.thirdPartyPubTracking.equals(that.thirdPartyPubTracking))
        return false;
    }

    boolean this_present_thirdpartyParam = true && this.isSetThirdpartyParam();
    boolean that_present_thirdpartyParam = true && that.isSetThirdpartyParam();
    if (this_present_thirdpartyParam || that_present_thirdpartyParam) {
      if (!(this_present_thirdpartyParam && that_present_thirdpartyParam))
        return false;
      if (!this.thirdpartyParam.equals(that.thirdpartyParam))
        return false;
    }

    boolean this_present_mediaType = true;
    boolean that_present_mediaType = true;
    if (this_present_mediaType || that_present_mediaType) {
      if (!(this_present_mediaType && that_present_mediaType))
        return false;
      if (this.mediaType != that.mediaType)
        return false;
    }

    boolean this_present_mediaBuyType = true;
    boolean that_present_mediaBuyType = true;
    if (this_present_mediaBuyType || that_present_mediaBuyType) {
      if (!(this_present_mediaBuyType && that_present_mediaBuyType))
        return false;
      if (this.mediaBuyType != that.mediaBuyType)
        return false;
    }

    boolean this_present_pacingDisabled = true;
    boolean that_present_pacingDisabled = true;
    if (this_present_pacingDisabled || that_present_pacingDisabled) {
      if (!(this_present_pacingDisabled && that_present_pacingDisabled))
        return false;
      if (this.pacingDisabled != that.pacingDisabled)
        return false;
    }

    boolean this_present_maxDailyHit = true && this.isSetMaxDailyHit();
    boolean that_present_maxDailyHit = true && that.isSetMaxDailyHit();
    if (this_present_maxDailyHit || that_present_maxDailyHit) {
      if (!(this_present_maxDailyHit && that_present_maxDailyHit))
        return false;
      if (!this.maxDailyHit.equals(that.maxDailyHit))
        return false;
    }

    boolean this_present_quantityType = true;
    boolean that_present_quantityType = true;
    if (this_present_quantityType || that_present_quantityType) {
      if (!(this_present_quantityType && that_present_quantityType))
        return false;
      if (this.quantityType != that.quantityType)
        return false;
    }

    boolean this_present_quantityBudget = true && this.isSetQuantityBudget();
    boolean that_present_quantityBudget = true && that.isSetQuantityBudget();
    if (this_present_quantityBudget || that_present_quantityBudget) {
      if (!(this_present_quantityBudget && that_present_quantityBudget))
        return false;
      if (!this.quantityBudget.equals(that.quantityBudget))
        return false;
    }

    boolean this_present_balance = true && this.isSetBalance();
    boolean that_present_balance = true && that.isSetBalance();
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (!this.balance.equals(that.balance))
        return false;
    }

    boolean this_present_dailyQuantity = true && this.isSetDailyQuantity();
    boolean that_present_dailyQuantity = true && that.isSetDailyQuantity();
    if (this_present_dailyQuantity || that_present_dailyQuantity) {
      if (!(this_present_dailyQuantity && that_present_dailyQuantity))
        return false;
      if (!this.dailyQuantity.equals(that.dailyQuantity))
        return false;
    }

    boolean this_present_maxDailyQuantity = true && this.isSetMaxDailyQuantity();
    boolean that_present_maxDailyQuantity = true && that.isSetMaxDailyQuantity();
    if (this_present_maxDailyQuantity || that_present_maxDailyQuantity) {
      if (!(this_present_maxDailyQuantity && that_present_maxDailyQuantity))
        return false;
      if (!this.maxDailyQuantity.equals(that.maxDailyQuantity))
        return false;
    }

    boolean this_present_income = true && this.isSetIncome();
    boolean that_present_income = true && that.isSetIncome();
    if (this_present_income || that_present_income) {
      if (!(this_present_income && that_present_income))
        return false;
      if (!this.income.equals(that.income))
        return false;
    }

    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_totalQuantity = true && this.isSetTotalQuantity();
    boolean that_present_totalQuantity = true && that.isSetTotalQuantity();
    if (this_present_totalQuantity || that_present_totalQuantity) {
      if (!(this_present_totalQuantity && that_present_totalQuantity))
        return false;
      if (!this.totalQuantity.equals(that.totalQuantity))
        return false;
    }

    boolean this_present_pvHitRate = true;
    boolean that_present_pvHitRate = true;
    if (this_present_pvHitRate || that_present_pvHitRate) {
      if (!(this_present_pvHitRate && that_present_pvHitRate))
        return false;
      if (this.pvHitRate != that.pvHitRate)
        return false;
    }

    boolean this_present_Priority = true;
    boolean that_present_Priority = true;
    if (this_present_Priority || that_present_Priority) {
      if (!(this_present_Priority && that_present_Priority))
        return false;
      if (this.Priority != that.Priority)
        return false;
    }

    boolean this_present_nonPvRate = true;
    boolean that_present_nonPvRate = true;
    if (this_present_nonPvRate || that_present_nonPvRate) {
      if (!(this_present_nonPvRate && that_present_nonPvRate))
        return false;
      if (this.nonPvRate != that.nonPvRate)
        return false;
    }

    boolean this_present_makeupRate = true && this.isSetMakeupRate();
    boolean that_present_makeupRate = true && that.isSetMakeupRate();
    if (this_present_makeupRate || that_present_makeupRate) {
      if (!(this_present_makeupRate && that_present_makeupRate))
        return false;
      if (!this.makeupRate.equals(that.makeupRate))
        return false;
    }

    boolean this_present_useHtmlSnippet = true;
    boolean that_present_useHtmlSnippet = true;
    if (this_present_useHtmlSnippet || that_present_useHtmlSnippet) {
      if (!(this_present_useHtmlSnippet && that_present_useHtmlSnippet))
        return false;
      if (this.useHtmlSnippet != that.useHtmlSnippet)
        return false;
    }

    boolean this_present_pacingType = true;
    boolean that_present_pacingType = true;
    if (this_present_pacingType || that_present_pacingType) {
      if (!(this_present_pacingType && that_present_pacingType))
        return false;
      if (this.pacingType != that.pacingType)
        return false;
    }

    boolean this_present_clickBudget = true && this.isSetClickBudget();
    boolean that_present_clickBudget = true && that.isSetClickBudget();
    if (this_present_clickBudget || that_present_clickBudget) {
      if (!(this_present_clickBudget && that_present_clickBudget))
        return false;
      if (!this.clickBudget.equals(that.clickBudget))
        return false;
    }

    boolean this_present_maxDailyClick = true && this.isSetMaxDailyClick();
    boolean that_present_maxDailyClick = true && that.isSetMaxDailyClick();
    if (this_present_maxDailyClick || that_present_maxDailyClick) {
      if (!(this_present_maxDailyClick && that_present_maxDailyClick))
        return false;
      if (!this.maxDailyClick.equals(that.maxDailyClick))
        return false;
    }

    boolean this_present_dailyHitClick = true && this.isSetDailyHitClick();
    boolean that_present_dailyHitClick = true && that.isSetDailyHitClick();
    if (this_present_dailyHitClick || that_present_dailyHitClick) {
      if (!(this_present_dailyHitClick && that_present_dailyHitClick))
        return false;
      if (!this.dailyHitClick.equals(that.dailyHitClick))
        return false;
    }

    boolean this_present_totalHitClick = true && this.isSetTotalHitClick();
    boolean that_present_totalHitClick = true && that.isSetTotalHitClick();
    if (this_present_totalHitClick || that_present_totalHitClick) {
      if (!(this_present_totalHitClick && that_present_totalHitClick))
        return false;
      if (!this.totalHitClick.equals(that.totalHitClick))
        return false;
    }

    boolean this_present_pvBudget = true && this.isSetPvBudget();
    boolean that_present_pvBudget = true && that.isSetPvBudget();
    if (this_present_pvBudget || that_present_pvBudget) {
      if (!(this_present_pvBudget && that_present_pvBudget))
        return false;
      if (!this.pvBudget.equals(that.pvBudget))
        return false;
    }

    boolean this_present_maxDailyPV = true && this.isSetMaxDailyPV();
    boolean that_present_maxDailyPV = true && that.isSetMaxDailyPV();
    if (this_present_maxDailyPV || that_present_maxDailyPV) {
      if (!(this_present_maxDailyPV && that_present_maxDailyPV))
        return false;
      if (!this.maxDailyPV.equals(that.maxDailyPV))
        return false;
    }

    boolean this_present_dailyHitPV = true && this.isSetDailyHitPV();
    boolean that_present_dailyHitPV = true && that.isSetDailyHitPV();
    if (this_present_dailyHitPV || that_present_dailyHitPV) {
      if (!(this_present_dailyHitPV && that_present_dailyHitPV))
        return false;
      if (!this.dailyHitPV.equals(that.dailyHitPV))
        return false;
    }

    boolean this_present_totalHitPV = true && this.isSetTotalHitPV();
    boolean that_present_totalHitPV = true && that.isSetTotalHitPV();
    if (this_present_totalHitPV || that_present_totalHitPV) {
      if (!(this_present_totalHitPV && that_present_totalHitPV))
        return false;
      if (!this.totalHitPV.equals(that.totalHitPV))
        return false;
    }

    boolean this_present_creativeTags = true && this.isSetCreativeTags();
    boolean that_present_creativeTags = true && that.isSetCreativeTags();
    if (this_present_creativeTags || that_present_creativeTags) {
      if (!(this_present_creativeTags && that_present_creativeTags))
        return false;
      if (!this.creativeTags.equals(that.creativeTags))
        return false;
    }

    boolean this_present_strategyGroupId = true;
    boolean that_present_strategyGroupId = true;
    if (this_present_strategyGroupId || that_present_strategyGroupId) {
      if (!(this_present_strategyGroupId && that_present_strategyGroupId))
        return false;
      if (this.strategyGroupId != that.strategyGroupId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_Dsp_Media_Buy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iD, other.iD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaignID()).compareTo(other.isSetCampaignID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaignID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaignID, other.campaignID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBudget()).compareTo(other.isSetBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.budget, other.budget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKpiAmount()).compareTo(other.isSetKpiAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKpiAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kpiAmount, other.kpiAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdExchanges()).compareTo(other.isSetAdExchanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdExchanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adExchanges, other.adExchanges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidPrice()).compareTo(other.isSetBidPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPrice, other.bidPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidPriceType()).compareTo(other.isSetBidPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPriceType, other.bidPriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreativeRotation()).compareTo(other.isSetCreativeRotation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreativeRotation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creativeRotation, other.creativeRotation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdSizes()).compareTo(other.isSetAdSizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSizes, other.adSizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdPositions()).compareTo(other.isSetAdPositions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdPositions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adPositions, other.adPositions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdTypes()).compareTo(other.isSetAdTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adTypes, other.adTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvFeature()).compareTo(other.isSetAdvFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advFeature, other.advFeature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalHit()).compareTo(other.isSetTotalHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHit, other.totalHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyHit()).compareTo(other.isSetDailyHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyHit, other.dailyHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBudgetType()).compareTo(other.isSetBudgetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBudgetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.budgetType, other.budgetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKpiType()).compareTo(other.isSetKpiType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKpiType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kpiType, other.kpiType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedias()).compareTo(other.isSetMedias());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedias()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medias, other.medias);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdPartyPubTracking()).compareTo(other.isSetThirdPartyPubTracking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdPartyPubTracking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdPartyPubTracking, other.thirdPartyPubTracking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdpartyParam()).compareTo(other.isSetThirdpartyParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdpartyParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdpartyParam, other.thirdpartyParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(other.isSetMediaType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, other.mediaType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaBuyType()).compareTo(other.isSetMediaBuyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaBuyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaBuyType, other.mediaBuyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPacingDisabled()).compareTo(other.isSetPacingDisabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacingDisabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pacingDisabled, other.pacingDisabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDailyHit()).compareTo(other.isSetMaxDailyHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDailyHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDailyHit, other.maxDailyHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantityType()).compareTo(other.isSetQuantityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantityType, other.quantityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantityBudget()).compareTo(other.isSetQuantityBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantityBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantityBudget, other.quantityBudget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyQuantity()).compareTo(other.isSetDailyQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyQuantity, other.dailyQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDailyQuantity()).compareTo(other.isSetMaxDailyQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDailyQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDailyQuantity, other.maxDailyQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncome()).compareTo(other.isSetIncome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.income, other.income);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalQuantity()).compareTo(other.isSetTotalQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalQuantity, other.totalQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPvHitRate()).compareTo(other.isSetPvHitRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPvHitRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pvHitRate, other.pvHitRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Priority, other.Priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonPvRate()).compareTo(other.isSetNonPvRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonPvRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonPvRate, other.nonPvRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMakeupRate()).compareTo(other.isSetMakeupRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMakeupRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.makeupRate, other.makeupRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseHtmlSnippet()).compareTo(other.isSetUseHtmlSnippet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseHtmlSnippet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useHtmlSnippet, other.useHtmlSnippet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPacingType()).compareTo(other.isSetPacingType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacingType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pacingType, other.pacingType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickBudget()).compareTo(other.isSetClickBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickBudget, other.clickBudget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDailyClick()).compareTo(other.isSetMaxDailyClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDailyClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDailyClick, other.maxDailyClick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyHitClick()).compareTo(other.isSetDailyHitClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyHitClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyHitClick, other.dailyHitClick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalHitClick()).compareTo(other.isSetTotalHitClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHitClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHitClick, other.totalHitClick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPvBudget()).compareTo(other.isSetPvBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPvBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pvBudget, other.pvBudget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDailyPV()).compareTo(other.isSetMaxDailyPV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDailyPV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDailyPV, other.maxDailyPV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyHitPV()).compareTo(other.isSetDailyHitPV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyHitPV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyHitPV, other.dailyHitPV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalHitPV()).compareTo(other.isSetTotalHitPV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHitPV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHitPV, other.totalHitPV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreativeTags()).compareTo(other.isSetCreativeTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreativeTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creativeTags, other.creativeTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategyGroupId()).compareTo(other.isSetStrategyGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategyGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyGroupId, other.strategyGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_Dsp_Media_Buy(");
    boolean first = true;

    sb.append("iD:");
    sb.append(this.iD);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("campaignID:");
    sb.append(this.campaignID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("budget:");
    if (this.budget == null) {
      sb.append("null");
    } else {
      sb.append(this.budget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kpiAmount:");
    if (this.kpiAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.kpiAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adExchanges:");
    if (this.adExchanges == null) {
      sb.append("null");
    } else {
      sb.append(this.adExchanges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidPrice:");
    if (this.bidPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.bidPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidPriceType:");
    sb.append(this.bidPriceType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creativeRotation:");
    sb.append(this.creativeRotation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adSizes:");
    if (this.adSizes == null) {
      sb.append("null");
    } else {
      sb.append(this.adSizes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adPositions:");
    if (this.adPositions == null) {
      sb.append("null");
    } else {
      sb.append(this.adPositions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adTypes:");
    if (this.adTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.adTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("advFeature:");
    sb.append(this.advFeature);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalHit:");
    if (this.totalHit == null) {
      sb.append("null");
    } else {
      sb.append(this.totalHit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dailyHit:");
    if (this.dailyHit == null) {
      sb.append("null");
    } else {
      sb.append(this.dailyHit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("budgetType:");
    sb.append(this.budgetType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kpiType:");
    sb.append(this.kpiType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("medias:");
    if (this.medias == null) {
      sb.append("null");
    } else {
      sb.append(this.medias);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdPartyPubTracking:");
    if (this.thirdPartyPubTracking == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdPartyPubTracking);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdpartyParam:");
    if (this.thirdpartyParam == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdpartyParam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaType:");
    sb.append(this.mediaType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaBuyType:");
    sb.append(this.mediaBuyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pacingDisabled:");
    sb.append(this.pacingDisabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDailyHit:");
    if (this.maxDailyHit == null) {
      sb.append("null");
    } else {
      sb.append(this.maxDailyHit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantityType:");
    sb.append(this.quantityType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantityBudget:");
    if (this.quantityBudget == null) {
      sb.append("null");
    } else {
      sb.append(this.quantityBudget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    if (this.balance == null) {
      sb.append("null");
    } else {
      sb.append(this.balance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dailyQuantity:");
    if (this.dailyQuantity == null) {
      sb.append("null");
    } else {
      sb.append(this.dailyQuantity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDailyQuantity:");
    if (this.maxDailyQuantity == null) {
      sb.append("null");
    } else {
      sb.append(this.maxDailyQuantity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("income:");
    if (this.income == null) {
      sb.append("null");
    } else {
      sb.append(this.income);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalQuantity:");
    if (this.totalQuantity == null) {
      sb.append("null");
    } else {
      sb.append(this.totalQuantity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pvHitRate:");
    sb.append(this.pvHitRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Priority:");
    sb.append(this.Priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nonPvRate:");
    sb.append(this.nonPvRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("makeupRate:");
    if (this.makeupRate == null) {
      sb.append("null");
    } else {
      sb.append(this.makeupRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("useHtmlSnippet:");
    sb.append(this.useHtmlSnippet);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pacingType:");
    sb.append(this.pacingType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clickBudget:");
    if (this.clickBudget == null) {
      sb.append("null");
    } else {
      sb.append(this.clickBudget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDailyClick:");
    if (this.maxDailyClick == null) {
      sb.append("null");
    } else {
      sb.append(this.maxDailyClick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dailyHitClick:");
    if (this.dailyHitClick == null) {
      sb.append("null");
    } else {
      sb.append(this.dailyHitClick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalHitClick:");
    if (this.totalHitClick == null) {
      sb.append("null");
    } else {
      sb.append(this.totalHitClick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pvBudget:");
    if (this.pvBudget == null) {
      sb.append("null");
    } else {
      sb.append(this.pvBudget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDailyPV:");
    if (this.maxDailyPV == null) {
      sb.append("null");
    } else {
      sb.append(this.maxDailyPV);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dailyHitPV:");
    if (this.dailyHitPV == null) {
      sb.append("null");
    } else {
      sb.append(this.dailyHitPV);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalHitPV:");
    if (this.totalHitPV == null) {
      sb.append("null");
    } else {
      sb.append(this.totalHitPV);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creativeTags:");
    if (this.creativeTags == null) {
      sb.append("null");
    } else {
      sb.append(this.creativeTags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strategyGroupId:");
    sb.append(this.strategyGroupId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'iD' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'campaignID' because it's a primitive and you chose the non-beans generator.
    if (budget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'budget' was not present! Struct: " + toString());
    }
    if (kpiAmount == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'kpiAmount' was not present! Struct: " + toString());
    }
    if (adExchanges == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'adExchanges' was not present! Struct: " + toString());
    }
    if (bidPrice == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bidPrice' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'bidPriceType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'creativeRotation' because it's a primitive and you chose the non-beans generator.
    if (adSizes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'adSizes' was not present! Struct: " + toString());
    }
    if (adPositions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'adPositions' was not present! Struct: " + toString());
    }
    if (adTypes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'adTypes' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'advFeature' because it's a primitive and you chose the non-beans generator.
    if (totalHit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalHit' was not present! Struct: " + toString());
    }
    if (dailyHit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dailyHit' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'budgetType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'kpiType' because it's a primitive and you chose the non-beans generator.
    if (medias == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'medias' was not present! Struct: " + toString());
    }
    if (startTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' was not present! Struct: " + toString());
    }
    if (endTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTime' was not present! Struct: " + toString());
    }
    if (thirdPartyPubTracking == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'thirdPartyPubTracking' was not present! Struct: " + toString());
    }
    if (thirdpartyParam == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'thirdpartyParam' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'mediaType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mediaBuyType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pacingDisabled' because it's a primitive and you chose the non-beans generator.
    if (maxDailyHit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxDailyHit' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'quantityType' because it's a primitive and you chose the non-beans generator.
    if (quantityBudget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'quantityBudget' was not present! Struct: " + toString());
    }
    if (balance == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'balance' was not present! Struct: " + toString());
    }
    if (dailyQuantity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dailyQuantity' was not present! Struct: " + toString());
    }
    if (maxDailyQuantity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxDailyQuantity' was not present! Struct: " + toString());
    }
    if (income == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'income' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'source' because it's a primitive and you chose the non-beans generator.
    if (totalQuantity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalQuantity' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'pvHitRate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'Priority' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'nonPvRate' because it's a primitive and you chose the non-beans generator.
    if (makeupRate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'makeupRate' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'useHtmlSnippet' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pacingType' because it's a primitive and you chose the non-beans generator.
    if (clickBudget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clickBudget' was not present! Struct: " + toString());
    }
    if (maxDailyClick == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxDailyClick' was not present! Struct: " + toString());
    }
    if (dailyHitClick == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dailyHitClick' was not present! Struct: " + toString());
    }
    if (totalHitClick == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalHitClick' was not present! Struct: " + toString());
    }
    if (pvBudget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pvBudget' was not present! Struct: " + toString());
    }
    if (maxDailyPV == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxDailyPV' was not present! Struct: " + toString());
    }
    if (dailyHitPV == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dailyHitPV' was not present! Struct: " + toString());
    }
    if (totalHitPV == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalHitPV' was not present! Struct: " + toString());
    }
    if (creativeTags == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'creativeTags' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'strategyGroupId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_Dsp_Media_BuyStandardSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Media_BuyStandardScheme getScheme() {
      return new TDbSync_Dsp_Media_BuyStandardScheme();
    }
  }

  private static class TDbSync_Dsp_Media_BuyStandardScheme extends StandardScheme<TDbSync_Dsp_Media_Buy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_Dsp_Media_Buy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // I_D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iD = iprot.readI32();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAMPAIGN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.campaignID = iprot.readI32();
              struct.setCampaignIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.budget = iprot.readString();
              struct.setBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KPI_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kpiAmount = iprot.readString();
              struct.setKpiAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AD_EXCHANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adExchanges = iprot.readString();
              struct.setAdExchangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BID_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bidPrice = iprot.readString();
              struct.setBidPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BID_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bidPriceType = iprot.readI32();
              struct.setBidPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATIVE_ROTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creativeRotation = iprot.readI32();
              struct.setCreativeRotationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AD_SIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adSizes = iprot.readString();
              struct.setAdSizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AD_POSITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adPositions = iprot.readString();
              struct.setAdPositionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AD_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adTypes = iprot.readString();
              struct.setAdTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ADV_FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.advFeature = iprot.readI32();
              struct.setAdvFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TOTAL_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalHit = iprot.readString();
              struct.setTotalHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DAILY_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dailyHit = iprot.readString();
              struct.setDailyHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BUDGET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.budgetType = iprot.readI32();
              struct.setBudgetTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // KPI_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.kpiType = iprot.readI32();
              struct.setKpiTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MEDIAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.medias = iprot.readString();
              struct.setMediasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // THIRD_PARTY_PUB_TRACKING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdPartyPubTracking = iprot.readString();
              struct.setThirdPartyPubTrackingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // THIRDPARTY_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdpartyParam = iprot.readString();
              struct.setThirdpartyParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MEDIA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaType = iprot.readI32();
              struct.setMediaTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // MEDIA_BUY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaBuyType = iprot.readI32();
              struct.setMediaBuyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PACING_DISABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pacingDisabled = iprot.readI32();
              struct.setPacingDisabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // MAX_DAILY_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxDailyHit = iprot.readString();
              struct.setMaxDailyHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // QUANTITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantityType = iprot.readI32();
              struct.setQuantityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // QUANTITY_BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quantityBudget = iprot.readString();
              struct.setQuantityBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.balance = iprot.readString();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // DAILY_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dailyQuantity = iprot.readString();
              struct.setDailyQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // MAX_DAILY_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxDailyQuantity = iprot.readString();
              struct.setMaxDailyQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // INCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.income = iprot.readString();
              struct.setIncomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = iprot.readI32();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // TOTAL_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalQuantity = iprot.readString();
              struct.setTotalQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // PV_HIT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pvHitRate = iprot.readI32();
              struct.setPvHitRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // NON_PV_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nonPvRate = iprot.readI32();
              struct.setNonPvRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // MAKEUP_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.makeupRate = iprot.readString();
              struct.setMakeupRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // USE_HTML_SNIPPET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.useHtmlSnippet = iprot.readI32();
              struct.setUseHtmlSnippetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // PACING_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pacingType = iprot.readI32();
              struct.setPacingTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // CLICK_BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clickBudget = iprot.readString();
              struct.setClickBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // MAX_DAILY_CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxDailyClick = iprot.readString();
              struct.setMaxDailyClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // DAILY_HIT_CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dailyHitClick = iprot.readString();
              struct.setDailyHitClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // TOTAL_HIT_CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalHitClick = iprot.readString();
              struct.setTotalHitClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // PV_BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pvBudget = iprot.readString();
              struct.setPvBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // MAX_DAILY_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxDailyPV = iprot.readString();
              struct.setMaxDailyPVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // DAILY_HIT_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dailyHitPV = iprot.readString();
              struct.setDailyHitPVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // TOTAL_HIT_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalHitPV = iprot.readString();
              struct.setTotalHitPVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // CREATIVE_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creativeTags = iprot.readString();
              struct.setCreativeTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // STRATEGY_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.strategyGroupId = iprot.readI32();
              struct.setStrategyGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'iD' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCampaignID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'campaignID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBidPriceType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bidPriceType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreativeRotation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'creativeRotation' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAdvFeature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'advFeature' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBudgetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'budgetType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKpiType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'kpiType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMediaType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMediaBuyType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaBuyType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPacingDisabled()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pacingDisabled' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQuantityType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'quantityType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSource()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'source' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPvHitRate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pvHitRate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPriority()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'Priority' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNonPvRate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nonPvRate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUseHtmlSnippet()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'useHtmlSnippet' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPacingType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pacingType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStrategyGroupId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'strategyGroupId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_Dsp_Media_Buy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(I_D_FIELD_DESC);
      oprot.writeI32(struct.iD);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAMPAIGN_ID_FIELD_DESC);
      oprot.writeI32(struct.campaignID);
      oprot.writeFieldEnd();
      if (struct.budget != null) {
        oprot.writeFieldBegin(BUDGET_FIELD_DESC);
        oprot.writeString(struct.budget);
        oprot.writeFieldEnd();
      }
      if (struct.kpiAmount != null) {
        oprot.writeFieldBegin(KPI_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.kpiAmount);
        oprot.writeFieldEnd();
      }
      if (struct.adExchanges != null) {
        oprot.writeFieldBegin(AD_EXCHANGES_FIELD_DESC);
        oprot.writeString(struct.adExchanges);
        oprot.writeFieldEnd();
      }
      if (struct.bidPrice != null) {
        oprot.writeFieldBegin(BID_PRICE_FIELD_DESC);
        oprot.writeString(struct.bidPrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BID_PRICE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.bidPriceType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATIVE_ROTATION_FIELD_DESC);
      oprot.writeI32(struct.creativeRotation);
      oprot.writeFieldEnd();
      if (struct.adSizes != null) {
        oprot.writeFieldBegin(AD_SIZES_FIELD_DESC);
        oprot.writeString(struct.adSizes);
        oprot.writeFieldEnd();
      }
      if (struct.adPositions != null) {
        oprot.writeFieldBegin(AD_POSITIONS_FIELD_DESC);
        oprot.writeString(struct.adPositions);
        oprot.writeFieldEnd();
      }
      if (struct.adTypes != null) {
        oprot.writeFieldBegin(AD_TYPES_FIELD_DESC);
        oprot.writeString(struct.adTypes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ADV_FEATURE_FIELD_DESC);
      oprot.writeI32(struct.advFeature);
      oprot.writeFieldEnd();
      if (struct.totalHit != null) {
        oprot.writeFieldBegin(TOTAL_HIT_FIELD_DESC);
        oprot.writeString(struct.totalHit);
        oprot.writeFieldEnd();
      }
      if (struct.dailyHit != null) {
        oprot.writeFieldBegin(DAILY_HIT_FIELD_DESC);
        oprot.writeString(struct.dailyHit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUDGET_TYPE_FIELD_DESC);
      oprot.writeI32(struct.budgetType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KPI_TYPE_FIELD_DESC);
      oprot.writeI32(struct.kpiType);
      oprot.writeFieldEnd();
      if (struct.medias != null) {
        oprot.writeFieldBegin(MEDIAS_FIELD_DESC);
        oprot.writeString(struct.medias);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.thirdPartyPubTracking != null) {
        oprot.writeFieldBegin(THIRD_PARTY_PUB_TRACKING_FIELD_DESC);
        oprot.writeString(struct.thirdPartyPubTracking);
        oprot.writeFieldEnd();
      }
      if (struct.thirdpartyParam != null) {
        oprot.writeFieldBegin(THIRDPARTY_PARAM_FIELD_DESC);
        oprot.writeString(struct.thirdpartyParam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
      oprot.writeI32(struct.mediaType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEDIA_BUY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.mediaBuyType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PACING_DISABLED_FIELD_DESC);
      oprot.writeI32(struct.pacingDisabled);
      oprot.writeFieldEnd();
      if (struct.maxDailyHit != null) {
        oprot.writeFieldBegin(MAX_DAILY_HIT_FIELD_DESC);
        oprot.writeString(struct.maxDailyHit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUANTITY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.quantityType);
      oprot.writeFieldEnd();
      if (struct.quantityBudget != null) {
        oprot.writeFieldBegin(QUANTITY_BUDGET_FIELD_DESC);
        oprot.writeString(struct.quantityBudget);
        oprot.writeFieldEnd();
      }
      if (struct.balance != null) {
        oprot.writeFieldBegin(BALANCE_FIELD_DESC);
        oprot.writeString(struct.balance);
        oprot.writeFieldEnd();
      }
      if (struct.dailyQuantity != null) {
        oprot.writeFieldBegin(DAILY_QUANTITY_FIELD_DESC);
        oprot.writeString(struct.dailyQuantity);
        oprot.writeFieldEnd();
      }
      if (struct.maxDailyQuantity != null) {
        oprot.writeFieldBegin(MAX_DAILY_QUANTITY_FIELD_DESC);
        oprot.writeString(struct.maxDailyQuantity);
        oprot.writeFieldEnd();
      }
      if (struct.income != null) {
        oprot.writeFieldBegin(INCOME_FIELD_DESC);
        oprot.writeString(struct.income);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SOURCE_FIELD_DESC);
      oprot.writeI32(struct.source);
      oprot.writeFieldEnd();
      if (struct.totalQuantity != null) {
        oprot.writeFieldBegin(TOTAL_QUANTITY_FIELD_DESC);
        oprot.writeString(struct.totalQuantity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PV_HIT_RATE_FIELD_DESC);
      oprot.writeI32(struct.pvHitRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.Priority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NON_PV_RATE_FIELD_DESC);
      oprot.writeI32(struct.nonPvRate);
      oprot.writeFieldEnd();
      if (struct.makeupRate != null) {
        oprot.writeFieldBegin(MAKEUP_RATE_FIELD_DESC);
        oprot.writeString(struct.makeupRate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USE_HTML_SNIPPET_FIELD_DESC);
      oprot.writeI32(struct.useHtmlSnippet);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PACING_TYPE_FIELD_DESC);
      oprot.writeI32(struct.pacingType);
      oprot.writeFieldEnd();
      if (struct.clickBudget != null) {
        oprot.writeFieldBegin(CLICK_BUDGET_FIELD_DESC);
        oprot.writeString(struct.clickBudget);
        oprot.writeFieldEnd();
      }
      if (struct.maxDailyClick != null) {
        oprot.writeFieldBegin(MAX_DAILY_CLICK_FIELD_DESC);
        oprot.writeString(struct.maxDailyClick);
        oprot.writeFieldEnd();
      }
      if (struct.dailyHitClick != null) {
        oprot.writeFieldBegin(DAILY_HIT_CLICK_FIELD_DESC);
        oprot.writeString(struct.dailyHitClick);
        oprot.writeFieldEnd();
      }
      if (struct.totalHitClick != null) {
        oprot.writeFieldBegin(TOTAL_HIT_CLICK_FIELD_DESC);
        oprot.writeString(struct.totalHitClick);
        oprot.writeFieldEnd();
      }
      if (struct.pvBudget != null) {
        oprot.writeFieldBegin(PV_BUDGET_FIELD_DESC);
        oprot.writeString(struct.pvBudget);
        oprot.writeFieldEnd();
      }
      if (struct.maxDailyPV != null) {
        oprot.writeFieldBegin(MAX_DAILY_PV_FIELD_DESC);
        oprot.writeString(struct.maxDailyPV);
        oprot.writeFieldEnd();
      }
      if (struct.dailyHitPV != null) {
        oprot.writeFieldBegin(DAILY_HIT_PV_FIELD_DESC);
        oprot.writeString(struct.dailyHitPV);
        oprot.writeFieldEnd();
      }
      if (struct.totalHitPV != null) {
        oprot.writeFieldBegin(TOTAL_HIT_PV_FIELD_DESC);
        oprot.writeString(struct.totalHitPV);
        oprot.writeFieldEnd();
      }
      if (struct.creativeTags != null) {
        oprot.writeFieldBegin(CREATIVE_TAGS_FIELD_DESC);
        oprot.writeString(struct.creativeTags);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STRATEGY_GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct.strategyGroupId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_Dsp_Media_BuyTupleSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Media_BuyTupleScheme getScheme() {
      return new TDbSync_Dsp_Media_BuyTupleScheme();
    }
  }

  private static class TDbSync_Dsp_Media_BuyTupleScheme extends TupleScheme<TDbSync_Dsp_Media_Buy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Media_Buy struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.iD);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeString(struct.name);
      oprot.writeI32(struct.campaignID);
      oprot.writeString(struct.budget);
      oprot.writeString(struct.kpiAmount);
      oprot.writeString(struct.adExchanges);
      oprot.writeString(struct.bidPrice);
      oprot.writeI32(struct.bidPriceType);
      oprot.writeI32(struct.creativeRotation);
      oprot.writeString(struct.adSizes);
      oprot.writeString(struct.adPositions);
      oprot.writeString(struct.adTypes);
      oprot.writeI32(struct.advFeature);
      oprot.writeString(struct.totalHit);
      oprot.writeString(struct.dailyHit);
      oprot.writeI32(struct.budgetType);
      oprot.writeI32(struct.kpiType);
      oprot.writeString(struct.medias);
      oprot.writeString(struct.startTime);
      oprot.writeString(struct.endTime);
      oprot.writeString(struct.thirdPartyPubTracking);
      oprot.writeString(struct.thirdpartyParam);
      oprot.writeI32(struct.mediaType);
      oprot.writeI32(struct.mediaBuyType);
      oprot.writeI32(struct.pacingDisabled);
      oprot.writeString(struct.maxDailyHit);
      oprot.writeI32(struct.quantityType);
      oprot.writeString(struct.quantityBudget);
      oprot.writeString(struct.balance);
      oprot.writeString(struct.dailyQuantity);
      oprot.writeString(struct.maxDailyQuantity);
      oprot.writeString(struct.income);
      oprot.writeI32(struct.source);
      oprot.writeString(struct.totalQuantity);
      oprot.writeI32(struct.pvHitRate);
      oprot.writeI32(struct.Priority);
      oprot.writeI32(struct.nonPvRate);
      oprot.writeString(struct.makeupRate);
      oprot.writeI32(struct.useHtmlSnippet);
      oprot.writeI32(struct.pacingType);
      oprot.writeString(struct.clickBudget);
      oprot.writeString(struct.maxDailyClick);
      oprot.writeString(struct.dailyHitClick);
      oprot.writeString(struct.totalHitClick);
      oprot.writeString(struct.pvBudget);
      oprot.writeString(struct.maxDailyPV);
      oprot.writeString(struct.dailyHitPV);
      oprot.writeString(struct.totalHitPV);
      oprot.writeString(struct.creativeTags);
      oprot.writeI32(struct.strategyGroupId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Media_Buy struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.iD = iprot.readI32();
      struct.setIDIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.campaignID = iprot.readI32();
      struct.setCampaignIDIsSet(true);
      struct.budget = iprot.readString();
      struct.setBudgetIsSet(true);
      struct.kpiAmount = iprot.readString();
      struct.setKpiAmountIsSet(true);
      struct.adExchanges = iprot.readString();
      struct.setAdExchangesIsSet(true);
      struct.bidPrice = iprot.readString();
      struct.setBidPriceIsSet(true);
      struct.bidPriceType = iprot.readI32();
      struct.setBidPriceTypeIsSet(true);
      struct.creativeRotation = iprot.readI32();
      struct.setCreativeRotationIsSet(true);
      struct.adSizes = iprot.readString();
      struct.setAdSizesIsSet(true);
      struct.adPositions = iprot.readString();
      struct.setAdPositionsIsSet(true);
      struct.adTypes = iprot.readString();
      struct.setAdTypesIsSet(true);
      struct.advFeature = iprot.readI32();
      struct.setAdvFeatureIsSet(true);
      struct.totalHit = iprot.readString();
      struct.setTotalHitIsSet(true);
      struct.dailyHit = iprot.readString();
      struct.setDailyHitIsSet(true);
      struct.budgetType = iprot.readI32();
      struct.setBudgetTypeIsSet(true);
      struct.kpiType = iprot.readI32();
      struct.setKpiTypeIsSet(true);
      struct.medias = iprot.readString();
      struct.setMediasIsSet(true);
      struct.startTime = iprot.readString();
      struct.setStartTimeIsSet(true);
      struct.endTime = iprot.readString();
      struct.setEndTimeIsSet(true);
      struct.thirdPartyPubTracking = iprot.readString();
      struct.setThirdPartyPubTrackingIsSet(true);
      struct.thirdpartyParam = iprot.readString();
      struct.setThirdpartyParamIsSet(true);
      struct.mediaType = iprot.readI32();
      struct.setMediaTypeIsSet(true);
      struct.mediaBuyType = iprot.readI32();
      struct.setMediaBuyTypeIsSet(true);
      struct.pacingDisabled = iprot.readI32();
      struct.setPacingDisabledIsSet(true);
      struct.maxDailyHit = iprot.readString();
      struct.setMaxDailyHitIsSet(true);
      struct.quantityType = iprot.readI32();
      struct.setQuantityTypeIsSet(true);
      struct.quantityBudget = iprot.readString();
      struct.setQuantityBudgetIsSet(true);
      struct.balance = iprot.readString();
      struct.setBalanceIsSet(true);
      struct.dailyQuantity = iprot.readString();
      struct.setDailyQuantityIsSet(true);
      struct.maxDailyQuantity = iprot.readString();
      struct.setMaxDailyQuantityIsSet(true);
      struct.income = iprot.readString();
      struct.setIncomeIsSet(true);
      struct.source = iprot.readI32();
      struct.setSourceIsSet(true);
      struct.totalQuantity = iprot.readString();
      struct.setTotalQuantityIsSet(true);
      struct.pvHitRate = iprot.readI32();
      struct.setPvHitRateIsSet(true);
      struct.Priority = iprot.readI32();
      struct.setPriorityIsSet(true);
      struct.nonPvRate = iprot.readI32();
      struct.setNonPvRateIsSet(true);
      struct.makeupRate = iprot.readString();
      struct.setMakeupRateIsSet(true);
      struct.useHtmlSnippet = iprot.readI32();
      struct.setUseHtmlSnippetIsSet(true);
      struct.pacingType = iprot.readI32();
      struct.setPacingTypeIsSet(true);
      struct.clickBudget = iprot.readString();
      struct.setClickBudgetIsSet(true);
      struct.maxDailyClick = iprot.readString();
      struct.setMaxDailyClickIsSet(true);
      struct.dailyHitClick = iprot.readString();
      struct.setDailyHitClickIsSet(true);
      struct.totalHitClick = iprot.readString();
      struct.setTotalHitClickIsSet(true);
      struct.pvBudget = iprot.readString();
      struct.setPvBudgetIsSet(true);
      struct.maxDailyPV = iprot.readString();
      struct.setMaxDailyPVIsSet(true);
      struct.dailyHitPV = iprot.readString();
      struct.setDailyHitPVIsSet(true);
      struct.totalHitPV = iprot.readString();
      struct.setTotalHitPVIsSet(true);
      struct.creativeTags = iprot.readString();
      struct.setCreativeTagsIsSet(true);
      struct.strategyGroupId = iprot.readI32();
      struct.setStrategyGroupIdIsSet(true);
    }
  }

}

