/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.dsp;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_Dsp_Tanx_Ad_Space implements org.apache.thrift.TBase<TDbSync_Dsp_Tanx_Ad_Space, TDbSync_Dsp_Tanx_Ad_Space._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_Dsp_Tanx_Ad_Space> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_Dsp_Tanx_Ad_Space");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SITE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("siteName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PID_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pidName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PID_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pidSize", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SITE_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("siteCategory", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PID_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("pidType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PID_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("pidLocation", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REFERENCE_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("referencePV", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LINK_RELATION_FIELD_DESC = new org.apache.thrift.protocol.TField("linkRelation", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_Dsp_Tanx_Ad_SpaceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_Dsp_Tanx_Ad_SpaceTupleSchemeFactory());
  }

  public String pid; // required
  public String siteName; // required
  public String pidName; // required
  public String pidSize; // required
  public String domain; // required
  public String siteCategory; // required
  public String url; // required
  public String pidType; // required
  public String pidLocation; // required
  public String referencePV; // required
  public String linkRelation; // required
  public String mediaType; // required
  public int status; // required
  public String lastChanged; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    SITE_NAME((short)2, "siteName"),
    PID_NAME((short)3, "pidName"),
    PID_SIZE((short)4, "pidSize"),
    DOMAIN((short)5, "domain"),
    SITE_CATEGORY((short)6, "siteCategory"),
    URL((short)7, "url"),
    PID_TYPE((short)8, "pidType"),
    PID_LOCATION((short)9, "pidLocation"),
    REFERENCE_PV((short)10, "referencePV"),
    LINK_RELATION((short)11, "linkRelation"),
    MEDIA_TYPE((short)12, "mediaType"),
    STATUS((short)13, "status"),
    LAST_CHANGED((short)14, "lastChanged");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // SITE_NAME
          return SITE_NAME;
        case 3: // PID_NAME
          return PID_NAME;
        case 4: // PID_SIZE
          return PID_SIZE;
        case 5: // DOMAIN
          return DOMAIN;
        case 6: // SITE_CATEGORY
          return SITE_CATEGORY;
        case 7: // URL
          return URL;
        case 8: // PID_TYPE
          return PID_TYPE;
        case 9: // PID_LOCATION
          return PID_LOCATION;
        case 10: // REFERENCE_PV
          return REFERENCE_PV;
        case 11: // LINK_RELATION
          return LINK_RELATION;
        case 12: // MEDIA_TYPE
          return MEDIA_TYPE;
        case 13: // STATUS
          return STATUS;
        case 14: // LAST_CHANGED
          return LAST_CHANGED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_NAME, new org.apache.thrift.meta_data.FieldMetaData("siteName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID_NAME, new org.apache.thrift.meta_data.FieldMetaData("pidName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pidSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("domain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITE_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("siteCategory", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID_TYPE, new org.apache.thrift.meta_data.FieldMetaData("pidType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("pidLocation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFERENCE_PV, new org.apache.thrift.meta_data.FieldMetaData("referencePV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_RELATION, new org.apache.thrift.meta_data.FieldMetaData("linkRelation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_Dsp_Tanx_Ad_Space.class, metaDataMap);
  }

  public TDbSync_Dsp_Tanx_Ad_Space() {
  }

  public TDbSync_Dsp_Tanx_Ad_Space(
    String pid,
    String siteName,
    String pidName,
    String pidSize,
    String domain,
    String siteCategory,
    String url,
    String pidType,
    String pidLocation,
    String referencePV,
    String linkRelation,
    String mediaType,
    int status,
    String lastChanged)
  {
    this();
    this.pid = pid;
    this.siteName = siteName;
    this.pidName = pidName;
    this.pidSize = pidSize;
    this.domain = domain;
    this.siteCategory = siteCategory;
    this.url = url;
    this.pidType = pidType;
    this.pidLocation = pidLocation;
    this.referencePV = referencePV;
    this.linkRelation = linkRelation;
    this.mediaType = mediaType;
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_Dsp_Tanx_Ad_Space(TDbSync_Dsp_Tanx_Ad_Space other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPid()) {
      this.pid = other.pid;
    }
    if (other.isSetSiteName()) {
      this.siteName = other.siteName;
    }
    if (other.isSetPidName()) {
      this.pidName = other.pidName;
    }
    if (other.isSetPidSize()) {
      this.pidSize = other.pidSize;
    }
    if (other.isSetDomain()) {
      this.domain = other.domain;
    }
    if (other.isSetSiteCategory()) {
      this.siteCategory = other.siteCategory;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetPidType()) {
      this.pidType = other.pidType;
    }
    if (other.isSetPidLocation()) {
      this.pidLocation = other.pidLocation;
    }
    if (other.isSetReferencePV()) {
      this.referencePV = other.referencePV;
    }
    if (other.isSetLinkRelation()) {
      this.linkRelation = other.linkRelation;
    }
    if (other.isSetMediaType()) {
      this.mediaType = other.mediaType;
    }
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
  }

  public TDbSync_Dsp_Tanx_Ad_Space deepCopy() {
    return new TDbSync_Dsp_Tanx_Ad_Space(this);
  }

  @Override
  public void clear() {
    this.pid = null;
    this.siteName = null;
    this.pidName = null;
    this.pidSize = null;
    this.domain = null;
    this.siteCategory = null;
    this.url = null;
    this.pidType = null;
    this.pidLocation = null;
    this.referencePV = null;
    this.linkRelation = null;
    this.mediaType = null;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
  }

  public String getPid() {
    return this.pid;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setPid(String pid) {
    this.pid = pid;
    return this;
  }

  public void unsetPid() {
    this.pid = null;
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return this.pid != null;
  }

  public void setPidIsSet(boolean value) {
    if (!value) {
      this.pid = null;
    }
  }

  public String getSiteName() {
    return this.siteName;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setSiteName(String siteName) {
    this.siteName = siteName;
    return this;
  }

  public void unsetSiteName() {
    this.siteName = null;
  }

  /** Returns true if field siteName is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteName() {
    return this.siteName != null;
  }

  public void setSiteNameIsSet(boolean value) {
    if (!value) {
      this.siteName = null;
    }
  }

  public String getPidName() {
    return this.pidName;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setPidName(String pidName) {
    this.pidName = pidName;
    return this;
  }

  public void unsetPidName() {
    this.pidName = null;
  }

  /** Returns true if field pidName is set (has been assigned a value) and false otherwise */
  public boolean isSetPidName() {
    return this.pidName != null;
  }

  public void setPidNameIsSet(boolean value) {
    if (!value) {
      this.pidName = null;
    }
  }

  public String getPidSize() {
    return this.pidSize;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setPidSize(String pidSize) {
    this.pidSize = pidSize;
    return this;
  }

  public void unsetPidSize() {
    this.pidSize = null;
  }

  /** Returns true if field pidSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPidSize() {
    return this.pidSize != null;
  }

  public void setPidSizeIsSet(boolean value) {
    if (!value) {
      this.pidSize = null;
    }
  }

  public String getDomain() {
    return this.domain;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setDomain(String domain) {
    this.domain = domain;
    return this;
  }

  public void unsetDomain() {
    this.domain = null;
  }

  /** Returns true if field domain is set (has been assigned a value) and false otherwise */
  public boolean isSetDomain() {
    return this.domain != null;
  }

  public void setDomainIsSet(boolean value) {
    if (!value) {
      this.domain = null;
    }
  }

  public String getSiteCategory() {
    return this.siteCategory;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setSiteCategory(String siteCategory) {
    this.siteCategory = siteCategory;
    return this;
  }

  public void unsetSiteCategory() {
    this.siteCategory = null;
  }

  /** Returns true if field siteCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteCategory() {
    return this.siteCategory != null;
  }

  public void setSiteCategoryIsSet(boolean value) {
    if (!value) {
      this.siteCategory = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getPidType() {
    return this.pidType;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setPidType(String pidType) {
    this.pidType = pidType;
    return this;
  }

  public void unsetPidType() {
    this.pidType = null;
  }

  /** Returns true if field pidType is set (has been assigned a value) and false otherwise */
  public boolean isSetPidType() {
    return this.pidType != null;
  }

  public void setPidTypeIsSet(boolean value) {
    if (!value) {
      this.pidType = null;
    }
  }

  public String getPidLocation() {
    return this.pidLocation;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setPidLocation(String pidLocation) {
    this.pidLocation = pidLocation;
    return this;
  }

  public void unsetPidLocation() {
    this.pidLocation = null;
  }

  /** Returns true if field pidLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetPidLocation() {
    return this.pidLocation != null;
  }

  public void setPidLocationIsSet(boolean value) {
    if (!value) {
      this.pidLocation = null;
    }
  }

  public String getReferencePV() {
    return this.referencePV;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setReferencePV(String referencePV) {
    this.referencePV = referencePV;
    return this;
  }

  public void unsetReferencePV() {
    this.referencePV = null;
  }

  /** Returns true if field referencePV is set (has been assigned a value) and false otherwise */
  public boolean isSetReferencePV() {
    return this.referencePV != null;
  }

  public void setReferencePVIsSet(boolean value) {
    if (!value) {
      this.referencePV = null;
    }
  }

  public String getLinkRelation() {
    return this.linkRelation;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setLinkRelation(String linkRelation) {
    this.linkRelation = linkRelation;
    return this;
  }

  public void unsetLinkRelation() {
    this.linkRelation = null;
  }

  /** Returns true if field linkRelation is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkRelation() {
    return this.linkRelation != null;
  }

  public void setLinkRelationIsSet(boolean value) {
    if (!value) {
      this.linkRelation = null;
    }
  }

  public String getMediaType() {
    return this.mediaType;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setMediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  public void unsetMediaType() {
    this.mediaType = null;
  }

  /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaType() {
    return this.mediaType != null;
  }

  public void setMediaTypeIsSet(boolean value) {
    if (!value) {
      this.mediaType = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_Dsp_Tanx_Ad_Space setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((String)value);
      }
      break;

    case SITE_NAME:
      if (value == null) {
        unsetSiteName();
      } else {
        setSiteName((String)value);
      }
      break;

    case PID_NAME:
      if (value == null) {
        unsetPidName();
      } else {
        setPidName((String)value);
      }
      break;

    case PID_SIZE:
      if (value == null) {
        unsetPidSize();
      } else {
        setPidSize((String)value);
      }
      break;

    case DOMAIN:
      if (value == null) {
        unsetDomain();
      } else {
        setDomain((String)value);
      }
      break;

    case SITE_CATEGORY:
      if (value == null) {
        unsetSiteCategory();
      } else {
        setSiteCategory((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case PID_TYPE:
      if (value == null) {
        unsetPidType();
      } else {
        setPidType((String)value);
      }
      break;

    case PID_LOCATION:
      if (value == null) {
        unsetPidLocation();
      } else {
        setPidLocation((String)value);
      }
      break;

    case REFERENCE_PV:
      if (value == null) {
        unsetReferencePV();
      } else {
        setReferencePV((String)value);
      }
      break;

    case LINK_RELATION:
      if (value == null) {
        unsetLinkRelation();
      } else {
        setLinkRelation((String)value);
      }
      break;

    case MEDIA_TYPE:
      if (value == null) {
        unsetMediaType();
      } else {
        setMediaType((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return getPid();

    case SITE_NAME:
      return getSiteName();

    case PID_NAME:
      return getPidName();

    case PID_SIZE:
      return getPidSize();

    case DOMAIN:
      return getDomain();

    case SITE_CATEGORY:
      return getSiteCategory();

    case URL:
      return getUrl();

    case PID_TYPE:
      return getPidType();

    case PID_LOCATION:
      return getPidLocation();

    case REFERENCE_PV:
      return getReferencePV();

    case LINK_RELATION:
      return getLinkRelation();

    case MEDIA_TYPE:
      return getMediaType();

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case SITE_NAME:
      return isSetSiteName();
    case PID_NAME:
      return isSetPidName();
    case PID_SIZE:
      return isSetPidSize();
    case DOMAIN:
      return isSetDomain();
    case SITE_CATEGORY:
      return isSetSiteCategory();
    case URL:
      return isSetUrl();
    case PID_TYPE:
      return isSetPidType();
    case PID_LOCATION:
      return isSetPidLocation();
    case REFERENCE_PV:
      return isSetReferencePV();
    case LINK_RELATION:
      return isSetLinkRelation();
    case MEDIA_TYPE:
      return isSetMediaType();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_Dsp_Tanx_Ad_Space)
      return this.equals((TDbSync_Dsp_Tanx_Ad_Space)that);
    return false;
  }

  public boolean equals(TDbSync_Dsp_Tanx_Ad_Space that) {
    if (that == null)
      return false;

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (!this.pid.equals(that.pid))
        return false;
    }

    boolean this_present_siteName = true && this.isSetSiteName();
    boolean that_present_siteName = true && that.isSetSiteName();
    if (this_present_siteName || that_present_siteName) {
      if (!(this_present_siteName && that_present_siteName))
        return false;
      if (!this.siteName.equals(that.siteName))
        return false;
    }

    boolean this_present_pidName = true && this.isSetPidName();
    boolean that_present_pidName = true && that.isSetPidName();
    if (this_present_pidName || that_present_pidName) {
      if (!(this_present_pidName && that_present_pidName))
        return false;
      if (!this.pidName.equals(that.pidName))
        return false;
    }

    boolean this_present_pidSize = true && this.isSetPidSize();
    boolean that_present_pidSize = true && that.isSetPidSize();
    if (this_present_pidSize || that_present_pidSize) {
      if (!(this_present_pidSize && that_present_pidSize))
        return false;
      if (!this.pidSize.equals(that.pidSize))
        return false;
    }

    boolean this_present_domain = true && this.isSetDomain();
    boolean that_present_domain = true && that.isSetDomain();
    if (this_present_domain || that_present_domain) {
      if (!(this_present_domain && that_present_domain))
        return false;
      if (!this.domain.equals(that.domain))
        return false;
    }

    boolean this_present_siteCategory = true && this.isSetSiteCategory();
    boolean that_present_siteCategory = true && that.isSetSiteCategory();
    if (this_present_siteCategory || that_present_siteCategory) {
      if (!(this_present_siteCategory && that_present_siteCategory))
        return false;
      if (!this.siteCategory.equals(that.siteCategory))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_pidType = true && this.isSetPidType();
    boolean that_present_pidType = true && that.isSetPidType();
    if (this_present_pidType || that_present_pidType) {
      if (!(this_present_pidType && that_present_pidType))
        return false;
      if (!this.pidType.equals(that.pidType))
        return false;
    }

    boolean this_present_pidLocation = true && this.isSetPidLocation();
    boolean that_present_pidLocation = true && that.isSetPidLocation();
    if (this_present_pidLocation || that_present_pidLocation) {
      if (!(this_present_pidLocation && that_present_pidLocation))
        return false;
      if (!this.pidLocation.equals(that.pidLocation))
        return false;
    }

    boolean this_present_referencePV = true && this.isSetReferencePV();
    boolean that_present_referencePV = true && that.isSetReferencePV();
    if (this_present_referencePV || that_present_referencePV) {
      if (!(this_present_referencePV && that_present_referencePV))
        return false;
      if (!this.referencePV.equals(that.referencePV))
        return false;
    }

    boolean this_present_linkRelation = true && this.isSetLinkRelation();
    boolean that_present_linkRelation = true && that.isSetLinkRelation();
    if (this_present_linkRelation || that_present_linkRelation) {
      if (!(this_present_linkRelation && that_present_linkRelation))
        return false;
      if (!this.linkRelation.equals(that.linkRelation))
        return false;
    }

    boolean this_present_mediaType = true && this.isSetMediaType();
    boolean that_present_mediaType = true && that.isSetMediaType();
    if (this_present_mediaType || that_present_mediaType) {
      if (!(this_present_mediaType && that_present_mediaType))
        return false;
      if (!this.mediaType.equals(that.mediaType))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_Dsp_Tanx_Ad_Space other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteName()).compareTo(other.isSetSiteName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteName, other.siteName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPidName()).compareTo(other.isSetPidName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPidName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidName, other.pidName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPidSize()).compareTo(other.isSetPidSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPidSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidSize, other.pidSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomain()).compareTo(other.isSetDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain, other.domain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteCategory()).compareTo(other.isSetSiteCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteCategory, other.siteCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPidType()).compareTo(other.isSetPidType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPidType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidType, other.pidType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPidLocation()).compareTo(other.isSetPidLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPidLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidLocation, other.pidLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReferencePV()).compareTo(other.isSetReferencePV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferencePV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referencePV, other.referencePV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkRelation()).compareTo(other.isSetLinkRelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkRelation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkRelation, other.linkRelation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(other.isSetMediaType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, other.mediaType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_Dsp_Tanx_Ad_Space(");
    boolean first = true;

    sb.append("pid:");
    if (this.pid == null) {
      sb.append("null");
    } else {
      sb.append(this.pid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteName:");
    if (this.siteName == null) {
      sb.append("null");
    } else {
      sb.append(this.siteName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pidName:");
    if (this.pidName == null) {
      sb.append("null");
    } else {
      sb.append(this.pidName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pidSize:");
    if (this.pidSize == null) {
      sb.append("null");
    } else {
      sb.append(this.pidSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("domain:");
    if (this.domain == null) {
      sb.append("null");
    } else {
      sb.append(this.domain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteCategory:");
    if (this.siteCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.siteCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pidType:");
    if (this.pidType == null) {
      sb.append("null");
    } else {
      sb.append(this.pidType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pidLocation:");
    if (this.pidLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.pidLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("referencePV:");
    if (this.referencePV == null) {
      sb.append("null");
    } else {
      sb.append(this.referencePV);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("linkRelation:");
    if (this.linkRelation == null) {
      sb.append("null");
    } else {
      sb.append(this.linkRelation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaType:");
    if (this.mediaType == null) {
      sb.append("null");
    } else {
      sb.append(this.mediaType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (pid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pid' was not present! Struct: " + toString());
    }
    if (siteName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'siteName' was not present! Struct: " + toString());
    }
    if (pidName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pidName' was not present! Struct: " + toString());
    }
    if (pidSize == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pidSize' was not present! Struct: " + toString());
    }
    if (domain == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'domain' was not present! Struct: " + toString());
    }
    if (siteCategory == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'siteCategory' was not present! Struct: " + toString());
    }
    if (url == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    if (pidType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pidType' was not present! Struct: " + toString());
    }
    if (pidLocation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pidLocation' was not present! Struct: " + toString());
    }
    if (referencePV == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'referencePV' was not present! Struct: " + toString());
    }
    if (linkRelation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkRelation' was not present! Struct: " + toString());
    }
    if (mediaType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_Dsp_Tanx_Ad_SpaceStandardSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Tanx_Ad_SpaceStandardScheme getScheme() {
      return new TDbSync_Dsp_Tanx_Ad_SpaceStandardScheme();
    }
  }

  private static class TDbSync_Dsp_Tanx_Ad_SpaceStandardScheme extends StandardScheme<TDbSync_Dsp_Tanx_Ad_Space> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_Dsp_Tanx_Ad_Space struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pid = iprot.readString();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SITE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.siteName = iprot.readString();
              struct.setSiteNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PID_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pidName = iprot.readString();
              struct.setPidNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PID_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pidSize = iprot.readString();
              struct.setPidSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domain = iprot.readString();
              struct.setDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SITE_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.siteCategory = iprot.readString();
              struct.setSiteCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PID_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pidType = iprot.readString();
              struct.setPidTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PID_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pidLocation = iprot.readString();
              struct.setPidLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REFERENCE_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.referencePV = iprot.readString();
              struct.setReferencePVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LINK_RELATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkRelation = iprot.readString();
              struct.setLinkRelationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MEDIA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaType = iprot.readString();
              struct.setMediaTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_Dsp_Tanx_Ad_Space struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pid != null) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeString(struct.pid);
        oprot.writeFieldEnd();
      }
      if (struct.siteName != null) {
        oprot.writeFieldBegin(SITE_NAME_FIELD_DESC);
        oprot.writeString(struct.siteName);
        oprot.writeFieldEnd();
      }
      if (struct.pidName != null) {
        oprot.writeFieldBegin(PID_NAME_FIELD_DESC);
        oprot.writeString(struct.pidName);
        oprot.writeFieldEnd();
      }
      if (struct.pidSize != null) {
        oprot.writeFieldBegin(PID_SIZE_FIELD_DESC);
        oprot.writeString(struct.pidSize);
        oprot.writeFieldEnd();
      }
      if (struct.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(struct.domain);
        oprot.writeFieldEnd();
      }
      if (struct.siteCategory != null) {
        oprot.writeFieldBegin(SITE_CATEGORY_FIELD_DESC);
        oprot.writeString(struct.siteCategory);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.pidType != null) {
        oprot.writeFieldBegin(PID_TYPE_FIELD_DESC);
        oprot.writeString(struct.pidType);
        oprot.writeFieldEnd();
      }
      if (struct.pidLocation != null) {
        oprot.writeFieldBegin(PID_LOCATION_FIELD_DESC);
        oprot.writeString(struct.pidLocation);
        oprot.writeFieldEnd();
      }
      if (struct.referencePV != null) {
        oprot.writeFieldBegin(REFERENCE_PV_FIELD_DESC);
        oprot.writeString(struct.referencePV);
        oprot.writeFieldEnd();
      }
      if (struct.linkRelation != null) {
        oprot.writeFieldBegin(LINK_RELATION_FIELD_DESC);
        oprot.writeString(struct.linkRelation);
        oprot.writeFieldEnd();
      }
      if (struct.mediaType != null) {
        oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
        oprot.writeString(struct.mediaType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_Dsp_Tanx_Ad_SpaceTupleSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Tanx_Ad_SpaceTupleScheme getScheme() {
      return new TDbSync_Dsp_Tanx_Ad_SpaceTupleScheme();
    }
  }

  private static class TDbSync_Dsp_Tanx_Ad_SpaceTupleScheme extends TupleScheme<TDbSync_Dsp_Tanx_Ad_Space> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Tanx_Ad_Space struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.pid);
      oprot.writeString(struct.siteName);
      oprot.writeString(struct.pidName);
      oprot.writeString(struct.pidSize);
      oprot.writeString(struct.domain);
      oprot.writeString(struct.siteCategory);
      oprot.writeString(struct.url);
      oprot.writeString(struct.pidType);
      oprot.writeString(struct.pidLocation);
      oprot.writeString(struct.referencePV);
      oprot.writeString(struct.linkRelation);
      oprot.writeString(struct.mediaType);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Tanx_Ad_Space struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.pid = iprot.readString();
      struct.setPidIsSet(true);
      struct.siteName = iprot.readString();
      struct.setSiteNameIsSet(true);
      struct.pidName = iprot.readString();
      struct.setPidNameIsSet(true);
      struct.pidSize = iprot.readString();
      struct.setPidSizeIsSet(true);
      struct.domain = iprot.readString();
      struct.setDomainIsSet(true);
      struct.siteCategory = iprot.readString();
      struct.setSiteCategoryIsSet(true);
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      struct.pidType = iprot.readString();
      struct.setPidTypeIsSet(true);
      struct.pidLocation = iprot.readString();
      struct.setPidLocationIsSet(true);
      struct.referencePV = iprot.readString();
      struct.setReferencePVIsSet(true);
      struct.linkRelation = iprot.readString();
      struct.setLinkRelationIsSet(true);
      struct.mediaType = iprot.readString();
      struct.setMediaTypeIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
    }
  }

}

