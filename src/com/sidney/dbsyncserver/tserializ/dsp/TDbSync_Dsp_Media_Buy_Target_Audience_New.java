/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.dsp;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_Dsp_Media_Buy_Target_Audience_New implements org.apache.thrift.TBase<TDbSync_Dsp_Media_Buy_Target_Audience_New, TDbSync_Dsp_Media_Buy_Target_Audience_New._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_Dsp_Media_Buy_Target_Audience_New> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_Dsp_Media_Buy_Target_Audience_New");

  private static final org.apache.thrift.protocol.TField I_D_FIELD_DESC = new org.apache.thrift.protocol.TField("iD", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUDIENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("audiences", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MEDIA_BUY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaBuyID", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TARGET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("targetType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField AUDIENCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("audienceType", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_Dsp_Media_Buy_Target_Audience_NewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_Dsp_Media_Buy_Target_Audience_NewTupleSchemeFactory());
  }

  public int iD; // required
  public int status; // required
  public String lastChanged; // required
  public String audiences; // required
  public int mediaBuyID; // required
  public int targetType; // required
  public int audienceType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_D((short)1, "iD"),
    STATUS((short)2, "status"),
    LAST_CHANGED((short)3, "lastChanged"),
    AUDIENCES((short)4, "audiences"),
    MEDIA_BUY_ID((short)5, "mediaBuyID"),
    TARGET_TYPE((short)6, "targetType"),
    AUDIENCE_TYPE((short)7, "audienceType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_D
          return I_D;
        case 2: // STATUS
          return STATUS;
        case 3: // LAST_CHANGED
          return LAST_CHANGED;
        case 4: // AUDIENCES
          return AUDIENCES;
        case 5: // MEDIA_BUY_ID
          return MEDIA_BUY_ID;
        case 6: // TARGET_TYPE
          return TARGET_TYPE;
        case 7: // AUDIENCE_TYPE
          return AUDIENCE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __MEDIABUYID_ISSET_ID = 2;
  private static final int __TARGETTYPE_ISSET_ID = 3;
  private static final int __AUDIENCETYPE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_D, new org.apache.thrift.meta_data.FieldMetaData("iD", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIENCES, new org.apache.thrift.meta_data.FieldMetaData("audiences", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_BUY_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaBuyID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("targetType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUDIENCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("audienceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_Dsp_Media_Buy_Target_Audience_New.class, metaDataMap);
  }

  public TDbSync_Dsp_Media_Buy_Target_Audience_New() {
  }

  public TDbSync_Dsp_Media_Buy_Target_Audience_New(
    int iD,
    int status,
    String lastChanged,
    String audiences,
    int mediaBuyID,
    int targetType,
    int audienceType)
  {
    this();
    this.iD = iD;
    setIDIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.audiences = audiences;
    this.mediaBuyID = mediaBuyID;
    setMediaBuyIDIsSet(true);
    this.targetType = targetType;
    setTargetTypeIsSet(true);
    this.audienceType = audienceType;
    setAudienceTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_Dsp_Media_Buy_Target_Audience_New(TDbSync_Dsp_Media_Buy_Target_Audience_New other) {
    __isset_bitfield = other.__isset_bitfield;
    this.iD = other.iD;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    if (other.isSetAudiences()) {
      this.audiences = other.audiences;
    }
    this.mediaBuyID = other.mediaBuyID;
    this.targetType = other.targetType;
    this.audienceType = other.audienceType;
  }

  public TDbSync_Dsp_Media_Buy_Target_Audience_New deepCopy() {
    return new TDbSync_Dsp_Media_Buy_Target_Audience_New(this);
  }

  @Override
  public void clear() {
    setIDIsSet(false);
    this.iD = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    this.audiences = null;
    setMediaBuyIDIsSet(false);
    this.mediaBuyID = 0;
    setTargetTypeIsSet(false);
    this.targetType = 0;
    setAudienceTypeIsSet(false);
    this.audienceType = 0;
  }

  public int getID() {
    return this.iD;
  }

  public TDbSync_Dsp_Media_Buy_Target_Audience_New setID(int iD) {
    this.iD = iD;
    setIDIsSet(true);
    return this;
  }

  public void unsetID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field iD is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_Dsp_Media_Buy_Target_Audience_New setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_Dsp_Media_Buy_Target_Audience_New setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public String getAudiences() {
    return this.audiences;
  }

  public TDbSync_Dsp_Media_Buy_Target_Audience_New setAudiences(String audiences) {
    this.audiences = audiences;
    return this;
  }

  public void unsetAudiences() {
    this.audiences = null;
  }

  /** Returns true if field audiences is set (has been assigned a value) and false otherwise */
  public boolean isSetAudiences() {
    return this.audiences != null;
  }

  public void setAudiencesIsSet(boolean value) {
    if (!value) {
      this.audiences = null;
    }
  }

  public int getMediaBuyID() {
    return this.mediaBuyID;
  }

  public TDbSync_Dsp_Media_Buy_Target_Audience_New setMediaBuyID(int mediaBuyID) {
    this.mediaBuyID = mediaBuyID;
    setMediaBuyIDIsSet(true);
    return this;
  }

  public void unsetMediaBuyID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIABUYID_ISSET_ID);
  }

  /** Returns true if field mediaBuyID is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaBuyID() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIABUYID_ISSET_ID);
  }

  public void setMediaBuyIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIABUYID_ISSET_ID, value);
  }

  public int getTargetType() {
    return this.targetType;
  }

  public TDbSync_Dsp_Media_Buy_Target_Audience_New setTargetType(int targetType) {
    this.targetType = targetType;
    setTargetTypeIsSet(true);
    return this;
  }

  public void unsetTargetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGETTYPE_ISSET_ID);
  }

  /** Returns true if field targetType is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGETTYPE_ISSET_ID);
  }

  public void setTargetTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGETTYPE_ISSET_ID, value);
  }

  public int getAudienceType() {
    return this.audienceType;
  }

  public TDbSync_Dsp_Media_Buy_Target_Audience_New setAudienceType(int audienceType) {
    this.audienceType = audienceType;
    setAudienceTypeIsSet(true);
    return this;
  }

  public void unsetAudienceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDIENCETYPE_ISSET_ID);
  }

  /** Returns true if field audienceType is set (has been assigned a value) and false otherwise */
  public boolean isSetAudienceType() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDIENCETYPE_ISSET_ID);
  }

  public void setAudienceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDIENCETYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_D:
      if (value == null) {
        unsetID();
      } else {
        setID((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case AUDIENCES:
      if (value == null) {
        unsetAudiences();
      } else {
        setAudiences((String)value);
      }
      break;

    case MEDIA_BUY_ID:
      if (value == null) {
        unsetMediaBuyID();
      } else {
        setMediaBuyID((Integer)value);
      }
      break;

    case TARGET_TYPE:
      if (value == null) {
        unsetTargetType();
      } else {
        setTargetType((Integer)value);
      }
      break;

    case AUDIENCE_TYPE:
      if (value == null) {
        unsetAudienceType();
      } else {
        setAudienceType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_D:
      return Integer.valueOf(getID());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case AUDIENCES:
      return getAudiences();

    case MEDIA_BUY_ID:
      return Integer.valueOf(getMediaBuyID());

    case TARGET_TYPE:
      return Integer.valueOf(getTargetType());

    case AUDIENCE_TYPE:
      return Integer.valueOf(getAudienceType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_D:
      return isSetID();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case AUDIENCES:
      return isSetAudiences();
    case MEDIA_BUY_ID:
      return isSetMediaBuyID();
    case TARGET_TYPE:
      return isSetTargetType();
    case AUDIENCE_TYPE:
      return isSetAudienceType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_Dsp_Media_Buy_Target_Audience_New)
      return this.equals((TDbSync_Dsp_Media_Buy_Target_Audience_New)that);
    return false;
  }

  public boolean equals(TDbSync_Dsp_Media_Buy_Target_Audience_New that) {
    if (that == null)
      return false;

    boolean this_present_iD = true;
    boolean that_present_iD = true;
    if (this_present_iD || that_present_iD) {
      if (!(this_present_iD && that_present_iD))
        return false;
      if (this.iD != that.iD)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_audiences = true && this.isSetAudiences();
    boolean that_present_audiences = true && that.isSetAudiences();
    if (this_present_audiences || that_present_audiences) {
      if (!(this_present_audiences && that_present_audiences))
        return false;
      if (!this.audiences.equals(that.audiences))
        return false;
    }

    boolean this_present_mediaBuyID = true;
    boolean that_present_mediaBuyID = true;
    if (this_present_mediaBuyID || that_present_mediaBuyID) {
      if (!(this_present_mediaBuyID && that_present_mediaBuyID))
        return false;
      if (this.mediaBuyID != that.mediaBuyID)
        return false;
    }

    boolean this_present_targetType = true;
    boolean that_present_targetType = true;
    if (this_present_targetType || that_present_targetType) {
      if (!(this_present_targetType && that_present_targetType))
        return false;
      if (this.targetType != that.targetType)
        return false;
    }

    boolean this_present_audienceType = true;
    boolean that_present_audienceType = true;
    if (this_present_audienceType || that_present_audienceType) {
      if (!(this_present_audienceType && that_present_audienceType))
        return false;
      if (this.audienceType != that.audienceType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_Dsp_Media_Buy_Target_Audience_New other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iD, other.iD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudiences()).compareTo(other.isSetAudiences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudiences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audiences, other.audiences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaBuyID()).compareTo(other.isSetMediaBuyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaBuyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaBuyID, other.mediaBuyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetType()).compareTo(other.isSetTargetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetType, other.targetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudienceType()).compareTo(other.isSetAudienceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudienceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audienceType, other.audienceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_Dsp_Media_Buy_Target_Audience_New(");
    boolean first = true;

    sb.append("iD:");
    sb.append(this.iD);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("audiences:");
    if (this.audiences == null) {
      sb.append("null");
    } else {
      sb.append(this.audiences);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaBuyID:");
    sb.append(this.mediaBuyID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetType:");
    sb.append(this.targetType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("audienceType:");
    sb.append(this.audienceType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'iD' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    if (audiences == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'audiences' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'mediaBuyID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'targetType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'audienceType' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_Dsp_Media_Buy_Target_Audience_NewStandardSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Media_Buy_Target_Audience_NewStandardScheme getScheme() {
      return new TDbSync_Dsp_Media_Buy_Target_Audience_NewStandardScheme();
    }
  }

  private static class TDbSync_Dsp_Media_Buy_Target_Audience_NewStandardScheme extends StandardScheme<TDbSync_Dsp_Media_Buy_Target_Audience_New> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_Dsp_Media_Buy_Target_Audience_New struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // I_D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iD = iprot.readI32();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUDIENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.audiences = iprot.readString();
              struct.setAudiencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEDIA_BUY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaBuyID = iprot.readI32();
              struct.setMediaBuyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TARGET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetType = iprot.readI32();
              struct.setTargetTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AUDIENCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.audienceType = iprot.readI32();
              struct.setAudienceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'iD' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMediaBuyID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaBuyID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTargetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'targetType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAudienceType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'audienceType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_Dsp_Media_Buy_Target_Audience_New struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(I_D_FIELD_DESC);
      oprot.writeI32(struct.iD);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      if (struct.audiences != null) {
        oprot.writeFieldBegin(AUDIENCES_FIELD_DESC);
        oprot.writeString(struct.audiences);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEDIA_BUY_ID_FIELD_DESC);
      oprot.writeI32(struct.mediaBuyID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_TYPE_FIELD_DESC);
      oprot.writeI32(struct.targetType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUDIENCE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.audienceType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_Dsp_Media_Buy_Target_Audience_NewTupleSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Media_Buy_Target_Audience_NewTupleScheme getScheme() {
      return new TDbSync_Dsp_Media_Buy_Target_Audience_NewTupleScheme();
    }
  }

  private static class TDbSync_Dsp_Media_Buy_Target_Audience_NewTupleScheme extends TupleScheme<TDbSync_Dsp_Media_Buy_Target_Audience_New> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Media_Buy_Target_Audience_New struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.iD);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeString(struct.audiences);
      oprot.writeI32(struct.mediaBuyID);
      oprot.writeI32(struct.targetType);
      oprot.writeI32(struct.audienceType);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Media_Buy_Target_Audience_New struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.iD = iprot.readI32();
      struct.setIDIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.audiences = iprot.readString();
      struct.setAudiencesIsSet(true);
      struct.mediaBuyID = iprot.readI32();
      struct.setMediaBuyIDIsSet(true);
      struct.targetType = iprot.readI32();
      struct.setTargetTypeIsSet(true);
      struct.audienceType = iprot.readI32();
      struct.setAudienceTypeIsSet(true);
    }
  }

}

