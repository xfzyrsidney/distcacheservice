/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.dsp;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_Dsp_Strategy_Day_Parting implements org.apache.thrift.TBase<TDbSync_Dsp_Strategy_Day_Parting, TDbSync_Dsp_Strategy_Day_Parting._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_Dsp_Strategy_Day_Parting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_Dsp_Strategy_Day_Parting");

  private static final org.apache.thrift.protocol.TField STRATEGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strategyID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MONDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("monday", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TUESDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tuesday", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField WEDNESDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("wednesday", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField THURSDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("thursday", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FRIDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("friday", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SATURDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("saturday", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SUNDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("sunday", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_Dsp_Strategy_Day_PartingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_Dsp_Strategy_Day_PartingTupleSchemeFactory());
  }

  public int strategyID; // required
  public int status; // required
  public String lastChanged; // required
  public int monday; // required
  public int tuesday; // required
  public int wednesday; // required
  public int thursday; // required
  public int friday; // required
  public int saturday; // required
  public int sunday; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRATEGY_ID((short)1, "strategyID"),
    STATUS((short)2, "status"),
    LAST_CHANGED((short)3, "lastChanged"),
    MONDAY((short)4, "monday"),
    TUESDAY((short)5, "tuesday"),
    WEDNESDAY((short)6, "wednesday"),
    THURSDAY((short)7, "thursday"),
    FRIDAY((short)8, "friday"),
    SATURDAY((short)9, "saturday"),
    SUNDAY((short)10, "sunday");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRATEGY_ID
          return STRATEGY_ID;
        case 2: // STATUS
          return STATUS;
        case 3: // LAST_CHANGED
          return LAST_CHANGED;
        case 4: // MONDAY
          return MONDAY;
        case 5: // TUESDAY
          return TUESDAY;
        case 6: // WEDNESDAY
          return WEDNESDAY;
        case 7: // THURSDAY
          return THURSDAY;
        case 8: // FRIDAY
          return FRIDAY;
        case 9: // SATURDAY
          return SATURDAY;
        case 10: // SUNDAY
          return SUNDAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STRATEGYID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __MONDAY_ISSET_ID = 2;
  private static final int __TUESDAY_ISSET_ID = 3;
  private static final int __WEDNESDAY_ISSET_ID = 4;
  private static final int __THURSDAY_ISSET_ID = 5;
  private static final int __FRIDAY_ISSET_ID = 6;
  private static final int __SATURDAY_ISSET_ID = 7;
  private static final int __SUNDAY_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRATEGY_ID, new org.apache.thrift.meta_data.FieldMetaData("strategyID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONDAY, new org.apache.thrift.meta_data.FieldMetaData("monday", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TUESDAY, new org.apache.thrift.meta_data.FieldMetaData("tuesday", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEDNESDAY, new org.apache.thrift.meta_data.FieldMetaData("wednesday", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THURSDAY, new org.apache.thrift.meta_data.FieldMetaData("thursday", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRIDAY, new org.apache.thrift.meta_data.FieldMetaData("friday", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SATURDAY, new org.apache.thrift.meta_data.FieldMetaData("saturday", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUNDAY, new org.apache.thrift.meta_data.FieldMetaData("sunday", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_Dsp_Strategy_Day_Parting.class, metaDataMap);
  }

  public TDbSync_Dsp_Strategy_Day_Parting() {
  }

  public TDbSync_Dsp_Strategy_Day_Parting(
    int strategyID,
    int status,
    String lastChanged,
    int monday,
    int tuesday,
    int wednesday,
    int thursday,
    int friday,
    int saturday,
    int sunday)
  {
    this();
    this.strategyID = strategyID;
    setStrategyIDIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.monday = monday;
    setMondayIsSet(true);
    this.tuesday = tuesday;
    setTuesdayIsSet(true);
    this.wednesday = wednesday;
    setWednesdayIsSet(true);
    this.thursday = thursday;
    setThursdayIsSet(true);
    this.friday = friday;
    setFridayIsSet(true);
    this.saturday = saturday;
    setSaturdayIsSet(true);
    this.sunday = sunday;
    setSundayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_Dsp_Strategy_Day_Parting(TDbSync_Dsp_Strategy_Day_Parting other) {
    __isset_bitfield = other.__isset_bitfield;
    this.strategyID = other.strategyID;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    this.monday = other.monday;
    this.tuesday = other.tuesday;
    this.wednesday = other.wednesday;
    this.thursday = other.thursday;
    this.friday = other.friday;
    this.saturday = other.saturday;
    this.sunday = other.sunday;
  }

  public TDbSync_Dsp_Strategy_Day_Parting deepCopy() {
    return new TDbSync_Dsp_Strategy_Day_Parting(this);
  }

  @Override
  public void clear() {
    setStrategyIDIsSet(false);
    this.strategyID = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    setMondayIsSet(false);
    this.monday = 0;
    setTuesdayIsSet(false);
    this.tuesday = 0;
    setWednesdayIsSet(false);
    this.wednesday = 0;
    setThursdayIsSet(false);
    this.thursday = 0;
    setFridayIsSet(false);
    this.friday = 0;
    setSaturdayIsSet(false);
    this.saturday = 0;
    setSundayIsSet(false);
    this.sunday = 0;
  }

  public int getStrategyID() {
    return this.strategyID;
  }

  public TDbSync_Dsp_Strategy_Day_Parting setStrategyID(int strategyID) {
    this.strategyID = strategyID;
    setStrategyIDIsSet(true);
    return this;
  }

  public void unsetStrategyID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
  }

  /** Returns true if field strategyID is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategyID() {
    return EncodingUtils.testBit(__isset_bitfield, __STRATEGYID_ISSET_ID);
  }

  public void setStrategyIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRATEGYID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_Dsp_Strategy_Day_Parting setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_Dsp_Strategy_Day_Parting setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public int getMonday() {
    return this.monday;
  }

  public TDbSync_Dsp_Strategy_Day_Parting setMonday(int monday) {
    this.monday = monday;
    setMondayIsSet(true);
    return this;
  }

  public void unsetMonday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONDAY_ISSET_ID);
  }

  /** Returns true if field monday is set (has been assigned a value) and false otherwise */
  public boolean isSetMonday() {
    return EncodingUtils.testBit(__isset_bitfield, __MONDAY_ISSET_ID);
  }

  public void setMondayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONDAY_ISSET_ID, value);
  }

  public int getTuesday() {
    return this.tuesday;
  }

  public TDbSync_Dsp_Strategy_Day_Parting setTuesday(int tuesday) {
    this.tuesday = tuesday;
    setTuesdayIsSet(true);
    return this;
  }

  public void unsetTuesday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TUESDAY_ISSET_ID);
  }

  /** Returns true if field tuesday is set (has been assigned a value) and false otherwise */
  public boolean isSetTuesday() {
    return EncodingUtils.testBit(__isset_bitfield, __TUESDAY_ISSET_ID);
  }

  public void setTuesdayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TUESDAY_ISSET_ID, value);
  }

  public int getWednesday() {
    return this.wednesday;
  }

  public TDbSync_Dsp_Strategy_Day_Parting setWednesday(int wednesday) {
    this.wednesday = wednesday;
    setWednesdayIsSet(true);
    return this;
  }

  public void unsetWednesday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEDNESDAY_ISSET_ID);
  }

  /** Returns true if field wednesday is set (has been assigned a value) and false otherwise */
  public boolean isSetWednesday() {
    return EncodingUtils.testBit(__isset_bitfield, __WEDNESDAY_ISSET_ID);
  }

  public void setWednesdayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEDNESDAY_ISSET_ID, value);
  }

  public int getThursday() {
    return this.thursday;
  }

  public TDbSync_Dsp_Strategy_Day_Parting setThursday(int thursday) {
    this.thursday = thursday;
    setThursdayIsSet(true);
    return this;
  }

  public void unsetThursday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THURSDAY_ISSET_ID);
  }

  /** Returns true if field thursday is set (has been assigned a value) and false otherwise */
  public boolean isSetThursday() {
    return EncodingUtils.testBit(__isset_bitfield, __THURSDAY_ISSET_ID);
  }

  public void setThursdayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THURSDAY_ISSET_ID, value);
  }

  public int getFriday() {
    return this.friday;
  }

  public TDbSync_Dsp_Strategy_Day_Parting setFriday(int friday) {
    this.friday = friday;
    setFridayIsSet(true);
    return this;
  }

  public void unsetFriday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRIDAY_ISSET_ID);
  }

  /** Returns true if field friday is set (has been assigned a value) and false otherwise */
  public boolean isSetFriday() {
    return EncodingUtils.testBit(__isset_bitfield, __FRIDAY_ISSET_ID);
  }

  public void setFridayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRIDAY_ISSET_ID, value);
  }

  public int getSaturday() {
    return this.saturday;
  }

  public TDbSync_Dsp_Strategy_Day_Parting setSaturday(int saturday) {
    this.saturday = saturday;
    setSaturdayIsSet(true);
    return this;
  }

  public void unsetSaturday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SATURDAY_ISSET_ID);
  }

  /** Returns true if field saturday is set (has been assigned a value) and false otherwise */
  public boolean isSetSaturday() {
    return EncodingUtils.testBit(__isset_bitfield, __SATURDAY_ISSET_ID);
  }

  public void setSaturdayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SATURDAY_ISSET_ID, value);
  }

  public int getSunday() {
    return this.sunday;
  }

  public TDbSync_Dsp_Strategy_Day_Parting setSunday(int sunday) {
    this.sunday = sunday;
    setSundayIsSet(true);
    return this;
  }

  public void unsetSunday() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUNDAY_ISSET_ID);
  }

  /** Returns true if field sunday is set (has been assigned a value) and false otherwise */
  public boolean isSetSunday() {
    return EncodingUtils.testBit(__isset_bitfield, __SUNDAY_ISSET_ID);
  }

  public void setSundayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUNDAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STRATEGY_ID:
      if (value == null) {
        unsetStrategyID();
      } else {
        setStrategyID((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case MONDAY:
      if (value == null) {
        unsetMonday();
      } else {
        setMonday((Integer)value);
      }
      break;

    case TUESDAY:
      if (value == null) {
        unsetTuesday();
      } else {
        setTuesday((Integer)value);
      }
      break;

    case WEDNESDAY:
      if (value == null) {
        unsetWednesday();
      } else {
        setWednesday((Integer)value);
      }
      break;

    case THURSDAY:
      if (value == null) {
        unsetThursday();
      } else {
        setThursday((Integer)value);
      }
      break;

    case FRIDAY:
      if (value == null) {
        unsetFriday();
      } else {
        setFriday((Integer)value);
      }
      break;

    case SATURDAY:
      if (value == null) {
        unsetSaturday();
      } else {
        setSaturday((Integer)value);
      }
      break;

    case SUNDAY:
      if (value == null) {
        unsetSunday();
      } else {
        setSunday((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STRATEGY_ID:
      return Integer.valueOf(getStrategyID());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case MONDAY:
      return Integer.valueOf(getMonday());

    case TUESDAY:
      return Integer.valueOf(getTuesday());

    case WEDNESDAY:
      return Integer.valueOf(getWednesday());

    case THURSDAY:
      return Integer.valueOf(getThursday());

    case FRIDAY:
      return Integer.valueOf(getFriday());

    case SATURDAY:
      return Integer.valueOf(getSaturday());

    case SUNDAY:
      return Integer.valueOf(getSunday());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STRATEGY_ID:
      return isSetStrategyID();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case MONDAY:
      return isSetMonday();
    case TUESDAY:
      return isSetTuesday();
    case WEDNESDAY:
      return isSetWednesday();
    case THURSDAY:
      return isSetThursday();
    case FRIDAY:
      return isSetFriday();
    case SATURDAY:
      return isSetSaturday();
    case SUNDAY:
      return isSetSunday();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_Dsp_Strategy_Day_Parting)
      return this.equals((TDbSync_Dsp_Strategy_Day_Parting)that);
    return false;
  }

  public boolean equals(TDbSync_Dsp_Strategy_Day_Parting that) {
    if (that == null)
      return false;

    boolean this_present_strategyID = true;
    boolean that_present_strategyID = true;
    if (this_present_strategyID || that_present_strategyID) {
      if (!(this_present_strategyID && that_present_strategyID))
        return false;
      if (this.strategyID != that.strategyID)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_monday = true;
    boolean that_present_monday = true;
    if (this_present_monday || that_present_monday) {
      if (!(this_present_monday && that_present_monday))
        return false;
      if (this.monday != that.monday)
        return false;
    }

    boolean this_present_tuesday = true;
    boolean that_present_tuesday = true;
    if (this_present_tuesday || that_present_tuesday) {
      if (!(this_present_tuesday && that_present_tuesday))
        return false;
      if (this.tuesday != that.tuesday)
        return false;
    }

    boolean this_present_wednesday = true;
    boolean that_present_wednesday = true;
    if (this_present_wednesday || that_present_wednesday) {
      if (!(this_present_wednesday && that_present_wednesday))
        return false;
      if (this.wednesday != that.wednesday)
        return false;
    }

    boolean this_present_thursday = true;
    boolean that_present_thursday = true;
    if (this_present_thursday || that_present_thursday) {
      if (!(this_present_thursday && that_present_thursday))
        return false;
      if (this.thursday != that.thursday)
        return false;
    }

    boolean this_present_friday = true;
    boolean that_present_friday = true;
    if (this_present_friday || that_present_friday) {
      if (!(this_present_friday && that_present_friday))
        return false;
      if (this.friday != that.friday)
        return false;
    }

    boolean this_present_saturday = true;
    boolean that_present_saturday = true;
    if (this_present_saturday || that_present_saturday) {
      if (!(this_present_saturday && that_present_saturday))
        return false;
      if (this.saturday != that.saturday)
        return false;
    }

    boolean this_present_sunday = true;
    boolean that_present_sunday = true;
    if (this_present_sunday || that_present_sunday) {
      if (!(this_present_sunday && that_present_sunday))
        return false;
      if (this.sunday != that.sunday)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_Dsp_Strategy_Day_Parting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStrategyID()).compareTo(other.isSetStrategyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategyID, other.strategyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonday()).compareTo(other.isSetMonday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monday, other.monday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTuesday()).compareTo(other.isSetTuesday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuesday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuesday, other.tuesday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWednesday()).compareTo(other.isSetWednesday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWednesday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wednesday, other.wednesday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThursday()).compareTo(other.isSetThursday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThursday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thursday, other.thursday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFriday()).compareTo(other.isSetFriday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friday, other.friday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaturday()).compareTo(other.isSetSaturday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaturday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saturday, other.saturday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSunday()).compareTo(other.isSetSunday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSunday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sunday, other.sunday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_Dsp_Strategy_Day_Parting(");
    boolean first = true;

    sb.append("strategyID:");
    sb.append(this.strategyID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monday:");
    sb.append(this.monday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tuesday:");
    sb.append(this.tuesday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wednesday:");
    sb.append(this.wednesday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thursday:");
    sb.append(this.thursday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("friday:");
    sb.append(this.friday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("saturday:");
    sb.append(this.saturday);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sunday:");
    sb.append(this.sunday);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'strategyID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'monday' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'tuesday' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'wednesday' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'thursday' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'friday' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'saturday' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sunday' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_Dsp_Strategy_Day_PartingStandardSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Strategy_Day_PartingStandardScheme getScheme() {
      return new TDbSync_Dsp_Strategy_Day_PartingStandardScheme();
    }
  }

  private static class TDbSync_Dsp_Strategy_Day_PartingStandardScheme extends StandardScheme<TDbSync_Dsp_Strategy_Day_Parting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_Dsp_Strategy_Day_Parting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRATEGY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.strategyID = iprot.readI32();
              struct.setStrategyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MONDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.monday = iprot.readI32();
              struct.setMondayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TUESDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuesday = iprot.readI32();
              struct.setTuesdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WEDNESDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wednesday = iprot.readI32();
              struct.setWednesdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // THURSDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thursday = iprot.readI32();
              struct.setThursdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FRIDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.friday = iprot.readI32();
              struct.setFridayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SATURDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.saturday = iprot.readI32();
              struct.setSaturdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SUNDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sunday = iprot.readI32();
              struct.setSundayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStrategyID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'strategyID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMonday()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'monday' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTuesday()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuesday' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWednesday()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'wednesday' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetThursday()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'thursday' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFriday()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'friday' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSaturday()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'saturday' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSunday()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sunday' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_Dsp_Strategy_Day_Parting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STRATEGY_ID_FIELD_DESC);
      oprot.writeI32(struct.strategyID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONDAY_FIELD_DESC);
      oprot.writeI32(struct.monday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TUESDAY_FIELD_DESC);
      oprot.writeI32(struct.tuesday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEDNESDAY_FIELD_DESC);
      oprot.writeI32(struct.wednesday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THURSDAY_FIELD_DESC);
      oprot.writeI32(struct.thursday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRIDAY_FIELD_DESC);
      oprot.writeI32(struct.friday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SATURDAY_FIELD_DESC);
      oprot.writeI32(struct.saturday);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUNDAY_FIELD_DESC);
      oprot.writeI32(struct.sunday);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_Dsp_Strategy_Day_PartingTupleSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Strategy_Day_PartingTupleScheme getScheme() {
      return new TDbSync_Dsp_Strategy_Day_PartingTupleScheme();
    }
  }

  private static class TDbSync_Dsp_Strategy_Day_PartingTupleScheme extends TupleScheme<TDbSync_Dsp_Strategy_Day_Parting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Strategy_Day_Parting struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.strategyID);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeI32(struct.monday);
      oprot.writeI32(struct.tuesday);
      oprot.writeI32(struct.wednesday);
      oprot.writeI32(struct.thursday);
      oprot.writeI32(struct.friday);
      oprot.writeI32(struct.saturday);
      oprot.writeI32(struct.sunday);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Strategy_Day_Parting struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.strategyID = iprot.readI32();
      struct.setStrategyIDIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.monday = iprot.readI32();
      struct.setMondayIsSet(true);
      struct.tuesday = iprot.readI32();
      struct.setTuesdayIsSet(true);
      struct.wednesday = iprot.readI32();
      struct.setWednesdayIsSet(true);
      struct.thursday = iprot.readI32();
      struct.setThursdayIsSet(true);
      struct.friday = iprot.readI32();
      struct.setFridayIsSet(true);
      struct.saturday = iprot.readI32();
      struct.setSaturdayIsSet(true);
      struct.sunday = iprot.readI32();
      struct.setSundayIsSet(true);
    }
  }

}

