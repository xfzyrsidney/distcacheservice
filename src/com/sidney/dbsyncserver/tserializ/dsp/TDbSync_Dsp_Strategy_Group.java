/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.dsp;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_Dsp_Strategy_Group implements org.apache.thrift.TBase<TDbSync_Dsp_Strategy_Group, TDbSync_Dsp_Strategy_Group._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_Dsp_Strategy_Group> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_Dsp_Strategy_Group");

  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campaignID", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("budget", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHit", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DAILY_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyHit", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_DAILY_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDailyHit", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CLICK_BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("clickBudget", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_DAILY_CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDailyClick", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DAILY_HIT_CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyHitClick", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TOTAL_HIT_CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHitClick", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PV_BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("pvBudget", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField MAX_DAILY_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDailyPV", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DAILY_HIT_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyHitPV", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField TOTAL_HIT_PV_FIELD_DESC = new org.apache.thrift.protocol.TField("totalHitPV", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_Dsp_Strategy_GroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_Dsp_Strategy_GroupTupleSchemeFactory());
  }

  public int groupId; // required
  public int status; // required
  public String lastChanged; // required
  public String groupName; // required
  public int campaignID; // required
  public String budget; // required
  public String totalHit; // required
  public String dailyHit; // required
  public String maxDailyHit; // required
  public String clickBudget; // required
  public String maxDailyClick; // required
  public String dailyHitClick; // required
  public String totalHitClick; // required
  public String pvBudget; // required
  public String maxDailyPV; // required
  public String dailyHitPV; // required
  public String totalHitPV; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_ID((short)1, "groupId"),
    STATUS((short)2, "status"),
    LAST_CHANGED((short)3, "lastChanged"),
    GROUP_NAME((short)4, "groupName"),
    CAMPAIGN_ID((short)5, "campaignID"),
    BUDGET((short)6, "budget"),
    TOTAL_HIT((short)7, "totalHit"),
    DAILY_HIT((short)8, "dailyHit"),
    MAX_DAILY_HIT((short)9, "maxDailyHit"),
    CLICK_BUDGET((short)10, "clickBudget"),
    MAX_DAILY_CLICK((short)11, "maxDailyClick"),
    DAILY_HIT_CLICK((short)12, "dailyHitClick"),
    TOTAL_HIT_CLICK((short)13, "totalHitClick"),
    PV_BUDGET((short)14, "pvBudget"),
    MAX_DAILY_PV((short)15, "maxDailyPV"),
    DAILY_HIT_PV((short)16, "dailyHitPV"),
    TOTAL_HIT_PV((short)17, "totalHitPV");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_ID
          return GROUP_ID;
        case 2: // STATUS
          return STATUS;
        case 3: // LAST_CHANGED
          return LAST_CHANGED;
        case 4: // GROUP_NAME
          return GROUP_NAME;
        case 5: // CAMPAIGN_ID
          return CAMPAIGN_ID;
        case 6: // BUDGET
          return BUDGET;
        case 7: // TOTAL_HIT
          return TOTAL_HIT;
        case 8: // DAILY_HIT
          return DAILY_HIT;
        case 9: // MAX_DAILY_HIT
          return MAX_DAILY_HIT;
        case 10: // CLICK_BUDGET
          return CLICK_BUDGET;
        case 11: // MAX_DAILY_CLICK
          return MAX_DAILY_CLICK;
        case 12: // DAILY_HIT_CLICK
          return DAILY_HIT_CLICK;
        case 13: // TOTAL_HIT_CLICK
          return TOTAL_HIT_CLICK;
        case 14: // PV_BUDGET
          return PV_BUDGET;
        case 15: // MAX_DAILY_PV
          return MAX_DAILY_PV;
        case 16: // DAILY_HIT_PV
          return DAILY_HIT_PV;
        case 17: // TOTAL_HIT_PV
          return TOTAL_HIT_PV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GROUPID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __CAMPAIGNID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("campaignID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUDGET, new org.apache.thrift.meta_data.FieldMetaData("budget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_HIT, new org.apache.thrift.meta_data.FieldMetaData("totalHit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAILY_HIT, new org.apache.thrift.meta_data.FieldMetaData("dailyHit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_DAILY_HIT, new org.apache.thrift.meta_data.FieldMetaData("maxDailyHit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLICK_BUDGET, new org.apache.thrift.meta_data.FieldMetaData("clickBudget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_DAILY_CLICK, new org.apache.thrift.meta_data.FieldMetaData("maxDailyClick", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAILY_HIT_CLICK, new org.apache.thrift.meta_data.FieldMetaData("dailyHitClick", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_HIT_CLICK, new org.apache.thrift.meta_data.FieldMetaData("totalHitClick", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PV_BUDGET, new org.apache.thrift.meta_data.FieldMetaData("pvBudget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_DAILY_PV, new org.apache.thrift.meta_data.FieldMetaData("maxDailyPV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAILY_HIT_PV, new org.apache.thrift.meta_data.FieldMetaData("dailyHitPV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_HIT_PV, new org.apache.thrift.meta_data.FieldMetaData("totalHitPV", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_Dsp_Strategy_Group.class, metaDataMap);
  }

  public TDbSync_Dsp_Strategy_Group() {
  }

  public TDbSync_Dsp_Strategy_Group(
    int groupId,
    int status,
    String lastChanged,
    String groupName,
    int campaignID,
    String budget,
    String totalHit,
    String dailyHit,
    String maxDailyHit,
    String clickBudget,
    String maxDailyClick,
    String dailyHitClick,
    String totalHitClick,
    String pvBudget,
    String maxDailyPV,
    String dailyHitPV,
    String totalHitPV)
  {
    this();
    this.groupId = groupId;
    setGroupIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.groupName = groupName;
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    this.budget = budget;
    this.totalHit = totalHit;
    this.dailyHit = dailyHit;
    this.maxDailyHit = maxDailyHit;
    this.clickBudget = clickBudget;
    this.maxDailyClick = maxDailyClick;
    this.dailyHitClick = dailyHitClick;
    this.totalHitClick = totalHitClick;
    this.pvBudget = pvBudget;
    this.maxDailyPV = maxDailyPV;
    this.dailyHitPV = dailyHitPV;
    this.totalHitPV = totalHitPV;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_Dsp_Strategy_Group(TDbSync_Dsp_Strategy_Group other) {
    __isset_bitfield = other.__isset_bitfield;
    this.groupId = other.groupId;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    this.campaignID = other.campaignID;
    if (other.isSetBudget()) {
      this.budget = other.budget;
    }
    if (other.isSetTotalHit()) {
      this.totalHit = other.totalHit;
    }
    if (other.isSetDailyHit()) {
      this.dailyHit = other.dailyHit;
    }
    if (other.isSetMaxDailyHit()) {
      this.maxDailyHit = other.maxDailyHit;
    }
    if (other.isSetClickBudget()) {
      this.clickBudget = other.clickBudget;
    }
    if (other.isSetMaxDailyClick()) {
      this.maxDailyClick = other.maxDailyClick;
    }
    if (other.isSetDailyHitClick()) {
      this.dailyHitClick = other.dailyHitClick;
    }
    if (other.isSetTotalHitClick()) {
      this.totalHitClick = other.totalHitClick;
    }
    if (other.isSetPvBudget()) {
      this.pvBudget = other.pvBudget;
    }
    if (other.isSetMaxDailyPV()) {
      this.maxDailyPV = other.maxDailyPV;
    }
    if (other.isSetDailyHitPV()) {
      this.dailyHitPV = other.dailyHitPV;
    }
    if (other.isSetTotalHitPV()) {
      this.totalHitPV = other.totalHitPV;
    }
  }

  public TDbSync_Dsp_Strategy_Group deepCopy() {
    return new TDbSync_Dsp_Strategy_Group(this);
  }

  @Override
  public void clear() {
    setGroupIdIsSet(false);
    this.groupId = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    this.groupName = null;
    setCampaignIDIsSet(false);
    this.campaignID = 0;
    this.budget = null;
    this.totalHit = null;
    this.dailyHit = null;
    this.maxDailyHit = null;
    this.clickBudget = null;
    this.maxDailyClick = null;
    this.dailyHitClick = null;
    this.totalHitClick = null;
    this.pvBudget = null;
    this.maxDailyPV = null;
    this.dailyHitPV = null;
    this.totalHitPV = null;
  }

  public int getGroupId() {
    return this.groupId;
  }

  public TDbSync_Dsp_Strategy_Group setGroupId(int groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_Dsp_Strategy_Group setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_Dsp_Strategy_Group setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public String getGroupName() {
    return this.groupName;
  }

  public TDbSync_Dsp_Strategy_Group setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public int getCampaignID() {
    return this.campaignID;
  }

  public TDbSync_Dsp_Strategy_Group setCampaignID(int campaignID) {
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    return this;
  }

  public void unsetCampaignID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  /** Returns true if field campaignID is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaignID() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  public void setCampaignIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID, value);
  }

  public String getBudget() {
    return this.budget;
  }

  public TDbSync_Dsp_Strategy_Group setBudget(String budget) {
    this.budget = budget;
    return this;
  }

  public void unsetBudget() {
    this.budget = null;
  }

  /** Returns true if field budget is set (has been assigned a value) and false otherwise */
  public boolean isSetBudget() {
    return this.budget != null;
  }

  public void setBudgetIsSet(boolean value) {
    if (!value) {
      this.budget = null;
    }
  }

  public String getTotalHit() {
    return this.totalHit;
  }

  public TDbSync_Dsp_Strategy_Group setTotalHit(String totalHit) {
    this.totalHit = totalHit;
    return this;
  }

  public void unsetTotalHit() {
    this.totalHit = null;
  }

  /** Returns true if field totalHit is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHit() {
    return this.totalHit != null;
  }

  public void setTotalHitIsSet(boolean value) {
    if (!value) {
      this.totalHit = null;
    }
  }

  public String getDailyHit() {
    return this.dailyHit;
  }

  public TDbSync_Dsp_Strategy_Group setDailyHit(String dailyHit) {
    this.dailyHit = dailyHit;
    return this;
  }

  public void unsetDailyHit() {
    this.dailyHit = null;
  }

  /** Returns true if field dailyHit is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyHit() {
    return this.dailyHit != null;
  }

  public void setDailyHitIsSet(boolean value) {
    if (!value) {
      this.dailyHit = null;
    }
  }

  public String getMaxDailyHit() {
    return this.maxDailyHit;
  }

  public TDbSync_Dsp_Strategy_Group setMaxDailyHit(String maxDailyHit) {
    this.maxDailyHit = maxDailyHit;
    return this;
  }

  public void unsetMaxDailyHit() {
    this.maxDailyHit = null;
  }

  /** Returns true if field maxDailyHit is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDailyHit() {
    return this.maxDailyHit != null;
  }

  public void setMaxDailyHitIsSet(boolean value) {
    if (!value) {
      this.maxDailyHit = null;
    }
  }

  public String getClickBudget() {
    return this.clickBudget;
  }

  public TDbSync_Dsp_Strategy_Group setClickBudget(String clickBudget) {
    this.clickBudget = clickBudget;
    return this;
  }

  public void unsetClickBudget() {
    this.clickBudget = null;
  }

  /** Returns true if field clickBudget is set (has been assigned a value) and false otherwise */
  public boolean isSetClickBudget() {
    return this.clickBudget != null;
  }

  public void setClickBudgetIsSet(boolean value) {
    if (!value) {
      this.clickBudget = null;
    }
  }

  public String getMaxDailyClick() {
    return this.maxDailyClick;
  }

  public TDbSync_Dsp_Strategy_Group setMaxDailyClick(String maxDailyClick) {
    this.maxDailyClick = maxDailyClick;
    return this;
  }

  public void unsetMaxDailyClick() {
    this.maxDailyClick = null;
  }

  /** Returns true if field maxDailyClick is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDailyClick() {
    return this.maxDailyClick != null;
  }

  public void setMaxDailyClickIsSet(boolean value) {
    if (!value) {
      this.maxDailyClick = null;
    }
  }

  public String getDailyHitClick() {
    return this.dailyHitClick;
  }

  public TDbSync_Dsp_Strategy_Group setDailyHitClick(String dailyHitClick) {
    this.dailyHitClick = dailyHitClick;
    return this;
  }

  public void unsetDailyHitClick() {
    this.dailyHitClick = null;
  }

  /** Returns true if field dailyHitClick is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyHitClick() {
    return this.dailyHitClick != null;
  }

  public void setDailyHitClickIsSet(boolean value) {
    if (!value) {
      this.dailyHitClick = null;
    }
  }

  public String getTotalHitClick() {
    return this.totalHitClick;
  }

  public TDbSync_Dsp_Strategy_Group setTotalHitClick(String totalHitClick) {
    this.totalHitClick = totalHitClick;
    return this;
  }

  public void unsetTotalHitClick() {
    this.totalHitClick = null;
  }

  /** Returns true if field totalHitClick is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHitClick() {
    return this.totalHitClick != null;
  }

  public void setTotalHitClickIsSet(boolean value) {
    if (!value) {
      this.totalHitClick = null;
    }
  }

  public String getPvBudget() {
    return this.pvBudget;
  }

  public TDbSync_Dsp_Strategy_Group setPvBudget(String pvBudget) {
    this.pvBudget = pvBudget;
    return this;
  }

  public void unsetPvBudget() {
    this.pvBudget = null;
  }

  /** Returns true if field pvBudget is set (has been assigned a value) and false otherwise */
  public boolean isSetPvBudget() {
    return this.pvBudget != null;
  }

  public void setPvBudgetIsSet(boolean value) {
    if (!value) {
      this.pvBudget = null;
    }
  }

  public String getMaxDailyPV() {
    return this.maxDailyPV;
  }

  public TDbSync_Dsp_Strategy_Group setMaxDailyPV(String maxDailyPV) {
    this.maxDailyPV = maxDailyPV;
    return this;
  }

  public void unsetMaxDailyPV() {
    this.maxDailyPV = null;
  }

  /** Returns true if field maxDailyPV is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxDailyPV() {
    return this.maxDailyPV != null;
  }

  public void setMaxDailyPVIsSet(boolean value) {
    if (!value) {
      this.maxDailyPV = null;
    }
  }

  public String getDailyHitPV() {
    return this.dailyHitPV;
  }

  public TDbSync_Dsp_Strategy_Group setDailyHitPV(String dailyHitPV) {
    this.dailyHitPV = dailyHitPV;
    return this;
  }

  public void unsetDailyHitPV() {
    this.dailyHitPV = null;
  }

  /** Returns true if field dailyHitPV is set (has been assigned a value) and false otherwise */
  public boolean isSetDailyHitPV() {
    return this.dailyHitPV != null;
  }

  public void setDailyHitPVIsSet(boolean value) {
    if (!value) {
      this.dailyHitPV = null;
    }
  }

  public String getTotalHitPV() {
    return this.totalHitPV;
  }

  public TDbSync_Dsp_Strategy_Group setTotalHitPV(String totalHitPV) {
    this.totalHitPV = totalHitPV;
    return this;
  }

  public void unsetTotalHitPV() {
    this.totalHitPV = null;
  }

  /** Returns true if field totalHitPV is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalHitPV() {
    return this.totalHitPV != null;
  }

  public void setTotalHitPVIsSet(boolean value) {
    if (!value) {
      this.totalHitPV = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case CAMPAIGN_ID:
      if (value == null) {
        unsetCampaignID();
      } else {
        setCampaignID((Integer)value);
      }
      break;

    case BUDGET:
      if (value == null) {
        unsetBudget();
      } else {
        setBudget((String)value);
      }
      break;

    case TOTAL_HIT:
      if (value == null) {
        unsetTotalHit();
      } else {
        setTotalHit((String)value);
      }
      break;

    case DAILY_HIT:
      if (value == null) {
        unsetDailyHit();
      } else {
        setDailyHit((String)value);
      }
      break;

    case MAX_DAILY_HIT:
      if (value == null) {
        unsetMaxDailyHit();
      } else {
        setMaxDailyHit((String)value);
      }
      break;

    case CLICK_BUDGET:
      if (value == null) {
        unsetClickBudget();
      } else {
        setClickBudget((String)value);
      }
      break;

    case MAX_DAILY_CLICK:
      if (value == null) {
        unsetMaxDailyClick();
      } else {
        setMaxDailyClick((String)value);
      }
      break;

    case DAILY_HIT_CLICK:
      if (value == null) {
        unsetDailyHitClick();
      } else {
        setDailyHitClick((String)value);
      }
      break;

    case TOTAL_HIT_CLICK:
      if (value == null) {
        unsetTotalHitClick();
      } else {
        setTotalHitClick((String)value);
      }
      break;

    case PV_BUDGET:
      if (value == null) {
        unsetPvBudget();
      } else {
        setPvBudget((String)value);
      }
      break;

    case MAX_DAILY_PV:
      if (value == null) {
        unsetMaxDailyPV();
      } else {
        setMaxDailyPV((String)value);
      }
      break;

    case DAILY_HIT_PV:
      if (value == null) {
        unsetDailyHitPV();
      } else {
        setDailyHitPV((String)value);
      }
      break;

    case TOTAL_HIT_PV:
      if (value == null) {
        unsetTotalHitPV();
      } else {
        setTotalHitPV((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_ID:
      return Integer.valueOf(getGroupId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case GROUP_NAME:
      return getGroupName();

    case CAMPAIGN_ID:
      return Integer.valueOf(getCampaignID());

    case BUDGET:
      return getBudget();

    case TOTAL_HIT:
      return getTotalHit();

    case DAILY_HIT:
      return getDailyHit();

    case MAX_DAILY_HIT:
      return getMaxDailyHit();

    case CLICK_BUDGET:
      return getClickBudget();

    case MAX_DAILY_CLICK:
      return getMaxDailyClick();

    case DAILY_HIT_CLICK:
      return getDailyHitClick();

    case TOTAL_HIT_CLICK:
      return getTotalHitClick();

    case PV_BUDGET:
      return getPvBudget();

    case MAX_DAILY_PV:
      return getMaxDailyPV();

    case DAILY_HIT_PV:
      return getDailyHitPV();

    case TOTAL_HIT_PV:
      return getTotalHitPV();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_ID:
      return isSetGroupId();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case GROUP_NAME:
      return isSetGroupName();
    case CAMPAIGN_ID:
      return isSetCampaignID();
    case BUDGET:
      return isSetBudget();
    case TOTAL_HIT:
      return isSetTotalHit();
    case DAILY_HIT:
      return isSetDailyHit();
    case MAX_DAILY_HIT:
      return isSetMaxDailyHit();
    case CLICK_BUDGET:
      return isSetClickBudget();
    case MAX_DAILY_CLICK:
      return isSetMaxDailyClick();
    case DAILY_HIT_CLICK:
      return isSetDailyHitClick();
    case TOTAL_HIT_CLICK:
      return isSetTotalHitClick();
    case PV_BUDGET:
      return isSetPvBudget();
    case MAX_DAILY_PV:
      return isSetMaxDailyPV();
    case DAILY_HIT_PV:
      return isSetDailyHitPV();
    case TOTAL_HIT_PV:
      return isSetTotalHitPV();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_Dsp_Strategy_Group)
      return this.equals((TDbSync_Dsp_Strategy_Group)that);
    return false;
  }

  public boolean equals(TDbSync_Dsp_Strategy_Group that) {
    if (that == null)
      return false;

    boolean this_present_groupId = true;
    boolean that_present_groupId = true;
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_campaignID = true;
    boolean that_present_campaignID = true;
    if (this_present_campaignID || that_present_campaignID) {
      if (!(this_present_campaignID && that_present_campaignID))
        return false;
      if (this.campaignID != that.campaignID)
        return false;
    }

    boolean this_present_budget = true && this.isSetBudget();
    boolean that_present_budget = true && that.isSetBudget();
    if (this_present_budget || that_present_budget) {
      if (!(this_present_budget && that_present_budget))
        return false;
      if (!this.budget.equals(that.budget))
        return false;
    }

    boolean this_present_totalHit = true && this.isSetTotalHit();
    boolean that_present_totalHit = true && that.isSetTotalHit();
    if (this_present_totalHit || that_present_totalHit) {
      if (!(this_present_totalHit && that_present_totalHit))
        return false;
      if (!this.totalHit.equals(that.totalHit))
        return false;
    }

    boolean this_present_dailyHit = true && this.isSetDailyHit();
    boolean that_present_dailyHit = true && that.isSetDailyHit();
    if (this_present_dailyHit || that_present_dailyHit) {
      if (!(this_present_dailyHit && that_present_dailyHit))
        return false;
      if (!this.dailyHit.equals(that.dailyHit))
        return false;
    }

    boolean this_present_maxDailyHit = true && this.isSetMaxDailyHit();
    boolean that_present_maxDailyHit = true && that.isSetMaxDailyHit();
    if (this_present_maxDailyHit || that_present_maxDailyHit) {
      if (!(this_present_maxDailyHit && that_present_maxDailyHit))
        return false;
      if (!this.maxDailyHit.equals(that.maxDailyHit))
        return false;
    }

    boolean this_present_clickBudget = true && this.isSetClickBudget();
    boolean that_present_clickBudget = true && that.isSetClickBudget();
    if (this_present_clickBudget || that_present_clickBudget) {
      if (!(this_present_clickBudget && that_present_clickBudget))
        return false;
      if (!this.clickBudget.equals(that.clickBudget))
        return false;
    }

    boolean this_present_maxDailyClick = true && this.isSetMaxDailyClick();
    boolean that_present_maxDailyClick = true && that.isSetMaxDailyClick();
    if (this_present_maxDailyClick || that_present_maxDailyClick) {
      if (!(this_present_maxDailyClick && that_present_maxDailyClick))
        return false;
      if (!this.maxDailyClick.equals(that.maxDailyClick))
        return false;
    }

    boolean this_present_dailyHitClick = true && this.isSetDailyHitClick();
    boolean that_present_dailyHitClick = true && that.isSetDailyHitClick();
    if (this_present_dailyHitClick || that_present_dailyHitClick) {
      if (!(this_present_dailyHitClick && that_present_dailyHitClick))
        return false;
      if (!this.dailyHitClick.equals(that.dailyHitClick))
        return false;
    }

    boolean this_present_totalHitClick = true && this.isSetTotalHitClick();
    boolean that_present_totalHitClick = true && that.isSetTotalHitClick();
    if (this_present_totalHitClick || that_present_totalHitClick) {
      if (!(this_present_totalHitClick && that_present_totalHitClick))
        return false;
      if (!this.totalHitClick.equals(that.totalHitClick))
        return false;
    }

    boolean this_present_pvBudget = true && this.isSetPvBudget();
    boolean that_present_pvBudget = true && that.isSetPvBudget();
    if (this_present_pvBudget || that_present_pvBudget) {
      if (!(this_present_pvBudget && that_present_pvBudget))
        return false;
      if (!this.pvBudget.equals(that.pvBudget))
        return false;
    }

    boolean this_present_maxDailyPV = true && this.isSetMaxDailyPV();
    boolean that_present_maxDailyPV = true && that.isSetMaxDailyPV();
    if (this_present_maxDailyPV || that_present_maxDailyPV) {
      if (!(this_present_maxDailyPV && that_present_maxDailyPV))
        return false;
      if (!this.maxDailyPV.equals(that.maxDailyPV))
        return false;
    }

    boolean this_present_dailyHitPV = true && this.isSetDailyHitPV();
    boolean that_present_dailyHitPV = true && that.isSetDailyHitPV();
    if (this_present_dailyHitPV || that_present_dailyHitPV) {
      if (!(this_present_dailyHitPV && that_present_dailyHitPV))
        return false;
      if (!this.dailyHitPV.equals(that.dailyHitPV))
        return false;
    }

    boolean this_present_totalHitPV = true && this.isSetTotalHitPV();
    boolean that_present_totalHitPV = true && that.isSetTotalHitPV();
    if (this_present_totalHitPV || that_present_totalHitPV) {
      if (!(this_present_totalHitPV && that_present_totalHitPV))
        return false;
      if (!this.totalHitPV.equals(that.totalHitPV))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_Dsp_Strategy_Group other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaignID()).compareTo(other.isSetCampaignID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaignID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaignID, other.campaignID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBudget()).compareTo(other.isSetBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.budget, other.budget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalHit()).compareTo(other.isSetTotalHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHit, other.totalHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyHit()).compareTo(other.isSetDailyHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyHit, other.dailyHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDailyHit()).compareTo(other.isSetMaxDailyHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDailyHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDailyHit, other.maxDailyHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickBudget()).compareTo(other.isSetClickBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickBudget, other.clickBudget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDailyClick()).compareTo(other.isSetMaxDailyClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDailyClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDailyClick, other.maxDailyClick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyHitClick()).compareTo(other.isSetDailyHitClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyHitClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyHitClick, other.dailyHitClick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalHitClick()).compareTo(other.isSetTotalHitClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHitClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHitClick, other.totalHitClick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPvBudget()).compareTo(other.isSetPvBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPvBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pvBudget, other.pvBudget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxDailyPV()).compareTo(other.isSetMaxDailyPV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxDailyPV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDailyPV, other.maxDailyPV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDailyHitPV()).compareTo(other.isSetDailyHitPV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDailyHitPV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyHitPV, other.dailyHitPV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalHitPV()).compareTo(other.isSetTotalHitPV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalHitPV()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalHitPV, other.totalHitPV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_Dsp_Strategy_Group(");
    boolean first = true;

    sb.append("groupId:");
    sb.append(this.groupId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("campaignID:");
    sb.append(this.campaignID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("budget:");
    if (this.budget == null) {
      sb.append("null");
    } else {
      sb.append(this.budget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalHit:");
    if (this.totalHit == null) {
      sb.append("null");
    } else {
      sb.append(this.totalHit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dailyHit:");
    if (this.dailyHit == null) {
      sb.append("null");
    } else {
      sb.append(this.dailyHit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDailyHit:");
    if (this.maxDailyHit == null) {
      sb.append("null");
    } else {
      sb.append(this.maxDailyHit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clickBudget:");
    if (this.clickBudget == null) {
      sb.append("null");
    } else {
      sb.append(this.clickBudget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDailyClick:");
    if (this.maxDailyClick == null) {
      sb.append("null");
    } else {
      sb.append(this.maxDailyClick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dailyHitClick:");
    if (this.dailyHitClick == null) {
      sb.append("null");
    } else {
      sb.append(this.dailyHitClick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalHitClick:");
    if (this.totalHitClick == null) {
      sb.append("null");
    } else {
      sb.append(this.totalHitClick);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pvBudget:");
    if (this.pvBudget == null) {
      sb.append("null");
    } else {
      sb.append(this.pvBudget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxDailyPV:");
    if (this.maxDailyPV == null) {
      sb.append("null");
    } else {
      sb.append(this.maxDailyPV);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dailyHitPV:");
    if (this.dailyHitPV == null) {
      sb.append("null");
    } else {
      sb.append(this.dailyHitPV);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalHitPV:");
    if (this.totalHitPV == null) {
      sb.append("null");
    } else {
      sb.append(this.totalHitPV);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'groupId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    if (groupName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'groupName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'campaignID' because it's a primitive and you chose the non-beans generator.
    if (budget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'budget' was not present! Struct: " + toString());
    }
    if (totalHit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalHit' was not present! Struct: " + toString());
    }
    if (dailyHit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dailyHit' was not present! Struct: " + toString());
    }
    if (maxDailyHit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxDailyHit' was not present! Struct: " + toString());
    }
    if (clickBudget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clickBudget' was not present! Struct: " + toString());
    }
    if (maxDailyClick == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxDailyClick' was not present! Struct: " + toString());
    }
    if (dailyHitClick == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dailyHitClick' was not present! Struct: " + toString());
    }
    if (totalHitClick == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalHitClick' was not present! Struct: " + toString());
    }
    if (pvBudget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pvBudget' was not present! Struct: " + toString());
    }
    if (maxDailyPV == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxDailyPV' was not present! Struct: " + toString());
    }
    if (dailyHitPV == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dailyHitPV' was not present! Struct: " + toString());
    }
    if (totalHitPV == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalHitPV' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_Dsp_Strategy_GroupStandardSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Strategy_GroupStandardScheme getScheme() {
      return new TDbSync_Dsp_Strategy_GroupStandardScheme();
    }
  }

  private static class TDbSync_Dsp_Strategy_GroupStandardScheme extends StandardScheme<TDbSync_Dsp_Strategy_Group> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_Dsp_Strategy_Group struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupId = iprot.readI32();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupName = iprot.readString();
              struct.setGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAMPAIGN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.campaignID = iprot.readI32();
              struct.setCampaignIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.budget = iprot.readString();
              struct.setBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalHit = iprot.readString();
              struct.setTotalHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DAILY_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dailyHit = iprot.readString();
              struct.setDailyHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_DAILY_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxDailyHit = iprot.readString();
              struct.setMaxDailyHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CLICK_BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clickBudget = iprot.readString();
              struct.setClickBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_DAILY_CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxDailyClick = iprot.readString();
              struct.setMaxDailyClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DAILY_HIT_CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dailyHitClick = iprot.readString();
              struct.setDailyHitClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOTAL_HIT_CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalHitClick = iprot.readString();
              struct.setTotalHitClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PV_BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pvBudget = iprot.readString();
              struct.setPvBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MAX_DAILY_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxDailyPV = iprot.readString();
              struct.setMaxDailyPVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DAILY_HIT_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dailyHitPV = iprot.readString();
              struct.setDailyHitPVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TOTAL_HIT_PV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalHitPV = iprot.readString();
              struct.setTotalHitPVIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetGroupId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'groupId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCampaignID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'campaignID' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_Dsp_Strategy_Group struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct.groupId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      if (struct.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.groupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAMPAIGN_ID_FIELD_DESC);
      oprot.writeI32(struct.campaignID);
      oprot.writeFieldEnd();
      if (struct.budget != null) {
        oprot.writeFieldBegin(BUDGET_FIELD_DESC);
        oprot.writeString(struct.budget);
        oprot.writeFieldEnd();
      }
      if (struct.totalHit != null) {
        oprot.writeFieldBegin(TOTAL_HIT_FIELD_DESC);
        oprot.writeString(struct.totalHit);
        oprot.writeFieldEnd();
      }
      if (struct.dailyHit != null) {
        oprot.writeFieldBegin(DAILY_HIT_FIELD_DESC);
        oprot.writeString(struct.dailyHit);
        oprot.writeFieldEnd();
      }
      if (struct.maxDailyHit != null) {
        oprot.writeFieldBegin(MAX_DAILY_HIT_FIELD_DESC);
        oprot.writeString(struct.maxDailyHit);
        oprot.writeFieldEnd();
      }
      if (struct.clickBudget != null) {
        oprot.writeFieldBegin(CLICK_BUDGET_FIELD_DESC);
        oprot.writeString(struct.clickBudget);
        oprot.writeFieldEnd();
      }
      if (struct.maxDailyClick != null) {
        oprot.writeFieldBegin(MAX_DAILY_CLICK_FIELD_DESC);
        oprot.writeString(struct.maxDailyClick);
        oprot.writeFieldEnd();
      }
      if (struct.dailyHitClick != null) {
        oprot.writeFieldBegin(DAILY_HIT_CLICK_FIELD_DESC);
        oprot.writeString(struct.dailyHitClick);
        oprot.writeFieldEnd();
      }
      if (struct.totalHitClick != null) {
        oprot.writeFieldBegin(TOTAL_HIT_CLICK_FIELD_DESC);
        oprot.writeString(struct.totalHitClick);
        oprot.writeFieldEnd();
      }
      if (struct.pvBudget != null) {
        oprot.writeFieldBegin(PV_BUDGET_FIELD_DESC);
        oprot.writeString(struct.pvBudget);
        oprot.writeFieldEnd();
      }
      if (struct.maxDailyPV != null) {
        oprot.writeFieldBegin(MAX_DAILY_PV_FIELD_DESC);
        oprot.writeString(struct.maxDailyPV);
        oprot.writeFieldEnd();
      }
      if (struct.dailyHitPV != null) {
        oprot.writeFieldBegin(DAILY_HIT_PV_FIELD_DESC);
        oprot.writeString(struct.dailyHitPV);
        oprot.writeFieldEnd();
      }
      if (struct.totalHitPV != null) {
        oprot.writeFieldBegin(TOTAL_HIT_PV_FIELD_DESC);
        oprot.writeString(struct.totalHitPV);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_Dsp_Strategy_GroupTupleSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Strategy_GroupTupleScheme getScheme() {
      return new TDbSync_Dsp_Strategy_GroupTupleScheme();
    }
  }

  private static class TDbSync_Dsp_Strategy_GroupTupleScheme extends TupleScheme<TDbSync_Dsp_Strategy_Group> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Strategy_Group struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.groupId);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeString(struct.groupName);
      oprot.writeI32(struct.campaignID);
      oprot.writeString(struct.budget);
      oprot.writeString(struct.totalHit);
      oprot.writeString(struct.dailyHit);
      oprot.writeString(struct.maxDailyHit);
      oprot.writeString(struct.clickBudget);
      oprot.writeString(struct.maxDailyClick);
      oprot.writeString(struct.dailyHitClick);
      oprot.writeString(struct.totalHitClick);
      oprot.writeString(struct.pvBudget);
      oprot.writeString(struct.maxDailyPV);
      oprot.writeString(struct.dailyHitPV);
      oprot.writeString(struct.totalHitPV);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Strategy_Group struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.groupId = iprot.readI32();
      struct.setGroupIdIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.groupName = iprot.readString();
      struct.setGroupNameIsSet(true);
      struct.campaignID = iprot.readI32();
      struct.setCampaignIDIsSet(true);
      struct.budget = iprot.readString();
      struct.setBudgetIsSet(true);
      struct.totalHit = iprot.readString();
      struct.setTotalHitIsSet(true);
      struct.dailyHit = iprot.readString();
      struct.setDailyHitIsSet(true);
      struct.maxDailyHit = iprot.readString();
      struct.setMaxDailyHitIsSet(true);
      struct.clickBudget = iprot.readString();
      struct.setClickBudgetIsSet(true);
      struct.maxDailyClick = iprot.readString();
      struct.setMaxDailyClickIsSet(true);
      struct.dailyHitClick = iprot.readString();
      struct.setDailyHitClickIsSet(true);
      struct.totalHitClick = iprot.readString();
      struct.setTotalHitClickIsSet(true);
      struct.pvBudget = iprot.readString();
      struct.setPvBudgetIsSet(true);
      struct.maxDailyPV = iprot.readString();
      struct.setMaxDailyPVIsSet(true);
      struct.dailyHitPV = iprot.readString();
      struct.setDailyHitPVIsSet(true);
      struct.totalHitPV = iprot.readString();
      struct.setTotalHitPVIsSet(true);
    }
  }

}

