/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.dsp;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_Dsp_Creative implements org.apache.thrift.TBase<TDbSync_Dsp_Creative, TDbSync_Dsp_Creative._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_Dsp_Creative> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_Dsp_Creative");

  private static final org.apache.thrift.protocol.TField I_D_FIELD_DESC = new org.apache.thrift.protocol.TField("iD", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATIVE_CONCEPT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creativeConceptID", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campaignID", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CLICK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("clickUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SIZE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeID", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MEDIA_FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaFileUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DSP_AD_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("dspAdFormat", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DSP_FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dspFileType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DSP_FRAMEWORK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dspFrameworkID", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DSP_FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("dspFileFormat", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DSP_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("dspDuration", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DSP_EXPANDABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("dspExpandable", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField DSP_ROLLOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("dspRollover", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField AUDIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("auditStatus", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField DSP_IMPS_TRACKING_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("dspImpsTrackingUrl", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField DSP_TARGETING_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("dspTargetingUrl", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DSP_IS_SELF_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("dspIsSelfHost", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField IQIYI_CRID_FIELD_DESC = new org.apache.thrift.protocol.TField("iqiyi_crid", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_Dsp_CreativeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_Dsp_CreativeTupleSchemeFactory());
  }

  public int iD; // required
  public int status; // required
  public String lastChanged; // required
  public String name; // required
  public int creativeConceptID; // required
  public int campaignID; // required
  public String clickUrl; // required
  public int sizeID; // required
  public String mediaFileUrl; // required
  public String dspAdFormat; // required
  public int dspFileType; // required
  public int dspFrameworkID; // required
  public int dspFileFormat; // required
  public int dspDuration; // required
  public int dspExpandable; // required
  public int dspRollover; // required
  public int source; // required
  public int auditStatus; // required
  public String dspImpsTrackingUrl; // required
  public String dspTargetingUrl; // required
  public int dspIsSelfHost; // required
  public String tags; // required
  public String iqiyi_crid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    I_D((short)1, "iD"),
    STATUS((short)2, "status"),
    LAST_CHANGED((short)3, "lastChanged"),
    NAME((short)4, "name"),
    CREATIVE_CONCEPT_ID((short)5, "creativeConceptID"),
    CAMPAIGN_ID((short)6, "campaignID"),
    CLICK_URL((short)7, "clickUrl"),
    SIZE_ID((short)8, "sizeID"),
    MEDIA_FILE_URL((short)9, "mediaFileUrl"),
    DSP_AD_FORMAT((short)10, "dspAdFormat"),
    DSP_FILE_TYPE((short)11, "dspFileType"),
    DSP_FRAMEWORK_ID((short)12, "dspFrameworkID"),
    DSP_FILE_FORMAT((short)13, "dspFileFormat"),
    DSP_DURATION((short)14, "dspDuration"),
    DSP_EXPANDABLE((short)15, "dspExpandable"),
    DSP_ROLLOVER((short)16, "dspRollover"),
    SOURCE((short)17, "source"),
    AUDIT_STATUS((short)18, "auditStatus"),
    DSP_IMPS_TRACKING_URL((short)19, "dspImpsTrackingUrl"),
    DSP_TARGETING_URL((short)20, "dspTargetingUrl"),
    DSP_IS_SELF_HOST((short)21, "dspIsSelfHost"),
    TAGS((short)22, "tags"),
    IQIYI_CRID((short)23, "iqiyi_crid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // I_D
          return I_D;
        case 2: // STATUS
          return STATUS;
        case 3: // LAST_CHANGED
          return LAST_CHANGED;
        case 4: // NAME
          return NAME;
        case 5: // CREATIVE_CONCEPT_ID
          return CREATIVE_CONCEPT_ID;
        case 6: // CAMPAIGN_ID
          return CAMPAIGN_ID;
        case 7: // CLICK_URL
          return CLICK_URL;
        case 8: // SIZE_ID
          return SIZE_ID;
        case 9: // MEDIA_FILE_URL
          return MEDIA_FILE_URL;
        case 10: // DSP_AD_FORMAT
          return DSP_AD_FORMAT;
        case 11: // DSP_FILE_TYPE
          return DSP_FILE_TYPE;
        case 12: // DSP_FRAMEWORK_ID
          return DSP_FRAMEWORK_ID;
        case 13: // DSP_FILE_FORMAT
          return DSP_FILE_FORMAT;
        case 14: // DSP_DURATION
          return DSP_DURATION;
        case 15: // DSP_EXPANDABLE
          return DSP_EXPANDABLE;
        case 16: // DSP_ROLLOVER
          return DSP_ROLLOVER;
        case 17: // SOURCE
          return SOURCE;
        case 18: // AUDIT_STATUS
          return AUDIT_STATUS;
        case 19: // DSP_IMPS_TRACKING_URL
          return DSP_IMPS_TRACKING_URL;
        case 20: // DSP_TARGETING_URL
          return DSP_TARGETING_URL;
        case 21: // DSP_IS_SELF_HOST
          return DSP_IS_SELF_HOST;
        case 22: // TAGS
          return TAGS;
        case 23: // IQIYI_CRID
          return IQIYI_CRID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __CREATIVECONCEPTID_ISSET_ID = 2;
  private static final int __CAMPAIGNID_ISSET_ID = 3;
  private static final int __SIZEID_ISSET_ID = 4;
  private static final int __DSPFILETYPE_ISSET_ID = 5;
  private static final int __DSPFRAMEWORKID_ISSET_ID = 6;
  private static final int __DSPFILEFORMAT_ISSET_ID = 7;
  private static final int __DSPDURATION_ISSET_ID = 8;
  private static final int __DSPEXPANDABLE_ISSET_ID = 9;
  private static final int __DSPROLLOVER_ISSET_ID = 10;
  private static final int __SOURCE_ISSET_ID = 11;
  private static final int __AUDITSTATUS_ISSET_ID = 12;
  private static final int __DSPISSELFHOST_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.I_D, new org.apache.thrift.meta_data.FieldMetaData("iD", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATIVE_CONCEPT_ID, new org.apache.thrift.meta_data.FieldMetaData("creativeConceptID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("campaignID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLICK_URL, new org.apache.thrift.meta_data.FieldMetaData("clickUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE_ID, new org.apache.thrift.meta_data.FieldMetaData("sizeID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEDIA_FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("mediaFileUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DSP_AD_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("dspAdFormat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DSP_FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dspFileType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DSP_FRAMEWORK_ID, new org.apache.thrift.meta_data.FieldMetaData("dspFrameworkID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DSP_FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("dspFileFormat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DSP_DURATION, new org.apache.thrift.meta_data.FieldMetaData("dspDuration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DSP_EXPANDABLE, new org.apache.thrift.meta_data.FieldMetaData("dspExpandable", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DSP_ROLLOVER, new org.apache.thrift.meta_data.FieldMetaData("dspRollover", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUDIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("auditStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DSP_IMPS_TRACKING_URL, new org.apache.thrift.meta_data.FieldMetaData("dspImpsTrackingUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DSP_TARGETING_URL, new org.apache.thrift.meta_data.FieldMetaData("dspTargetingUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DSP_IS_SELF_HOST, new org.apache.thrift.meta_data.FieldMetaData("dspIsSelfHost", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IQIYI_CRID, new org.apache.thrift.meta_data.FieldMetaData("iqiyi_crid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_Dsp_Creative.class, metaDataMap);
  }

  public TDbSync_Dsp_Creative() {
  }

  public TDbSync_Dsp_Creative(
    int iD,
    int status,
    String lastChanged,
    String name,
    int creativeConceptID,
    int campaignID,
    String clickUrl,
    int sizeID,
    String mediaFileUrl,
    String dspAdFormat,
    int dspFileType,
    int dspFrameworkID,
    int dspFileFormat,
    int dspDuration,
    int dspExpandable,
    int dspRollover,
    int source,
    int auditStatus,
    String dspImpsTrackingUrl,
    String dspTargetingUrl,
    int dspIsSelfHost,
    String tags,
    String iqiyi_crid)
  {
    this();
    this.iD = iD;
    setIDIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.name = name;
    this.creativeConceptID = creativeConceptID;
    setCreativeConceptIDIsSet(true);
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    this.clickUrl = clickUrl;
    this.sizeID = sizeID;
    setSizeIDIsSet(true);
    this.mediaFileUrl = mediaFileUrl;
    this.dspAdFormat = dspAdFormat;
    this.dspFileType = dspFileType;
    setDspFileTypeIsSet(true);
    this.dspFrameworkID = dspFrameworkID;
    setDspFrameworkIDIsSet(true);
    this.dspFileFormat = dspFileFormat;
    setDspFileFormatIsSet(true);
    this.dspDuration = dspDuration;
    setDspDurationIsSet(true);
    this.dspExpandable = dspExpandable;
    setDspExpandableIsSet(true);
    this.dspRollover = dspRollover;
    setDspRolloverIsSet(true);
    this.source = source;
    setSourceIsSet(true);
    this.auditStatus = auditStatus;
    setAuditStatusIsSet(true);
    this.dspImpsTrackingUrl = dspImpsTrackingUrl;
    this.dspTargetingUrl = dspTargetingUrl;
    this.dspIsSelfHost = dspIsSelfHost;
    setDspIsSelfHostIsSet(true);
    this.tags = tags;
    this.iqiyi_crid = iqiyi_crid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_Dsp_Creative(TDbSync_Dsp_Creative other) {
    __isset_bitfield = other.__isset_bitfield;
    this.iD = other.iD;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.creativeConceptID = other.creativeConceptID;
    this.campaignID = other.campaignID;
    if (other.isSetClickUrl()) {
      this.clickUrl = other.clickUrl;
    }
    this.sizeID = other.sizeID;
    if (other.isSetMediaFileUrl()) {
      this.mediaFileUrl = other.mediaFileUrl;
    }
    if (other.isSetDspAdFormat()) {
      this.dspAdFormat = other.dspAdFormat;
    }
    this.dspFileType = other.dspFileType;
    this.dspFrameworkID = other.dspFrameworkID;
    this.dspFileFormat = other.dspFileFormat;
    this.dspDuration = other.dspDuration;
    this.dspExpandable = other.dspExpandable;
    this.dspRollover = other.dspRollover;
    this.source = other.source;
    this.auditStatus = other.auditStatus;
    if (other.isSetDspImpsTrackingUrl()) {
      this.dspImpsTrackingUrl = other.dspImpsTrackingUrl;
    }
    if (other.isSetDspTargetingUrl()) {
      this.dspTargetingUrl = other.dspTargetingUrl;
    }
    this.dspIsSelfHost = other.dspIsSelfHost;
    if (other.isSetTags()) {
      this.tags = other.tags;
    }
    if (other.isSetIqiyi_crid()) {
      this.iqiyi_crid = other.iqiyi_crid;
    }
  }

  public TDbSync_Dsp_Creative deepCopy() {
    return new TDbSync_Dsp_Creative(this);
  }

  @Override
  public void clear() {
    setIDIsSet(false);
    this.iD = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    this.name = null;
    setCreativeConceptIDIsSet(false);
    this.creativeConceptID = 0;
    setCampaignIDIsSet(false);
    this.campaignID = 0;
    this.clickUrl = null;
    setSizeIDIsSet(false);
    this.sizeID = 0;
    this.mediaFileUrl = null;
    this.dspAdFormat = null;
    setDspFileTypeIsSet(false);
    this.dspFileType = 0;
    setDspFrameworkIDIsSet(false);
    this.dspFrameworkID = 0;
    setDspFileFormatIsSet(false);
    this.dspFileFormat = 0;
    setDspDurationIsSet(false);
    this.dspDuration = 0;
    setDspExpandableIsSet(false);
    this.dspExpandable = 0;
    setDspRolloverIsSet(false);
    this.dspRollover = 0;
    setSourceIsSet(false);
    this.source = 0;
    setAuditStatusIsSet(false);
    this.auditStatus = 0;
    this.dspImpsTrackingUrl = null;
    this.dspTargetingUrl = null;
    setDspIsSelfHostIsSet(false);
    this.dspIsSelfHost = 0;
    this.tags = null;
    this.iqiyi_crid = null;
  }

  public int getID() {
    return this.iD;
  }

  public TDbSync_Dsp_Creative setID(int iD) {
    this.iD = iD;
    setIDIsSet(true);
    return this;
  }

  public void unsetID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field iD is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_Dsp_Creative setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_Dsp_Creative setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TDbSync_Dsp_Creative setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getCreativeConceptID() {
    return this.creativeConceptID;
  }

  public TDbSync_Dsp_Creative setCreativeConceptID(int creativeConceptID) {
    this.creativeConceptID = creativeConceptID;
    setCreativeConceptIDIsSet(true);
    return this;
  }

  public void unsetCreativeConceptID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIVECONCEPTID_ISSET_ID);
  }

  /** Returns true if field creativeConceptID is set (has been assigned a value) and false otherwise */
  public boolean isSetCreativeConceptID() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIVECONCEPTID_ISSET_ID);
  }

  public void setCreativeConceptIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIVECONCEPTID_ISSET_ID, value);
  }

  public int getCampaignID() {
    return this.campaignID;
  }

  public TDbSync_Dsp_Creative setCampaignID(int campaignID) {
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    return this;
  }

  public void unsetCampaignID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  /** Returns true if field campaignID is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaignID() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  public void setCampaignIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID, value);
  }

  public String getClickUrl() {
    return this.clickUrl;
  }

  public TDbSync_Dsp_Creative setClickUrl(String clickUrl) {
    this.clickUrl = clickUrl;
    return this;
  }

  public void unsetClickUrl() {
    this.clickUrl = null;
  }

  /** Returns true if field clickUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetClickUrl() {
    return this.clickUrl != null;
  }

  public void setClickUrlIsSet(boolean value) {
    if (!value) {
      this.clickUrl = null;
    }
  }

  public int getSizeID() {
    return this.sizeID;
  }

  public TDbSync_Dsp_Creative setSizeID(int sizeID) {
    this.sizeID = sizeID;
    setSizeIDIsSet(true);
    return this;
  }

  public void unsetSizeID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZEID_ISSET_ID);
  }

  /** Returns true if field sizeID is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeID() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZEID_ISSET_ID);
  }

  public void setSizeIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZEID_ISSET_ID, value);
  }

  public String getMediaFileUrl() {
    return this.mediaFileUrl;
  }

  public TDbSync_Dsp_Creative setMediaFileUrl(String mediaFileUrl) {
    this.mediaFileUrl = mediaFileUrl;
    return this;
  }

  public void unsetMediaFileUrl() {
    this.mediaFileUrl = null;
  }

  /** Returns true if field mediaFileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaFileUrl() {
    return this.mediaFileUrl != null;
  }

  public void setMediaFileUrlIsSet(boolean value) {
    if (!value) {
      this.mediaFileUrl = null;
    }
  }

  public String getDspAdFormat() {
    return this.dspAdFormat;
  }

  public TDbSync_Dsp_Creative setDspAdFormat(String dspAdFormat) {
    this.dspAdFormat = dspAdFormat;
    return this;
  }

  public void unsetDspAdFormat() {
    this.dspAdFormat = null;
  }

  /** Returns true if field dspAdFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetDspAdFormat() {
    return this.dspAdFormat != null;
  }

  public void setDspAdFormatIsSet(boolean value) {
    if (!value) {
      this.dspAdFormat = null;
    }
  }

  public int getDspFileType() {
    return this.dspFileType;
  }

  public TDbSync_Dsp_Creative setDspFileType(int dspFileType) {
    this.dspFileType = dspFileType;
    setDspFileTypeIsSet(true);
    return this;
  }

  public void unsetDspFileType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSPFILETYPE_ISSET_ID);
  }

  /** Returns true if field dspFileType is set (has been assigned a value) and false otherwise */
  public boolean isSetDspFileType() {
    return EncodingUtils.testBit(__isset_bitfield, __DSPFILETYPE_ISSET_ID);
  }

  public void setDspFileTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSPFILETYPE_ISSET_ID, value);
  }

  public int getDspFrameworkID() {
    return this.dspFrameworkID;
  }

  public TDbSync_Dsp_Creative setDspFrameworkID(int dspFrameworkID) {
    this.dspFrameworkID = dspFrameworkID;
    setDspFrameworkIDIsSet(true);
    return this;
  }

  public void unsetDspFrameworkID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSPFRAMEWORKID_ISSET_ID);
  }

  /** Returns true if field dspFrameworkID is set (has been assigned a value) and false otherwise */
  public boolean isSetDspFrameworkID() {
    return EncodingUtils.testBit(__isset_bitfield, __DSPFRAMEWORKID_ISSET_ID);
  }

  public void setDspFrameworkIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSPFRAMEWORKID_ISSET_ID, value);
  }

  public int getDspFileFormat() {
    return this.dspFileFormat;
  }

  public TDbSync_Dsp_Creative setDspFileFormat(int dspFileFormat) {
    this.dspFileFormat = dspFileFormat;
    setDspFileFormatIsSet(true);
    return this;
  }

  public void unsetDspFileFormat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSPFILEFORMAT_ISSET_ID);
  }

  /** Returns true if field dspFileFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetDspFileFormat() {
    return EncodingUtils.testBit(__isset_bitfield, __DSPFILEFORMAT_ISSET_ID);
  }

  public void setDspFileFormatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSPFILEFORMAT_ISSET_ID, value);
  }

  public int getDspDuration() {
    return this.dspDuration;
  }

  public TDbSync_Dsp_Creative setDspDuration(int dspDuration) {
    this.dspDuration = dspDuration;
    setDspDurationIsSet(true);
    return this;
  }

  public void unsetDspDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSPDURATION_ISSET_ID);
  }

  /** Returns true if field dspDuration is set (has been assigned a value) and false otherwise */
  public boolean isSetDspDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DSPDURATION_ISSET_ID);
  }

  public void setDspDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSPDURATION_ISSET_ID, value);
  }

  public int getDspExpandable() {
    return this.dspExpandable;
  }

  public TDbSync_Dsp_Creative setDspExpandable(int dspExpandable) {
    this.dspExpandable = dspExpandable;
    setDspExpandableIsSet(true);
    return this;
  }

  public void unsetDspExpandable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSPEXPANDABLE_ISSET_ID);
  }

  /** Returns true if field dspExpandable is set (has been assigned a value) and false otherwise */
  public boolean isSetDspExpandable() {
    return EncodingUtils.testBit(__isset_bitfield, __DSPEXPANDABLE_ISSET_ID);
  }

  public void setDspExpandableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSPEXPANDABLE_ISSET_ID, value);
  }

  public int getDspRollover() {
    return this.dspRollover;
  }

  public TDbSync_Dsp_Creative setDspRollover(int dspRollover) {
    this.dspRollover = dspRollover;
    setDspRolloverIsSet(true);
    return this;
  }

  public void unsetDspRollover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSPROLLOVER_ISSET_ID);
  }

  /** Returns true if field dspRollover is set (has been assigned a value) and false otherwise */
  public boolean isSetDspRollover() {
    return EncodingUtils.testBit(__isset_bitfield, __DSPROLLOVER_ISSET_ID);
  }

  public void setDspRolloverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSPROLLOVER_ISSET_ID, value);
  }

  public int getSource() {
    return this.source;
  }

  public TDbSync_Dsp_Creative setSource(int source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public int getAuditStatus() {
    return this.auditStatus;
  }

  public TDbSync_Dsp_Creative setAuditStatus(int auditStatus) {
    this.auditStatus = auditStatus;
    setAuditStatusIsSet(true);
    return this;
  }

  public void unsetAuditStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITSTATUS_ISSET_ID);
  }

  /** Returns true if field auditStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __AUDITSTATUS_ISSET_ID);
  }

  public void setAuditStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITSTATUS_ISSET_ID, value);
  }

  public String getDspImpsTrackingUrl() {
    return this.dspImpsTrackingUrl;
  }

  public TDbSync_Dsp_Creative setDspImpsTrackingUrl(String dspImpsTrackingUrl) {
    this.dspImpsTrackingUrl = dspImpsTrackingUrl;
    return this;
  }

  public void unsetDspImpsTrackingUrl() {
    this.dspImpsTrackingUrl = null;
  }

  /** Returns true if field dspImpsTrackingUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDspImpsTrackingUrl() {
    return this.dspImpsTrackingUrl != null;
  }

  public void setDspImpsTrackingUrlIsSet(boolean value) {
    if (!value) {
      this.dspImpsTrackingUrl = null;
    }
  }

  public String getDspTargetingUrl() {
    return this.dspTargetingUrl;
  }

  public TDbSync_Dsp_Creative setDspTargetingUrl(String dspTargetingUrl) {
    this.dspTargetingUrl = dspTargetingUrl;
    return this;
  }

  public void unsetDspTargetingUrl() {
    this.dspTargetingUrl = null;
  }

  /** Returns true if field dspTargetingUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDspTargetingUrl() {
    return this.dspTargetingUrl != null;
  }

  public void setDspTargetingUrlIsSet(boolean value) {
    if (!value) {
      this.dspTargetingUrl = null;
    }
  }

  public int getDspIsSelfHost() {
    return this.dspIsSelfHost;
  }

  public TDbSync_Dsp_Creative setDspIsSelfHost(int dspIsSelfHost) {
    this.dspIsSelfHost = dspIsSelfHost;
    setDspIsSelfHostIsSet(true);
    return this;
  }

  public void unsetDspIsSelfHost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSPISSELFHOST_ISSET_ID);
  }

  /** Returns true if field dspIsSelfHost is set (has been assigned a value) and false otherwise */
  public boolean isSetDspIsSelfHost() {
    return EncodingUtils.testBit(__isset_bitfield, __DSPISSELFHOST_ISSET_ID);
  }

  public void setDspIsSelfHostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSPISSELFHOST_ISSET_ID, value);
  }

  public String getTags() {
    return this.tags;
  }

  public TDbSync_Dsp_Creative setTags(String tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getIqiyi_crid() {
    return this.iqiyi_crid;
  }

  public TDbSync_Dsp_Creative setIqiyi_crid(String iqiyi_crid) {
    this.iqiyi_crid = iqiyi_crid;
    return this;
  }

  public void unsetIqiyi_crid() {
    this.iqiyi_crid = null;
  }

  /** Returns true if field iqiyi_crid is set (has been assigned a value) and false otherwise */
  public boolean isSetIqiyi_crid() {
    return this.iqiyi_crid != null;
  }

  public void setIqiyi_cridIsSet(boolean value) {
    if (!value) {
      this.iqiyi_crid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case I_D:
      if (value == null) {
        unsetID();
      } else {
        setID((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CREATIVE_CONCEPT_ID:
      if (value == null) {
        unsetCreativeConceptID();
      } else {
        setCreativeConceptID((Integer)value);
      }
      break;

    case CAMPAIGN_ID:
      if (value == null) {
        unsetCampaignID();
      } else {
        setCampaignID((Integer)value);
      }
      break;

    case CLICK_URL:
      if (value == null) {
        unsetClickUrl();
      } else {
        setClickUrl((String)value);
      }
      break;

    case SIZE_ID:
      if (value == null) {
        unsetSizeID();
      } else {
        setSizeID((Integer)value);
      }
      break;

    case MEDIA_FILE_URL:
      if (value == null) {
        unsetMediaFileUrl();
      } else {
        setMediaFileUrl((String)value);
      }
      break;

    case DSP_AD_FORMAT:
      if (value == null) {
        unsetDspAdFormat();
      } else {
        setDspAdFormat((String)value);
      }
      break;

    case DSP_FILE_TYPE:
      if (value == null) {
        unsetDspFileType();
      } else {
        setDspFileType((Integer)value);
      }
      break;

    case DSP_FRAMEWORK_ID:
      if (value == null) {
        unsetDspFrameworkID();
      } else {
        setDspFrameworkID((Integer)value);
      }
      break;

    case DSP_FILE_FORMAT:
      if (value == null) {
        unsetDspFileFormat();
      } else {
        setDspFileFormat((Integer)value);
      }
      break;

    case DSP_DURATION:
      if (value == null) {
        unsetDspDuration();
      } else {
        setDspDuration((Integer)value);
      }
      break;

    case DSP_EXPANDABLE:
      if (value == null) {
        unsetDspExpandable();
      } else {
        setDspExpandable((Integer)value);
      }
      break;

    case DSP_ROLLOVER:
      if (value == null) {
        unsetDspRollover();
      } else {
        setDspRollover((Integer)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;

    case AUDIT_STATUS:
      if (value == null) {
        unsetAuditStatus();
      } else {
        setAuditStatus((Integer)value);
      }
      break;

    case DSP_IMPS_TRACKING_URL:
      if (value == null) {
        unsetDspImpsTrackingUrl();
      } else {
        setDspImpsTrackingUrl((String)value);
      }
      break;

    case DSP_TARGETING_URL:
      if (value == null) {
        unsetDspTargetingUrl();
      } else {
        setDspTargetingUrl((String)value);
      }
      break;

    case DSP_IS_SELF_HOST:
      if (value == null) {
        unsetDspIsSelfHost();
      } else {
        setDspIsSelfHost((Integer)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((String)value);
      }
      break;

    case IQIYI_CRID:
      if (value == null) {
        unsetIqiyi_crid();
      } else {
        setIqiyi_crid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case I_D:
      return Integer.valueOf(getID());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case NAME:
      return getName();

    case CREATIVE_CONCEPT_ID:
      return Integer.valueOf(getCreativeConceptID());

    case CAMPAIGN_ID:
      return Integer.valueOf(getCampaignID());

    case CLICK_URL:
      return getClickUrl();

    case SIZE_ID:
      return Integer.valueOf(getSizeID());

    case MEDIA_FILE_URL:
      return getMediaFileUrl();

    case DSP_AD_FORMAT:
      return getDspAdFormat();

    case DSP_FILE_TYPE:
      return Integer.valueOf(getDspFileType());

    case DSP_FRAMEWORK_ID:
      return Integer.valueOf(getDspFrameworkID());

    case DSP_FILE_FORMAT:
      return Integer.valueOf(getDspFileFormat());

    case DSP_DURATION:
      return Integer.valueOf(getDspDuration());

    case DSP_EXPANDABLE:
      return Integer.valueOf(getDspExpandable());

    case DSP_ROLLOVER:
      return Integer.valueOf(getDspRollover());

    case SOURCE:
      return Integer.valueOf(getSource());

    case AUDIT_STATUS:
      return Integer.valueOf(getAuditStatus());

    case DSP_IMPS_TRACKING_URL:
      return getDspImpsTrackingUrl();

    case DSP_TARGETING_URL:
      return getDspTargetingUrl();

    case DSP_IS_SELF_HOST:
      return Integer.valueOf(getDspIsSelfHost());

    case TAGS:
      return getTags();

    case IQIYI_CRID:
      return getIqiyi_crid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case I_D:
      return isSetID();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case NAME:
      return isSetName();
    case CREATIVE_CONCEPT_ID:
      return isSetCreativeConceptID();
    case CAMPAIGN_ID:
      return isSetCampaignID();
    case CLICK_URL:
      return isSetClickUrl();
    case SIZE_ID:
      return isSetSizeID();
    case MEDIA_FILE_URL:
      return isSetMediaFileUrl();
    case DSP_AD_FORMAT:
      return isSetDspAdFormat();
    case DSP_FILE_TYPE:
      return isSetDspFileType();
    case DSP_FRAMEWORK_ID:
      return isSetDspFrameworkID();
    case DSP_FILE_FORMAT:
      return isSetDspFileFormat();
    case DSP_DURATION:
      return isSetDspDuration();
    case DSP_EXPANDABLE:
      return isSetDspExpandable();
    case DSP_ROLLOVER:
      return isSetDspRollover();
    case SOURCE:
      return isSetSource();
    case AUDIT_STATUS:
      return isSetAuditStatus();
    case DSP_IMPS_TRACKING_URL:
      return isSetDspImpsTrackingUrl();
    case DSP_TARGETING_URL:
      return isSetDspTargetingUrl();
    case DSP_IS_SELF_HOST:
      return isSetDspIsSelfHost();
    case TAGS:
      return isSetTags();
    case IQIYI_CRID:
      return isSetIqiyi_crid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_Dsp_Creative)
      return this.equals((TDbSync_Dsp_Creative)that);
    return false;
  }

  public boolean equals(TDbSync_Dsp_Creative that) {
    if (that == null)
      return false;

    boolean this_present_iD = true;
    boolean that_present_iD = true;
    if (this_present_iD || that_present_iD) {
      if (!(this_present_iD && that_present_iD))
        return false;
      if (this.iD != that.iD)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_creativeConceptID = true;
    boolean that_present_creativeConceptID = true;
    if (this_present_creativeConceptID || that_present_creativeConceptID) {
      if (!(this_present_creativeConceptID && that_present_creativeConceptID))
        return false;
      if (this.creativeConceptID != that.creativeConceptID)
        return false;
    }

    boolean this_present_campaignID = true;
    boolean that_present_campaignID = true;
    if (this_present_campaignID || that_present_campaignID) {
      if (!(this_present_campaignID && that_present_campaignID))
        return false;
      if (this.campaignID != that.campaignID)
        return false;
    }

    boolean this_present_clickUrl = true && this.isSetClickUrl();
    boolean that_present_clickUrl = true && that.isSetClickUrl();
    if (this_present_clickUrl || that_present_clickUrl) {
      if (!(this_present_clickUrl && that_present_clickUrl))
        return false;
      if (!this.clickUrl.equals(that.clickUrl))
        return false;
    }

    boolean this_present_sizeID = true;
    boolean that_present_sizeID = true;
    if (this_present_sizeID || that_present_sizeID) {
      if (!(this_present_sizeID && that_present_sizeID))
        return false;
      if (this.sizeID != that.sizeID)
        return false;
    }

    boolean this_present_mediaFileUrl = true && this.isSetMediaFileUrl();
    boolean that_present_mediaFileUrl = true && that.isSetMediaFileUrl();
    if (this_present_mediaFileUrl || that_present_mediaFileUrl) {
      if (!(this_present_mediaFileUrl && that_present_mediaFileUrl))
        return false;
      if (!this.mediaFileUrl.equals(that.mediaFileUrl))
        return false;
    }

    boolean this_present_dspAdFormat = true && this.isSetDspAdFormat();
    boolean that_present_dspAdFormat = true && that.isSetDspAdFormat();
    if (this_present_dspAdFormat || that_present_dspAdFormat) {
      if (!(this_present_dspAdFormat && that_present_dspAdFormat))
        return false;
      if (!this.dspAdFormat.equals(that.dspAdFormat))
        return false;
    }

    boolean this_present_dspFileType = true;
    boolean that_present_dspFileType = true;
    if (this_present_dspFileType || that_present_dspFileType) {
      if (!(this_present_dspFileType && that_present_dspFileType))
        return false;
      if (this.dspFileType != that.dspFileType)
        return false;
    }

    boolean this_present_dspFrameworkID = true;
    boolean that_present_dspFrameworkID = true;
    if (this_present_dspFrameworkID || that_present_dspFrameworkID) {
      if (!(this_present_dspFrameworkID && that_present_dspFrameworkID))
        return false;
      if (this.dspFrameworkID != that.dspFrameworkID)
        return false;
    }

    boolean this_present_dspFileFormat = true;
    boolean that_present_dspFileFormat = true;
    if (this_present_dspFileFormat || that_present_dspFileFormat) {
      if (!(this_present_dspFileFormat && that_present_dspFileFormat))
        return false;
      if (this.dspFileFormat != that.dspFileFormat)
        return false;
    }

    boolean this_present_dspDuration = true;
    boolean that_present_dspDuration = true;
    if (this_present_dspDuration || that_present_dspDuration) {
      if (!(this_present_dspDuration && that_present_dspDuration))
        return false;
      if (this.dspDuration != that.dspDuration)
        return false;
    }

    boolean this_present_dspExpandable = true;
    boolean that_present_dspExpandable = true;
    if (this_present_dspExpandable || that_present_dspExpandable) {
      if (!(this_present_dspExpandable && that_present_dspExpandable))
        return false;
      if (this.dspExpandable != that.dspExpandable)
        return false;
    }

    boolean this_present_dspRollover = true;
    boolean that_present_dspRollover = true;
    if (this_present_dspRollover || that_present_dspRollover) {
      if (!(this_present_dspRollover && that_present_dspRollover))
        return false;
      if (this.dspRollover != that.dspRollover)
        return false;
    }

    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_auditStatus = true;
    boolean that_present_auditStatus = true;
    if (this_present_auditStatus || that_present_auditStatus) {
      if (!(this_present_auditStatus && that_present_auditStatus))
        return false;
      if (this.auditStatus != that.auditStatus)
        return false;
    }

    boolean this_present_dspImpsTrackingUrl = true && this.isSetDspImpsTrackingUrl();
    boolean that_present_dspImpsTrackingUrl = true && that.isSetDspImpsTrackingUrl();
    if (this_present_dspImpsTrackingUrl || that_present_dspImpsTrackingUrl) {
      if (!(this_present_dspImpsTrackingUrl && that_present_dspImpsTrackingUrl))
        return false;
      if (!this.dspImpsTrackingUrl.equals(that.dspImpsTrackingUrl))
        return false;
    }

    boolean this_present_dspTargetingUrl = true && this.isSetDspTargetingUrl();
    boolean that_present_dspTargetingUrl = true && that.isSetDspTargetingUrl();
    if (this_present_dspTargetingUrl || that_present_dspTargetingUrl) {
      if (!(this_present_dspTargetingUrl && that_present_dspTargetingUrl))
        return false;
      if (!this.dspTargetingUrl.equals(that.dspTargetingUrl))
        return false;
    }

    boolean this_present_dspIsSelfHost = true;
    boolean that_present_dspIsSelfHost = true;
    if (this_present_dspIsSelfHost || that_present_dspIsSelfHost) {
      if (!(this_present_dspIsSelfHost && that_present_dspIsSelfHost))
        return false;
      if (this.dspIsSelfHost != that.dspIsSelfHost)
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_iqiyi_crid = true && this.isSetIqiyi_crid();
    boolean that_present_iqiyi_crid = true && that.isSetIqiyi_crid();
    if (this_present_iqiyi_crid || that_present_iqiyi_crid) {
      if (!(this_present_iqiyi_crid && that_present_iqiyi_crid))
        return false;
      if (!this.iqiyi_crid.equals(that.iqiyi_crid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_Dsp_Creative other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iD, other.iD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreativeConceptID()).compareTo(other.isSetCreativeConceptID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreativeConceptID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creativeConceptID, other.creativeConceptID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaignID()).compareTo(other.isSetCampaignID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaignID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaignID, other.campaignID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickUrl()).compareTo(other.isSetClickUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickUrl, other.clickUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSizeID()).compareTo(other.isSetSizeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeID, other.sizeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaFileUrl()).compareTo(other.isSetMediaFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaFileUrl, other.mediaFileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDspAdFormat()).compareTo(other.isSetDspAdFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspAdFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspAdFormat, other.dspAdFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDspFileType()).compareTo(other.isSetDspFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspFileType, other.dspFileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDspFrameworkID()).compareTo(other.isSetDspFrameworkID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspFrameworkID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspFrameworkID, other.dspFrameworkID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDspFileFormat()).compareTo(other.isSetDspFileFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspFileFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspFileFormat, other.dspFileFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDspDuration()).compareTo(other.isSetDspDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspDuration, other.dspDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDspExpandable()).compareTo(other.isSetDspExpandable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspExpandable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspExpandable, other.dspExpandable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDspRollover()).compareTo(other.isSetDspRollover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspRollover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspRollover, other.dspRollover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditStatus()).compareTo(other.isSetAuditStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditStatus, other.auditStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDspImpsTrackingUrl()).compareTo(other.isSetDspImpsTrackingUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspImpsTrackingUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspImpsTrackingUrl, other.dspImpsTrackingUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDspTargetingUrl()).compareTo(other.isSetDspTargetingUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspTargetingUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspTargetingUrl, other.dspTargetingUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDspIsSelfHost()).compareTo(other.isSetDspIsSelfHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDspIsSelfHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dspIsSelfHost, other.dspIsSelfHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIqiyi_crid()).compareTo(other.isSetIqiyi_crid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIqiyi_crid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iqiyi_crid, other.iqiyi_crid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_Dsp_Creative(");
    boolean first = true;

    sb.append("iD:");
    sb.append(this.iD);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creativeConceptID:");
    sb.append(this.creativeConceptID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("campaignID:");
    sb.append(this.campaignID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clickUrl:");
    if (this.clickUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.clickUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sizeID:");
    sb.append(this.sizeID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaFileUrl:");
    if (this.mediaFileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.mediaFileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dspAdFormat:");
    if (this.dspAdFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.dspAdFormat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dspFileType:");
    sb.append(this.dspFileType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dspFrameworkID:");
    sb.append(this.dspFrameworkID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dspFileFormat:");
    sb.append(this.dspFileFormat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dspDuration:");
    sb.append(this.dspDuration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dspExpandable:");
    sb.append(this.dspExpandable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dspRollover:");
    sb.append(this.dspRollover);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    if (!first) sb.append(", ");
    sb.append("auditStatus:");
    sb.append(this.auditStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dspImpsTrackingUrl:");
    if (this.dspImpsTrackingUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.dspImpsTrackingUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dspTargetingUrl:");
    if (this.dspTargetingUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.dspTargetingUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dspIsSelfHost:");
    sb.append(this.dspIsSelfHost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iqiyi_crid:");
    if (this.iqiyi_crid == null) {
      sb.append("null");
    } else {
      sb.append(this.iqiyi_crid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'iD' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'creativeConceptID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'campaignID' because it's a primitive and you chose the non-beans generator.
    if (clickUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clickUrl' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sizeID' because it's a primitive and you chose the non-beans generator.
    if (mediaFileUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mediaFileUrl' was not present! Struct: " + toString());
    }
    if (dspAdFormat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dspAdFormat' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'dspFileType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dspFrameworkID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dspFileFormat' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dspDuration' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dspExpandable' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dspRollover' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'source' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'auditStatus' because it's a primitive and you chose the non-beans generator.
    if (dspImpsTrackingUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dspImpsTrackingUrl' was not present! Struct: " + toString());
    }
    if (dspTargetingUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dspTargetingUrl' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'dspIsSelfHost' because it's a primitive and you chose the non-beans generator.
    if (tags == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tags' was not present! Struct: " + toString());
    }
    if (iqiyi_crid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'iqiyi_crid' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_Dsp_CreativeStandardSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_CreativeStandardScheme getScheme() {
      return new TDbSync_Dsp_CreativeStandardScheme();
    }
  }

  private static class TDbSync_Dsp_CreativeStandardScheme extends StandardScheme<TDbSync_Dsp_Creative> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_Dsp_Creative struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // I_D
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iD = iprot.readI32();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATIVE_CONCEPT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creativeConceptID = iprot.readI32();
              struct.setCreativeConceptIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CAMPAIGN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.campaignID = iprot.readI32();
              struct.setCampaignIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLICK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clickUrl = iprot.readString();
              struct.setClickUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SIZE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sizeID = iprot.readI32();
              struct.setSizeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEDIA_FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaFileUrl = iprot.readString();
              struct.setMediaFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DSP_AD_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dspAdFormat = iprot.readString();
              struct.setDspAdFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DSP_FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dspFileType = iprot.readI32();
              struct.setDspFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DSP_FRAMEWORK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dspFrameworkID = iprot.readI32();
              struct.setDspFrameworkIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DSP_FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dspFileFormat = iprot.readI32();
              struct.setDspFileFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DSP_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dspDuration = iprot.readI32();
              struct.setDspDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DSP_EXPANDABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dspExpandable = iprot.readI32();
              struct.setDspExpandableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DSP_ROLLOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dspRollover = iprot.readI32();
              struct.setDspRolloverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = iprot.readI32();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AUDIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auditStatus = iprot.readI32();
              struct.setAuditStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DSP_IMPS_TRACKING_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dspImpsTrackingUrl = iprot.readString();
              struct.setDspImpsTrackingUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DSP_TARGETING_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dspTargetingUrl = iprot.readString();
              struct.setDspTargetingUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DSP_IS_SELF_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dspIsSelfHost = iprot.readI32();
              struct.setDspIsSelfHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tags = iprot.readString();
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IQIYI_CRID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.iqiyi_crid = iprot.readString();
              struct.setIqiyi_cridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'iD' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreativeConceptID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'creativeConceptID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCampaignID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'campaignID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSizeID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sizeID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDspFileType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dspFileType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDspFrameworkID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dspFrameworkID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDspFileFormat()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dspFileFormat' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDspDuration()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dspDuration' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDspExpandable()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dspExpandable' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDspRollover()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dspRollover' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSource()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'source' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAuditStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'auditStatus' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDspIsSelfHost()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dspIsSelfHost' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_Dsp_Creative struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(I_D_FIELD_DESC);
      oprot.writeI32(struct.iD);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATIVE_CONCEPT_ID_FIELD_DESC);
      oprot.writeI32(struct.creativeConceptID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAMPAIGN_ID_FIELD_DESC);
      oprot.writeI32(struct.campaignID);
      oprot.writeFieldEnd();
      if (struct.clickUrl != null) {
        oprot.writeFieldBegin(CLICK_URL_FIELD_DESC);
        oprot.writeString(struct.clickUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_ID_FIELD_DESC);
      oprot.writeI32(struct.sizeID);
      oprot.writeFieldEnd();
      if (struct.mediaFileUrl != null) {
        oprot.writeFieldBegin(MEDIA_FILE_URL_FIELD_DESC);
        oprot.writeString(struct.mediaFileUrl);
        oprot.writeFieldEnd();
      }
      if (struct.dspAdFormat != null) {
        oprot.writeFieldBegin(DSP_AD_FORMAT_FIELD_DESC);
        oprot.writeString(struct.dspAdFormat);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DSP_FILE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.dspFileType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DSP_FRAMEWORK_ID_FIELD_DESC);
      oprot.writeI32(struct.dspFrameworkID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DSP_FILE_FORMAT_FIELD_DESC);
      oprot.writeI32(struct.dspFileFormat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DSP_DURATION_FIELD_DESC);
      oprot.writeI32(struct.dspDuration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DSP_EXPANDABLE_FIELD_DESC);
      oprot.writeI32(struct.dspExpandable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DSP_ROLLOVER_FIELD_DESC);
      oprot.writeI32(struct.dspRollover);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOURCE_FIELD_DESC);
      oprot.writeI32(struct.source);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUDIT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.auditStatus);
      oprot.writeFieldEnd();
      if (struct.dspImpsTrackingUrl != null) {
        oprot.writeFieldBegin(DSP_IMPS_TRACKING_URL_FIELD_DESC);
        oprot.writeString(struct.dspImpsTrackingUrl);
        oprot.writeFieldEnd();
      }
      if (struct.dspTargetingUrl != null) {
        oprot.writeFieldBegin(DSP_TARGETING_URL_FIELD_DESC);
        oprot.writeString(struct.dspTargetingUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DSP_IS_SELF_HOST_FIELD_DESC);
      oprot.writeI32(struct.dspIsSelfHost);
      oprot.writeFieldEnd();
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        oprot.writeString(struct.tags);
        oprot.writeFieldEnd();
      }
      if (struct.iqiyi_crid != null) {
        oprot.writeFieldBegin(IQIYI_CRID_FIELD_DESC);
        oprot.writeString(struct.iqiyi_crid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_Dsp_CreativeTupleSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_CreativeTupleScheme getScheme() {
      return new TDbSync_Dsp_CreativeTupleScheme();
    }
  }

  private static class TDbSync_Dsp_CreativeTupleScheme extends TupleScheme<TDbSync_Dsp_Creative> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Creative struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.iD);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeString(struct.name);
      oprot.writeI32(struct.creativeConceptID);
      oprot.writeI32(struct.campaignID);
      oprot.writeString(struct.clickUrl);
      oprot.writeI32(struct.sizeID);
      oprot.writeString(struct.mediaFileUrl);
      oprot.writeString(struct.dspAdFormat);
      oprot.writeI32(struct.dspFileType);
      oprot.writeI32(struct.dspFrameworkID);
      oprot.writeI32(struct.dspFileFormat);
      oprot.writeI32(struct.dspDuration);
      oprot.writeI32(struct.dspExpandable);
      oprot.writeI32(struct.dspRollover);
      oprot.writeI32(struct.source);
      oprot.writeI32(struct.auditStatus);
      oprot.writeString(struct.dspImpsTrackingUrl);
      oprot.writeString(struct.dspTargetingUrl);
      oprot.writeI32(struct.dspIsSelfHost);
      oprot.writeString(struct.tags);
      oprot.writeString(struct.iqiyi_crid);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Creative struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.iD = iprot.readI32();
      struct.setIDIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.creativeConceptID = iprot.readI32();
      struct.setCreativeConceptIDIsSet(true);
      struct.campaignID = iprot.readI32();
      struct.setCampaignIDIsSet(true);
      struct.clickUrl = iprot.readString();
      struct.setClickUrlIsSet(true);
      struct.sizeID = iprot.readI32();
      struct.setSizeIDIsSet(true);
      struct.mediaFileUrl = iprot.readString();
      struct.setMediaFileUrlIsSet(true);
      struct.dspAdFormat = iprot.readString();
      struct.setDspAdFormatIsSet(true);
      struct.dspFileType = iprot.readI32();
      struct.setDspFileTypeIsSet(true);
      struct.dspFrameworkID = iprot.readI32();
      struct.setDspFrameworkIDIsSet(true);
      struct.dspFileFormat = iprot.readI32();
      struct.setDspFileFormatIsSet(true);
      struct.dspDuration = iprot.readI32();
      struct.setDspDurationIsSet(true);
      struct.dspExpandable = iprot.readI32();
      struct.setDspExpandableIsSet(true);
      struct.dspRollover = iprot.readI32();
      struct.setDspRolloverIsSet(true);
      struct.source = iprot.readI32();
      struct.setSourceIsSet(true);
      struct.auditStatus = iprot.readI32();
      struct.setAuditStatusIsSet(true);
      struct.dspImpsTrackingUrl = iprot.readString();
      struct.setDspImpsTrackingUrlIsSet(true);
      struct.dspTargetingUrl = iprot.readString();
      struct.setDspTargetingUrlIsSet(true);
      struct.dspIsSelfHost = iprot.readI32();
      struct.setDspIsSelfHostIsSet(true);
      struct.tags = iprot.readString();
      struct.setTagsIsSet(true);
      struct.iqiyi_crid = iprot.readString();
      struct.setIqiyi_cridIsSet(true);
    }
  }

}

