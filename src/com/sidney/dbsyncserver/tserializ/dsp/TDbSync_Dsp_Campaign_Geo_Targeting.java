/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.dsp;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDbSync_Dsp_Campaign_Geo_Targeting implements org.apache.thrift.TBase<TDbSync_Dsp_Campaign_Geo_Targeting, TDbSync_Dsp_Campaign_Geo_Targeting._Fields>, java.io.Serializable, Cloneable, Comparable<TDbSync_Dsp_Campaign_Geo_Targeting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDbSync_Dsp_Campaign_Geo_Targeting");

  private static final org.apache.thrift.protocol.TField CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campaignID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_CHANGED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastChanged", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GEO_COUNTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("geoCountries", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GEO_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("geoStates", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GEO_CITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("geoCities", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDbSync_Dsp_Campaign_Geo_TargetingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDbSync_Dsp_Campaign_Geo_TargetingTupleSchemeFactory());
  }

  public int campaignID; // required
  public int status; // required
  public String lastChanged; // required
  public String geoCountries; // required
  public String geoStates; // required
  public String geoCities; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CAMPAIGN_ID((short)1, "campaignID"),
    STATUS((short)2, "status"),
    LAST_CHANGED((short)3, "lastChanged"),
    GEO_COUNTRIES((short)4, "geoCountries"),
    GEO_STATES((short)5, "geoStates"),
    GEO_CITIES((short)6, "geoCities");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAMPAIGN_ID
          return CAMPAIGN_ID;
        case 2: // STATUS
          return STATUS;
        case 3: // LAST_CHANGED
          return LAST_CHANGED;
        case 4: // GEO_COUNTRIES
          return GEO_COUNTRIES;
        case 5: // GEO_STATES
          return GEO_STATES;
        case 6: // GEO_CITIES
          return GEO_CITIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CAMPAIGNID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("campaignID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_CHANGED, new org.apache.thrift.meta_data.FieldMetaData("lastChanged", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEO_COUNTRIES, new org.apache.thrift.meta_data.FieldMetaData("geoCountries", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEO_STATES, new org.apache.thrift.meta_data.FieldMetaData("geoStates", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEO_CITIES, new org.apache.thrift.meta_data.FieldMetaData("geoCities", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDbSync_Dsp_Campaign_Geo_Targeting.class, metaDataMap);
  }

  public TDbSync_Dsp_Campaign_Geo_Targeting() {
  }

  public TDbSync_Dsp_Campaign_Geo_Targeting(
    int campaignID,
    int status,
    String lastChanged,
    String geoCountries,
    String geoStates,
    String geoCities)
  {
    this();
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastChanged = lastChanged;
    this.geoCountries = geoCountries;
    this.geoStates = geoStates;
    this.geoCities = geoCities;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDbSync_Dsp_Campaign_Geo_Targeting(TDbSync_Dsp_Campaign_Geo_Targeting other) {
    __isset_bitfield = other.__isset_bitfield;
    this.campaignID = other.campaignID;
    this.status = other.status;
    if (other.isSetLastChanged()) {
      this.lastChanged = other.lastChanged;
    }
    if (other.isSetGeoCountries()) {
      this.geoCountries = other.geoCountries;
    }
    if (other.isSetGeoStates()) {
      this.geoStates = other.geoStates;
    }
    if (other.isSetGeoCities()) {
      this.geoCities = other.geoCities;
    }
  }

  public TDbSync_Dsp_Campaign_Geo_Targeting deepCopy() {
    return new TDbSync_Dsp_Campaign_Geo_Targeting(this);
  }

  @Override
  public void clear() {
    setCampaignIDIsSet(false);
    this.campaignID = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastChanged = null;
    this.geoCountries = null;
    this.geoStates = null;
    this.geoCities = null;
  }

  public int getCampaignID() {
    return this.campaignID;
  }

  public TDbSync_Dsp_Campaign_Geo_Targeting setCampaignID(int campaignID) {
    this.campaignID = campaignID;
    setCampaignIDIsSet(true);
    return this;
  }

  public void unsetCampaignID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  /** Returns true if field campaignID is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaignID() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  public void setCampaignIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TDbSync_Dsp_Campaign_Geo_Targeting setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastChanged() {
    return this.lastChanged;
  }

  public TDbSync_Dsp_Campaign_Geo_Targeting setLastChanged(String lastChanged) {
    this.lastChanged = lastChanged;
    return this;
  }

  public void unsetLastChanged() {
    this.lastChanged = null;
  }

  /** Returns true if field lastChanged is set (has been assigned a value) and false otherwise */
  public boolean isSetLastChanged() {
    return this.lastChanged != null;
  }

  public void setLastChangedIsSet(boolean value) {
    if (!value) {
      this.lastChanged = null;
    }
  }

  public String getGeoCountries() {
    return this.geoCountries;
  }

  public TDbSync_Dsp_Campaign_Geo_Targeting setGeoCountries(String geoCountries) {
    this.geoCountries = geoCountries;
    return this;
  }

  public void unsetGeoCountries() {
    this.geoCountries = null;
  }

  /** Returns true if field geoCountries is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoCountries() {
    return this.geoCountries != null;
  }

  public void setGeoCountriesIsSet(boolean value) {
    if (!value) {
      this.geoCountries = null;
    }
  }

  public String getGeoStates() {
    return this.geoStates;
  }

  public TDbSync_Dsp_Campaign_Geo_Targeting setGeoStates(String geoStates) {
    this.geoStates = geoStates;
    return this;
  }

  public void unsetGeoStates() {
    this.geoStates = null;
  }

  /** Returns true if field geoStates is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoStates() {
    return this.geoStates != null;
  }

  public void setGeoStatesIsSet(boolean value) {
    if (!value) {
      this.geoStates = null;
    }
  }

  public String getGeoCities() {
    return this.geoCities;
  }

  public TDbSync_Dsp_Campaign_Geo_Targeting setGeoCities(String geoCities) {
    this.geoCities = geoCities;
    return this;
  }

  public void unsetGeoCities() {
    this.geoCities = null;
  }

  /** Returns true if field geoCities is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoCities() {
    return this.geoCities != null;
  }

  public void setGeoCitiesIsSet(boolean value) {
    if (!value) {
      this.geoCities = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CAMPAIGN_ID:
      if (value == null) {
        unsetCampaignID();
      } else {
        setCampaignID((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_CHANGED:
      if (value == null) {
        unsetLastChanged();
      } else {
        setLastChanged((String)value);
      }
      break;

    case GEO_COUNTRIES:
      if (value == null) {
        unsetGeoCountries();
      } else {
        setGeoCountries((String)value);
      }
      break;

    case GEO_STATES:
      if (value == null) {
        unsetGeoStates();
      } else {
        setGeoStates((String)value);
      }
      break;

    case GEO_CITIES:
      if (value == null) {
        unsetGeoCities();
      } else {
        setGeoCities((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CAMPAIGN_ID:
      return Integer.valueOf(getCampaignID());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_CHANGED:
      return getLastChanged();

    case GEO_COUNTRIES:
      return getGeoCountries();

    case GEO_STATES:
      return getGeoStates();

    case GEO_CITIES:
      return getGeoCities();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CAMPAIGN_ID:
      return isSetCampaignID();
    case STATUS:
      return isSetStatus();
    case LAST_CHANGED:
      return isSetLastChanged();
    case GEO_COUNTRIES:
      return isSetGeoCountries();
    case GEO_STATES:
      return isSetGeoStates();
    case GEO_CITIES:
      return isSetGeoCities();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDbSync_Dsp_Campaign_Geo_Targeting)
      return this.equals((TDbSync_Dsp_Campaign_Geo_Targeting)that);
    return false;
  }

  public boolean equals(TDbSync_Dsp_Campaign_Geo_Targeting that) {
    if (that == null)
      return false;

    boolean this_present_campaignID = true;
    boolean that_present_campaignID = true;
    if (this_present_campaignID || that_present_campaignID) {
      if (!(this_present_campaignID && that_present_campaignID))
        return false;
      if (this.campaignID != that.campaignID)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastChanged = true && this.isSetLastChanged();
    boolean that_present_lastChanged = true && that.isSetLastChanged();
    if (this_present_lastChanged || that_present_lastChanged) {
      if (!(this_present_lastChanged && that_present_lastChanged))
        return false;
      if (!this.lastChanged.equals(that.lastChanged))
        return false;
    }

    boolean this_present_geoCountries = true && this.isSetGeoCountries();
    boolean that_present_geoCountries = true && that.isSetGeoCountries();
    if (this_present_geoCountries || that_present_geoCountries) {
      if (!(this_present_geoCountries && that_present_geoCountries))
        return false;
      if (!this.geoCountries.equals(that.geoCountries))
        return false;
    }

    boolean this_present_geoStates = true && this.isSetGeoStates();
    boolean that_present_geoStates = true && that.isSetGeoStates();
    if (this_present_geoStates || that_present_geoStates) {
      if (!(this_present_geoStates && that_present_geoStates))
        return false;
      if (!this.geoStates.equals(that.geoStates))
        return false;
    }

    boolean this_present_geoCities = true && this.isSetGeoCities();
    boolean that_present_geoCities = true && that.isSetGeoCities();
    if (this_present_geoCities || that_present_geoCities) {
      if (!(this_present_geoCities && that_present_geoCities))
        return false;
      if (!this.geoCities.equals(that.geoCities))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TDbSync_Dsp_Campaign_Geo_Targeting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCampaignID()).compareTo(other.isSetCampaignID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaignID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaignID, other.campaignID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastChanged()).compareTo(other.isSetLastChanged());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastChanged()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastChanged, other.lastChanged);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoCountries()).compareTo(other.isSetGeoCountries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoCountries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geoCountries, other.geoCountries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoStates()).compareTo(other.isSetGeoStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geoStates, other.geoStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeoCities()).compareTo(other.isSetGeoCities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoCities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geoCities, other.geoCities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDbSync_Dsp_Campaign_Geo_Targeting(");
    boolean first = true;

    sb.append("campaignID:");
    sb.append(this.campaignID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastChanged:");
    if (this.lastChanged == null) {
      sb.append("null");
    } else {
      sb.append(this.lastChanged);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geoCountries:");
    if (this.geoCountries == null) {
      sb.append("null");
    } else {
      sb.append(this.geoCountries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geoStates:");
    if (this.geoStates == null) {
      sb.append("null");
    } else {
      sb.append(this.geoStates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geoCities:");
    if (this.geoCities == null) {
      sb.append("null");
    } else {
      sb.append(this.geoCities);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'campaignID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (lastChanged == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastChanged' was not present! Struct: " + toString());
    }
    if (geoCountries == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'geoCountries' was not present! Struct: " + toString());
    }
    if (geoStates == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'geoStates' was not present! Struct: " + toString());
    }
    if (geoCities == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'geoCities' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDbSync_Dsp_Campaign_Geo_TargetingStandardSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Campaign_Geo_TargetingStandardScheme getScheme() {
      return new TDbSync_Dsp_Campaign_Geo_TargetingStandardScheme();
    }
  }

  private static class TDbSync_Dsp_Campaign_Geo_TargetingStandardScheme extends StandardScheme<TDbSync_Dsp_Campaign_Geo_Targeting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDbSync_Dsp_Campaign_Geo_Targeting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAMPAIGN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.campaignID = iprot.readI32();
              struct.setCampaignIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_CHANGED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastChanged = iprot.readString();
              struct.setLastChangedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GEO_COUNTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.geoCountries = iprot.readString();
              struct.setGeoCountriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GEO_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.geoStates = iprot.readString();
              struct.setGeoStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GEO_CITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.geoCities = iprot.readString();
              struct.setGeoCitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCampaignID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'campaignID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDbSync_Dsp_Campaign_Geo_Targeting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CAMPAIGN_ID_FIELD_DESC);
      oprot.writeI32(struct.campaignID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastChanged != null) {
        oprot.writeFieldBegin(LAST_CHANGED_FIELD_DESC);
        oprot.writeString(struct.lastChanged);
        oprot.writeFieldEnd();
      }
      if (struct.geoCountries != null) {
        oprot.writeFieldBegin(GEO_COUNTRIES_FIELD_DESC);
        oprot.writeString(struct.geoCountries);
        oprot.writeFieldEnd();
      }
      if (struct.geoStates != null) {
        oprot.writeFieldBegin(GEO_STATES_FIELD_DESC);
        oprot.writeString(struct.geoStates);
        oprot.writeFieldEnd();
      }
      if (struct.geoCities != null) {
        oprot.writeFieldBegin(GEO_CITIES_FIELD_DESC);
        oprot.writeString(struct.geoCities);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDbSync_Dsp_Campaign_Geo_TargetingTupleSchemeFactory implements SchemeFactory {
    public TDbSync_Dsp_Campaign_Geo_TargetingTupleScheme getScheme() {
      return new TDbSync_Dsp_Campaign_Geo_TargetingTupleScheme();
    }
  }

  private static class TDbSync_Dsp_Campaign_Geo_TargetingTupleScheme extends TupleScheme<TDbSync_Dsp_Campaign_Geo_Targeting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Campaign_Geo_Targeting struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.campaignID);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.lastChanged);
      oprot.writeString(struct.geoCountries);
      oprot.writeString(struct.geoStates);
      oprot.writeString(struct.geoCities);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDbSync_Dsp_Campaign_Geo_Targeting struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.campaignID = iprot.readI32();
      struct.setCampaignIDIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.lastChanged = iprot.readString();
      struct.setLastChangedIsSet(true);
      struct.geoCountries = iprot.readString();
      struct.setGeoCountriesIsSet(true);
      struct.geoStates = iprot.readString();
      struct.setGeoStatesIsSet(true);
      struct.geoCities = iprot.readString();
      struct.setGeoCitiesIsSet(true);
    }
  }

}

