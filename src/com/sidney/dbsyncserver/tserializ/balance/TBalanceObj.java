/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sidney.dbsyncserver.tserializ.balance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TBalanceObj implements org.apache.thrift.TBase<TBalanceObj, TBalanceObj._Fields>, java.io.Serializable, Cloneable, Comparable<TBalanceObj> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBalanceObj");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LIST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("listName", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NEED_SYNC_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("needSyncBalance", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NEW_XBALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("newXBalance", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NEW_XHIT_FIELD_DESC = new org.apache.thrift.protocol.TField("newXHit", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NEW_XBUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("newXBudget", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NEW_TOTAL_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("newTotalHit", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NEW_TOTAL_BUDGET_FIELD_DESC = new org.apache.thrift.protocol.TField("newTotalBudget", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBalanceObjStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBalanceObjTupleSchemeFactory());
  }

  public int id; // required
  public int listName; // required
  public int dataType; // required
  public String needSyncBalance; // required
  public int status; // required
  public String newXBalance; // required
  public String newXHit; // required
  public String newXBudget; // required
  public String newTotalHit; // required
  public String newTotalBudget; // required
  public long version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    LIST_NAME((short)2, "listName"),
    DATA_TYPE((short)3, "dataType"),
    NEED_SYNC_BALANCE((short)4, "needSyncBalance"),
    STATUS((short)5, "status"),
    NEW_XBALANCE((short)6, "newXBalance"),
    NEW_XHIT((short)7, "newXHit"),
    NEW_XBUDGET((short)8, "newXBudget"),
    NEW_TOTAL_HIT((short)9, "newTotalHit"),
    NEW_TOTAL_BUDGET((short)10, "newTotalBudget"),
    VERSION((short)11, "version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LIST_NAME
          return LIST_NAME;
        case 3: // DATA_TYPE
          return DATA_TYPE;
        case 4: // NEED_SYNC_BALANCE
          return NEED_SYNC_BALANCE;
        case 5: // STATUS
          return STATUS;
        case 6: // NEW_XBALANCE
          return NEW_XBALANCE;
        case 7: // NEW_XHIT
          return NEW_XHIT;
        case 8: // NEW_XBUDGET
          return NEW_XBUDGET;
        case 9: // NEW_TOTAL_HIT
          return NEW_TOTAL_HIT;
        case 10: // NEW_TOTAL_BUDGET
          return NEW_TOTAL_BUDGET;
        case 11: // VERSION
          return VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __LISTNAME_ISSET_ID = 1;
  private static final int __DATATYPE_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __VERSION_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIST_NAME, new org.apache.thrift.meta_data.FieldMetaData("listName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEED_SYNC_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("needSyncBalance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_XBALANCE, new org.apache.thrift.meta_data.FieldMetaData("newXBalance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_XHIT, new org.apache.thrift.meta_data.FieldMetaData("newXHit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_XBUDGET, new org.apache.thrift.meta_data.FieldMetaData("newXBudget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_TOTAL_HIT, new org.apache.thrift.meta_data.FieldMetaData("newTotalHit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_TOTAL_BUDGET, new org.apache.thrift.meta_data.FieldMetaData("newTotalBudget", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBalanceObj.class, metaDataMap);
  }

  public TBalanceObj() {
  }

  public TBalanceObj(
    int id,
    int listName,
    int dataType,
    String needSyncBalance,
    int status,
    String newXBalance,
    String newXHit,
    String newXBudget,
    String newTotalHit,
    String newTotalBudget,
    long version)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.listName = listName;
    setListNameIsSet(true);
    this.dataType = dataType;
    setDataTypeIsSet(true);
    this.needSyncBalance = needSyncBalance;
    this.status = status;
    setStatusIsSet(true);
    this.newXBalance = newXBalance;
    this.newXHit = newXHit;
    this.newXBudget = newXBudget;
    this.newTotalHit = newTotalHit;
    this.newTotalBudget = newTotalBudget;
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBalanceObj(TBalanceObj other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.listName = other.listName;
    this.dataType = other.dataType;
    if (other.isSetNeedSyncBalance()) {
      this.needSyncBalance = other.needSyncBalance;
    }
    this.status = other.status;
    if (other.isSetNewXBalance()) {
      this.newXBalance = other.newXBalance;
    }
    if (other.isSetNewXHit()) {
      this.newXHit = other.newXHit;
    }
    if (other.isSetNewXBudget()) {
      this.newXBudget = other.newXBudget;
    }
    if (other.isSetNewTotalHit()) {
      this.newTotalHit = other.newTotalHit;
    }
    if (other.isSetNewTotalBudget()) {
      this.newTotalBudget = other.newTotalBudget;
    }
    this.version = other.version;
  }

  public TBalanceObj deepCopy() {
    return new TBalanceObj(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setListNameIsSet(false);
    this.listName = 0;
    setDataTypeIsSet(false);
    this.dataType = 0;
    this.needSyncBalance = null;
    setStatusIsSet(false);
    this.status = 0;
    this.newXBalance = null;
    this.newXHit = null;
    this.newXBudget = null;
    this.newTotalHit = null;
    this.newTotalBudget = null;
    setVersionIsSet(false);
    this.version = 0;
  }

  public int getId() {
    return this.id;
  }

  public TBalanceObj setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getListName() {
    return this.listName;
  }

  public TBalanceObj setListName(int listName) {
    this.listName = listName;
    setListNameIsSet(true);
    return this;
  }

  public void unsetListName() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LISTNAME_ISSET_ID);
  }

  /** Returns true if field listName is set (has been assigned a value) and false otherwise */
  public boolean isSetListName() {
    return EncodingUtils.testBit(__isset_bitfield, __LISTNAME_ISSET_ID);
  }

  public void setListNameIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LISTNAME_ISSET_ID, value);
  }

  public int getDataType() {
    return this.dataType;
  }

  public TBalanceObj setDataType(int dataType) {
    this.dataType = dataType;
    setDataTypeIsSet(true);
    return this;
  }

  public void unsetDataType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATATYPE_ISSET_ID);
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return EncodingUtils.testBit(__isset_bitfield, __DATATYPE_ISSET_ID);
  }

  public void setDataTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATATYPE_ISSET_ID, value);
  }

  public String getNeedSyncBalance() {
    return this.needSyncBalance;
  }

  public TBalanceObj setNeedSyncBalance(String needSyncBalance) {
    this.needSyncBalance = needSyncBalance;
    return this;
  }

  public void unsetNeedSyncBalance() {
    this.needSyncBalance = null;
  }

  /** Returns true if field needSyncBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedSyncBalance() {
    return this.needSyncBalance != null;
  }

  public void setNeedSyncBalanceIsSet(boolean value) {
    if (!value) {
      this.needSyncBalance = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TBalanceObj setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getNewXBalance() {
    return this.newXBalance;
  }

  public TBalanceObj setNewXBalance(String newXBalance) {
    this.newXBalance = newXBalance;
    return this;
  }

  public void unsetNewXBalance() {
    this.newXBalance = null;
  }

  /** Returns true if field newXBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetNewXBalance() {
    return this.newXBalance != null;
  }

  public void setNewXBalanceIsSet(boolean value) {
    if (!value) {
      this.newXBalance = null;
    }
  }

  public String getNewXHit() {
    return this.newXHit;
  }

  public TBalanceObj setNewXHit(String newXHit) {
    this.newXHit = newXHit;
    return this;
  }

  public void unsetNewXHit() {
    this.newXHit = null;
  }

  /** Returns true if field newXHit is set (has been assigned a value) and false otherwise */
  public boolean isSetNewXHit() {
    return this.newXHit != null;
  }

  public void setNewXHitIsSet(boolean value) {
    if (!value) {
      this.newXHit = null;
    }
  }

  public String getNewXBudget() {
    return this.newXBudget;
  }

  public TBalanceObj setNewXBudget(String newXBudget) {
    this.newXBudget = newXBudget;
    return this;
  }

  public void unsetNewXBudget() {
    this.newXBudget = null;
  }

  /** Returns true if field newXBudget is set (has been assigned a value) and false otherwise */
  public boolean isSetNewXBudget() {
    return this.newXBudget != null;
  }

  public void setNewXBudgetIsSet(boolean value) {
    if (!value) {
      this.newXBudget = null;
    }
  }

  public String getNewTotalHit() {
    return this.newTotalHit;
  }

  public TBalanceObj setNewTotalHit(String newTotalHit) {
    this.newTotalHit = newTotalHit;
    return this;
  }

  public void unsetNewTotalHit() {
    this.newTotalHit = null;
  }

  /** Returns true if field newTotalHit is set (has been assigned a value) and false otherwise */
  public boolean isSetNewTotalHit() {
    return this.newTotalHit != null;
  }

  public void setNewTotalHitIsSet(boolean value) {
    if (!value) {
      this.newTotalHit = null;
    }
  }

  public String getNewTotalBudget() {
    return this.newTotalBudget;
  }

  public TBalanceObj setNewTotalBudget(String newTotalBudget) {
    this.newTotalBudget = newTotalBudget;
    return this;
  }

  public void unsetNewTotalBudget() {
    this.newTotalBudget = null;
  }

  /** Returns true if field newTotalBudget is set (has been assigned a value) and false otherwise */
  public boolean isSetNewTotalBudget() {
    return this.newTotalBudget != null;
  }

  public void setNewTotalBudgetIsSet(boolean value) {
    if (!value) {
      this.newTotalBudget = null;
    }
  }

  public long getVersion() {
    return this.version;
  }

  public TBalanceObj setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case LIST_NAME:
      if (value == null) {
        unsetListName();
      } else {
        setListName((Integer)value);
      }
      break;

    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((Integer)value);
      }
      break;

    case NEED_SYNC_BALANCE:
      if (value == null) {
        unsetNeedSyncBalance();
      } else {
        setNeedSyncBalance((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case NEW_XBALANCE:
      if (value == null) {
        unsetNewXBalance();
      } else {
        setNewXBalance((String)value);
      }
      break;

    case NEW_XHIT:
      if (value == null) {
        unsetNewXHit();
      } else {
        setNewXHit((String)value);
      }
      break;

    case NEW_XBUDGET:
      if (value == null) {
        unsetNewXBudget();
      } else {
        setNewXBudget((String)value);
      }
      break;

    case NEW_TOTAL_HIT:
      if (value == null) {
        unsetNewTotalHit();
      } else {
        setNewTotalHit((String)value);
      }
      break;

    case NEW_TOTAL_BUDGET:
      if (value == null) {
        unsetNewTotalBudget();
      } else {
        setNewTotalBudget((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case LIST_NAME:
      return Integer.valueOf(getListName());

    case DATA_TYPE:
      return Integer.valueOf(getDataType());

    case NEED_SYNC_BALANCE:
      return getNeedSyncBalance();

    case STATUS:
      return Integer.valueOf(getStatus());

    case NEW_XBALANCE:
      return getNewXBalance();

    case NEW_XHIT:
      return getNewXHit();

    case NEW_XBUDGET:
      return getNewXBudget();

    case NEW_TOTAL_HIT:
      return getNewTotalHit();

    case NEW_TOTAL_BUDGET:
      return getNewTotalBudget();

    case VERSION:
      return Long.valueOf(getVersion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LIST_NAME:
      return isSetListName();
    case DATA_TYPE:
      return isSetDataType();
    case NEED_SYNC_BALANCE:
      return isSetNeedSyncBalance();
    case STATUS:
      return isSetStatus();
    case NEW_XBALANCE:
      return isSetNewXBalance();
    case NEW_XHIT:
      return isSetNewXHit();
    case NEW_XBUDGET:
      return isSetNewXBudget();
    case NEW_TOTAL_HIT:
      return isSetNewTotalHit();
    case NEW_TOTAL_BUDGET:
      return isSetNewTotalBudget();
    case VERSION:
      return isSetVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBalanceObj)
      return this.equals((TBalanceObj)that);
    return false;
  }

  public boolean equals(TBalanceObj that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_listName = true;
    boolean that_present_listName = true;
    if (this_present_listName || that_present_listName) {
      if (!(this_present_listName && that_present_listName))
        return false;
      if (this.listName != that.listName)
        return false;
    }

    boolean this_present_dataType = true;
    boolean that_present_dataType = true;
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (this.dataType != that.dataType)
        return false;
    }

    boolean this_present_needSyncBalance = true && this.isSetNeedSyncBalance();
    boolean that_present_needSyncBalance = true && that.isSetNeedSyncBalance();
    if (this_present_needSyncBalance || that_present_needSyncBalance) {
      if (!(this_present_needSyncBalance && that_present_needSyncBalance))
        return false;
      if (!this.needSyncBalance.equals(that.needSyncBalance))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_newXBalance = true && this.isSetNewXBalance();
    boolean that_present_newXBalance = true && that.isSetNewXBalance();
    if (this_present_newXBalance || that_present_newXBalance) {
      if (!(this_present_newXBalance && that_present_newXBalance))
        return false;
      if (!this.newXBalance.equals(that.newXBalance))
        return false;
    }

    boolean this_present_newXHit = true && this.isSetNewXHit();
    boolean that_present_newXHit = true && that.isSetNewXHit();
    if (this_present_newXHit || that_present_newXHit) {
      if (!(this_present_newXHit && that_present_newXHit))
        return false;
      if (!this.newXHit.equals(that.newXHit))
        return false;
    }

    boolean this_present_newXBudget = true && this.isSetNewXBudget();
    boolean that_present_newXBudget = true && that.isSetNewXBudget();
    if (this_present_newXBudget || that_present_newXBudget) {
      if (!(this_present_newXBudget && that_present_newXBudget))
        return false;
      if (!this.newXBudget.equals(that.newXBudget))
        return false;
    }

    boolean this_present_newTotalHit = true && this.isSetNewTotalHit();
    boolean that_present_newTotalHit = true && that.isSetNewTotalHit();
    if (this_present_newTotalHit || that_present_newTotalHit) {
      if (!(this_present_newTotalHit && that_present_newTotalHit))
        return false;
      if (!this.newTotalHit.equals(that.newTotalHit))
        return false;
    }

    boolean this_present_newTotalBudget = true && this.isSetNewTotalBudget();
    boolean that_present_newTotalBudget = true && that.isSetNewTotalBudget();
    if (this_present_newTotalBudget || that_present_newTotalBudget) {
      if (!(this_present_newTotalBudget && that_present_newTotalBudget))
        return false;
      if (!this.newTotalBudget.equals(that.newTotalBudget))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TBalanceObj other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListName()).compareTo(other.isSetListName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listName, other.listName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedSyncBalance()).compareTo(other.isSetNeedSyncBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedSyncBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needSyncBalance, other.needSyncBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewXBalance()).compareTo(other.isSetNewXBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewXBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newXBalance, other.newXBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewXHit()).compareTo(other.isSetNewXHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewXHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newXHit, other.newXHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewXBudget()).compareTo(other.isSetNewXBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewXBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newXBudget, other.newXBudget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewTotalHit()).compareTo(other.isSetNewTotalHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewTotalHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTotalHit, other.newTotalHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewTotalBudget()).compareTo(other.isSetNewTotalBudget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewTotalBudget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTotalBudget, other.newTotalBudget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBalanceObj(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("listName:");
    sb.append(this.listName);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataType:");
    sb.append(this.dataType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("needSyncBalance:");
    if (this.needSyncBalance == null) {
      sb.append("null");
    } else {
      sb.append(this.needSyncBalance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newXBalance:");
    if (this.newXBalance == null) {
      sb.append("null");
    } else {
      sb.append(this.newXBalance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newXHit:");
    if (this.newXHit == null) {
      sb.append("null");
    } else {
      sb.append(this.newXHit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newXBudget:");
    if (this.newXBudget == null) {
      sb.append("null");
    } else {
      sb.append(this.newXBudget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newTotalHit:");
    if (this.newTotalHit == null) {
      sb.append("null");
    } else {
      sb.append(this.newTotalHit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newTotalBudget:");
    if (this.newTotalBudget == null) {
      sb.append("null");
    } else {
      sb.append(this.newTotalBudget);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'listName' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dataType' because it's a primitive and you chose the non-beans generator.
    if (needSyncBalance == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'needSyncBalance' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (newXBalance == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newXBalance' was not present! Struct: " + toString());
    }
    if (newXHit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newXHit' was not present! Struct: " + toString());
    }
    if (newXBudget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newXBudget' was not present! Struct: " + toString());
    }
    if (newTotalHit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newTotalHit' was not present! Struct: " + toString());
    }
    if (newTotalBudget == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newTotalBudget' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBalanceObjStandardSchemeFactory implements SchemeFactory {
    public TBalanceObjStandardScheme getScheme() {
      return new TBalanceObjStandardScheme();
    }
  }

  private static class TBalanceObjStandardScheme extends StandardScheme<TBalanceObj> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBalanceObj struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.listName = iprot.readI32();
              struct.setListNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataType = iprot.readI32();
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEED_SYNC_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.needSyncBalance = iprot.readString();
              struct.setNeedSyncBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NEW_XBALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newXBalance = iprot.readString();
              struct.setNewXBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NEW_XHIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newXHit = iprot.readString();
              struct.setNewXHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEW_XBUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newXBudget = iprot.readString();
              struct.setNewXBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NEW_TOTAL_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newTotalHit = iprot.readString();
              struct.setNewTotalHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NEW_TOTAL_BUDGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newTotalBudget = iprot.readString();
              struct.setNewTotalBudgetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetListName()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'listName' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDataType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dataType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBalanceObj struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIST_NAME_FIELD_DESC);
      oprot.writeI32(struct.listName);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
      oprot.writeI32(struct.dataType);
      oprot.writeFieldEnd();
      if (struct.needSyncBalance != null) {
        oprot.writeFieldBegin(NEED_SYNC_BALANCE_FIELD_DESC);
        oprot.writeString(struct.needSyncBalance);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.newXBalance != null) {
        oprot.writeFieldBegin(NEW_XBALANCE_FIELD_DESC);
        oprot.writeString(struct.newXBalance);
        oprot.writeFieldEnd();
      }
      if (struct.newXHit != null) {
        oprot.writeFieldBegin(NEW_XHIT_FIELD_DESC);
        oprot.writeString(struct.newXHit);
        oprot.writeFieldEnd();
      }
      if (struct.newXBudget != null) {
        oprot.writeFieldBegin(NEW_XBUDGET_FIELD_DESC);
        oprot.writeString(struct.newXBudget);
        oprot.writeFieldEnd();
      }
      if (struct.newTotalHit != null) {
        oprot.writeFieldBegin(NEW_TOTAL_HIT_FIELD_DESC);
        oprot.writeString(struct.newTotalHit);
        oprot.writeFieldEnd();
      }
      if (struct.newTotalBudget != null) {
        oprot.writeFieldBegin(NEW_TOTAL_BUDGET_FIELD_DESC);
        oprot.writeString(struct.newTotalBudget);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBalanceObjTupleSchemeFactory implements SchemeFactory {
    public TBalanceObjTupleScheme getScheme() {
      return new TBalanceObjTupleScheme();
    }
  }

  private static class TBalanceObjTupleScheme extends TupleScheme<TBalanceObj> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBalanceObj struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeI32(struct.listName);
      oprot.writeI32(struct.dataType);
      oprot.writeString(struct.needSyncBalance);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.newXBalance);
      oprot.writeString(struct.newXHit);
      oprot.writeString(struct.newXBudget);
      oprot.writeString(struct.newTotalHit);
      oprot.writeString(struct.newTotalBudget);
      oprot.writeI64(struct.version);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBalanceObj struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.listName = iprot.readI32();
      struct.setListNameIsSet(true);
      struct.dataType = iprot.readI32();
      struct.setDataTypeIsSet(true);
      struct.needSyncBalance = iprot.readString();
      struct.setNeedSyncBalanceIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.newXBalance = iprot.readString();
      struct.setNewXBalanceIsSet(true);
      struct.newXHit = iprot.readString();
      struct.setNewXHitIsSet(true);
      struct.newXBudget = iprot.readString();
      struct.setNewXBudgetIsSet(true);
      struct.newTotalHit = iprot.readString();
      struct.setNewTotalHitIsSet(true);
      struct.newTotalBudget = iprot.readString();
      struct.setNewTotalBudgetIsSet(true);
      struct.version = iprot.readI64();
      struct.setVersionIsSet(true);
    }
  }

}

